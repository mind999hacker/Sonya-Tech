/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

#define DIR_PIN_TOP_PAN GPIO_PIN_0
#define DIR_PORT_TOP_PAN GPIOB
#define STEP_PIN_TOP_PAN GPIO_PIN_1
#define STEP_PORT_TOP_PAN GPIOB

#define DIR_PIN_LINEAR GPIO_PIN_6
#define DIR_PORT_LINEAR GPIOA
#define STEP_PIN_LINEAR GPIO_PIN_7
#define STEP_PORT_LINEAR GPIOA

#define DIR_PIN_TILT GPIO_PIN_2
#define DIR_PORT_TILT GPIOB
#define STEP_PIN_TILT GPIO_PIN_10
#define STEP_PORT_TILT GPIOB


#define LIM_SWT_PORT GPIOB
#define LIM_SWT_PIN_LINEAR GPIO_PIN_13
#define LIM_SWT_PIN_TOP_PAN GPIO_PIN_14
#define LIM_SWT_PIN_TILT GPIO_PIN_15


/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;

TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

UART_HandleTypeDef huart1;
DMA_HandleTypeDef hdma_usart1_rx;

osThreadId defaultTaskHandle;
osThreadId LinearMotorTaskHandle;
osThreadId TopPanTaskHandle;
osThreadId PanTiltTaskHandle;
osThreadId MainTaskHandle;
osThreadId MenuCommHandle;
/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM2_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM4_Init(void);
static void MX_TIM5_Init(void);
static void MX_USART1_UART_Init(void);
void StartDefaultTask(void const * argument);
void LinearMotor(void const * argument);
void TopPan(void const * argument);
void PanTilt(void const * argument);
void Main(void const * argument);
void MenuCommFunc(void const * argument);

/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */



  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_TIM1_Init();
  MX_TIM2_Init();
  MX_ADC1_Init();
  MX_TIM4_Init();
  MX_TIM5_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6,1); //EGG MOTOR INIT
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,1); //Onion MOTOR INIT
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1); //Bell Pepper MOTOR INIT
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1); //Ham MOTOR INIT
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1,1); //Cheese MOTOR INIT

  HAL_TIM_Base_Start(&htim1);
  HAL_TIM_Base_Start(&htim2);

  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* definition and creation of LinearMotorTask */
  osThreadDef(LinearMotorTask, LinearMotor, osPriorityNormal, 0, 128);
  LinearMotorTaskHandle = osThreadCreate(osThread(LinearMotorTask), NULL);

  /* definition and creation of TopPanTask */
  osThreadDef(TopPanTask, TopPan, osPriorityNormal, 0, 128);
  TopPanTaskHandle = osThreadCreate(osThread(TopPanTask), NULL);

  /* definition and creation of PanTiltTask */
  osThreadDef(PanTiltTask, PanTilt, osPriorityNormal, 0, 128);
  PanTiltTaskHandle = osThreadCreate(osThread(PanTiltTask), NULL);

  /* definition and creation of MainTask */
  osThreadDef(MainTask, Main, osPriorityNormal, 0, 128);
  MainTaskHandle = osThreadCreate(osThread(MainTask), NULL);

  /* definition and creation of MenuComm */
  osThreadDef(MenuComm, MenuCommFunc, osPriorityNormal, 0, 128);
  MenuCommHandle = osThreadCreate(osThread(MenuComm), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 12;
  RCC_OscInitStruct.PLL.PLLN = 96;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 99;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 65535;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 99;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 4294967295;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 99;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 100;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);

}

/**
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
  htim5.Init.Prescaler = 99;
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.Period = 100;
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : Limit_Switch_Linear_Pin Limit_Switch_Top_Pan_Pin Limit_Switch_Pan_Flip_Pin */
  GPIO_InitStruct.Pin = Limit_Switch_Linear_Pin|Limit_Switch_Top_Pan_Pin|Limit_Switch_Pan_Flip_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

#define LINEAR_STEP_PER_IN 634
#define TOP_PAN_STEP_PER_IN 725


int triggerLinear = 0;
int triggerTopPan = 0;
int triggerTilt = 0;

int linearDist = 31;

int linearLimitSwtch = 0;

int posLinear = 0;  // 0->Base , 1->Right , 2->Slow return to base
int posTopPan = 0;  // 0->Top , 1->Bottom
int posTilt = 0;    // 0->Normal , 1->Tilt

/***********Menu Variables*******/////////////
char rx_char;
char inputBuffer[UART_BUFFER_SIZE];
int idx = 0;
int menu[3] = {0,0}; // start, ingrToggle

void microDelay1 (uint16_t delay)
{
  __HAL_TIM_SET_COUNTER(&htim1, 0);
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
}

// micro seconds delay for motor2
void microDelay2 (uint16_t delay)
{
  __HAL_TIM_SET_COUNTER(&htim2, 0);
  while (__HAL_TIM_GET_COUNTER(&htim2) < delay);
}

void stepLinear (int steps, uint8_t direction, uint16_t delay)
{
  int x;
  if (direction == 0)
    HAL_GPIO_WritePin(DIR_PORT_LINEAR, DIR_PIN_LINEAR, 1);
  else
    HAL_GPIO_WritePin(DIR_PORT_LINEAR, DIR_PIN_LINEAR, 0);
  for(x=0; x<steps; x=x+1)
  {
    HAL_GPIO_WritePin(STEP_PORT_LINEAR, STEP_PIN_LINEAR, 1);
    microDelay1(delay);
    HAL_GPIO_WritePin(STEP_PORT_LINEAR, STEP_PIN_LINEAR, 0);
    microDelay1(delay);
  }
}

void stepTopPan (int steps, uint8_t direction, uint16_t delay)
{
  int x;
  if (direction == 0)
    HAL_GPIO_WritePin(DIR_PORT_TOP_PAN, DIR_PIN_TOP_PAN, GPIO_PIN_SET);
  else
    HAL_GPIO_WritePin(DIR_PORT_TOP_PAN, DIR_PIN_TOP_PAN, GPIO_PIN_RESET);
  for(x=0; x<steps; x=x+1)
  {
    HAL_GPIO_WritePin(STEP_PORT_TOP_PAN, STEP_PIN_TOP_PAN, GPIO_PIN_SET);
    microDelay2(delay);
    HAL_GPIO_WritePin(STEP_PORT_TOP_PAN, STEP_PIN_TOP_PAN, GPIO_PIN_RESET);
    microDelay2(delay);
  }
}

void stepTilt (int steps, uint8_t direction, uint16_t delay)
{
  int x;
  if (direction == 0)
    HAL_GPIO_WritePin(DIR_PORT_TILT, DIR_PIN_TILT, GPIO_PIN_SET);
  else
    HAL_GPIO_WritePin(DIR_PORT_TILT, DIR_PIN_TILT, GPIO_PIN_RESET);
  for(x=0; x<steps; x=x+1)
  {
    HAL_GPIO_WritePin(STEP_PORT_TILT, STEP_PIN_TILT, GPIO_PIN_SET);
    microDelay2(delay);
    HAL_GPIO_WritePin(STEP_PORT_TILT, STEP_PIN_TILT, GPIO_PIN_RESET);
    microDelay2(delay);
  }
}

void ingr5(int speed)
{
	 TIM4->CCR1 = speed;
   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
}

void ingr2(int speed)
{
	TIM4->CCR2 = speed;
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
}

void ingr4(int speed)
{
	TIM4->CCR3 = speed;
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
}

void ingr3(int speed)
{
	TIM4->CCR4 = speed;
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
}

void ingr1(int speed)
{
	TIM5->CCR2 = speed;
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
}




/* USER CODE END 4 */

/* USER CODE BEGIN Header_StartDefaultTask */
/**
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
  }
  /* USER CODE END 5 */
}

/* USER CODE BEGIN Header_LinearMotor */
/**
* @brief Function implementing the LinearMotorTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LinearMotor */
void LinearMotor(void const * argument)
{
  /* USER CODE BEGIN LinearMotor */
  /* Infinite loop */
  for(;;)
  {
	  if (triggerLinear == 1)
	  {
		  if (posLinear == 0)
		  {
			  linearLimitSwtch = HAL_GPIO_ReadPin (LIM_SWT_PORT, LIM_SWT_PIN_LINEAR);
			  while (!(linearLimitSwtch))
			  {
				  linearLimitSwtch = HAL_GPIO_ReadPin (LIM_SWT_PORT, LIM_SWT_PIN_LINEAR);
				  stepLinear(50,1,600);
			  }

		  }

		  else if (posLinear == 1)
		  {
			  stepLinear(linearDist*LINEAR_STEP_PER_IN, 0, 400);
			  triggerLinear = 0;
		  }

		  else if (posLinear == 2)
		  {

			  stepLinear(16*LINEAR_STEP_PER_IN,1,600);
			  triggerLinear = 0;

			  posTopPan = 1;
			  triggerTopPan = 1;

			  stepLinear(14*LINEAR_STEP_PER_IN,1,400);
			  //12 inch after

			  posLinear = 0;
			  triggerLinear = 1;


		  }

	  }

    osDelay(1);
  }
  /* USER CODE END LinearMotor */
}

/* USER CODE BEGIN Header_TopPan */
/**
* @brief Function implementing the TopPanTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TopPan */
void TopPan(void const * argument)
{
  /* USER CODE BEGIN TopPan */
  /* Infinite loop */
  for(;;)
  {
	  if (triggerTopPan == 1)
	  {
		  if (posTopPan == 0)
		  {
			  /*while(!(HAL_GPIO_ReadPin (LIM_SWT_PORT, LIM_SWT_PIN_TOP_PAN)))
			  {
				  stepTopPan(20,0,1500);
			  }
			  */
			  stepTopPan(6 * TOP_PAN_STEP_PER_IN,1,700);

			  triggerTopPan = 0;
		  }


		  else if (posTopPan == 1)
		  {
			  stepTopPan(6 * TOP_PAN_STEP_PER_IN,0,1500);
			  triggerTopPan = 0;
		  }
	  }
    osDelay(1);
  }
  /* USER CODE END TopPan */
}

/* USER CODE BEGIN Header_PanTilt */
/**
* @brief Function implementing the PanTiltTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_PanTilt */
void PanTilt(void const * argument)
{
  /* USER CODE BEGIN PanTilt */
  /* Infinite loop */
  for(;;)
  {
	  if (triggerTilt == 1)
	  	  {
	  		  if (posTilt == 0)
	  		  {
	  			    
	  		  }

	  		  else if (posTilt == 1)
	  		  {
	  			  
	  		  }
	  	  }
    osDelay(1);
  }
  /* USER CODE END PanTilt */
}

/* USER CODE BEGIN Header_Main */
/**
* @brief Function implementing the MainTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Main */
void Main(void const * argument)
{
  /* USER CODE BEGIN Main */
	  //**** HOMING ******//

	linearLimitSwtch = HAL_GPIO_ReadPin (LIM_SWT_PORT, LIM_SWT_PIN_LINEAR);
	if(!linearLimitSwtch)
	{
	  posLinear = 0;
	  triggerLinear = 1;
	}
	  while(!linearLimitSwtch)
      {}

	  //**** DONE HOMING ******//

  /* Infinite loop */
  for(;;)
  {

    if(menu[0] == 1)
    {
    	menu[0] = 0;
        posLinear = 1;
        triggerLinear = 1;

        osDelay(27000);

        ingr1(100);
        posLinear = 2;
        triggerLinear = 1;
        
        osDelay(3000);

        ingr1(0);
        ingr2(100);

        osDelay(4000);

        ingr2(0);
        ingr3(100);

        osDelay(4000);

        ingr3(0);


        osDelay(90000);

        posTopPan = 0;
        triggerTopPan = 1;

    }

    else if(menu[1] == 1)
    {
    	menu[1] = 0;
    	ingr1(100);
    	ingr2(100);
    	ingr3(100);
    	osDelay(5000);
    	ingr1(0);
		ingr2(0);
		ingr3(0);
    }

  }
  /* USER CODE END Main */
}

/* USER CODE BEGIN Header_MenuCommFunc */
/**
* @brief Function implementing the MenuComm thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MenuCommFunc */
void MenuCommFunc(void const * argument)
{
  /* USER CODE BEGIN MenuCommFunc */
  /* Infinite loop */

  for(;;)
  {
	  if (HAL_UART_Receive(&huart1, (uint8_t *)&rx_char, 1, HAL_MAX_DELAY) == HAL_OK) {
	              if (rx_char == '\n') {
	                  inputBuffer[idx] = '\0'; // null-terminate

	                  // Parse input like "5:123"
	                  char *sep = strchr(inputBuffer, ':');
	                  if (sep != NULL) {
	                      *sep = '\0'; // split
	                      int index = atoi(inputBuffer);
	                      int value = atoi(sep + 1);

	                      if (index >= 0 && index < MAX_ARRAY_SIZE) {
	                          menu[index] = value;
	                      }
	                  }

	                  idx = 0; // reset buffer
	              } else if (idx < UART_BUFFER_SIZE - 1) {
	                  inputBuffer[idx++] = rx_char;
	              }
	          }
	      }
    osDelay(1);
  /* USER CODE END MenuCommFunc */
}

/**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM3 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
