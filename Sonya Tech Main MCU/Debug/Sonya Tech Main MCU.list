
Sonya Tech Main MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a60  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08004c00  08004c00  00005c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cec  08004cec  00006060  2**0
                  CONTENTS
  4 .ARM          00000008  08004cec  08004cec  00005cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cf4  08004cf4  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cf4  08004cf4  00005cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004cf8  08004cf8  00005cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004cfc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004330  20000060  08004d5c  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004390  08004d5c  00006390  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001137a  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a2b  00000000  00000000  0001740a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe0  00000000  00000000  00019e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c37  00000000  00000000  0001ae18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018832  00000000  00000000  0001ba4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d6a  00000000  00000000  00034281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fedb  00000000  00000000  00044feb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e4ec6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044a8  00000000  00000000  000e4f0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000e93b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004be8 	.word	0x08004be8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08004be8 	.word	0x08004be8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	4a07      	ldr	r2, [pc, #28]	@ (80004fc <vApplicationGetIdleTaskMemory+0x2c>)
 80004e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	4a06      	ldr	r2, [pc, #24]	@ (8000500 <vApplicationGetIdleTaskMemory+0x30>)
 80004e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2280      	movs	r2, #128	@ 0x80
 80004ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	2000007c 	.word	0x2000007c
 8000500:	2000011c 	.word	0x2000011c

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b5b0      	push	{r4, r5, r7, lr}
 8000506:	b0a4      	sub	sp, #144	@ 0x90
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 ff11 	bl	8001330 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f8ab 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 fad1 	bl	8000ab8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000516:	f000 f961 	bl	80007dc <MX_TIM1_Init>
  MX_TIM2_Init();
 800051a:	f000 f9af 	bl	800087c <MX_TIM2_Init>
  MX_ADC1_Init();
 800051e:	f000 f90b 	bl	8000738 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000522:	f000 f9f7 	bl	8000914 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000526:	f000 fa6f 	bl	8000a08 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6,1); //EGG MOTOR INIT
 800052a:	2201      	movs	r2, #1
 800052c:	2140      	movs	r1, #64	@ 0x40
 800052e:	4840      	ldr	r0, [pc, #256]	@ (8000630 <main+0x12c>)
 8000530:	f001 fc30 	bl	8001d94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,1); //Onion MOTOR INIT
 8000534:	2201      	movs	r2, #1
 8000536:	2180      	movs	r1, #128	@ 0x80
 8000538:	483d      	ldr	r0, [pc, #244]	@ (8000630 <main+0x12c>)
 800053a:	f001 fc2b 	bl	8001d94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,1); //Bell Pepper MOTOR INIT
 800053e:	2201      	movs	r2, #1
 8000540:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000544:	483a      	ldr	r0, [pc, #232]	@ (8000630 <main+0x12c>)
 8000546:	f001 fc25 	bl	8001d94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1); //Ham MOTOR INIT
 800054a:	2201      	movs	r2, #1
 800054c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000550:	4837      	ldr	r0, [pc, #220]	@ (8000630 <main+0x12c>)
 8000552:	f001 fc1f 	bl	8001d94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1,1); //Cheese MOTOR INIT
 8000556:	2201      	movs	r2, #1
 8000558:	2102      	movs	r1, #2
 800055a:	4836      	ldr	r0, [pc, #216]	@ (8000634 <main+0x130>)
 800055c:	f001 fc1a 	bl	8001d94 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start(&htim1);
 8000560:	4835      	ldr	r0, [pc, #212]	@ (8000638 <main+0x134>)
 8000562:	f002 f8f7 	bl	8002754 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 8000566:	4835      	ldr	r0, [pc, #212]	@ (800063c <main+0x138>)
 8000568:	f002 f8f4 	bl	8002754 <HAL_TIM_Base_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800056c:	4b34      	ldr	r3, [pc, #208]	@ (8000640 <main+0x13c>)
 800056e:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 8000572:	461d      	mov	r5, r3
 8000574:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000576:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000578:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800057c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000580:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f002 ffe5 	bl	8003556 <osThreadCreate>
 800058c:	4603      	mov	r3, r0
 800058e:	4a2d      	ldr	r2, [pc, #180]	@ (8000644 <main+0x140>)
 8000590:	6013      	str	r3, [r2, #0]

  /* definition and creation of LinearMotorTask */
  osThreadDef(LinearMotorTask, LinearMotor, osPriorityNormal, 0, 128);
 8000592:	4b2d      	ldr	r3, [pc, #180]	@ (8000648 <main+0x144>)
 8000594:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8000598:	461d      	mov	r5, r3
 800059a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800059c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800059e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LinearMotorTaskHandle = osThreadCreate(osThread(LinearMotorTask), NULL);
 80005a6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80005aa:	2100      	movs	r1, #0
 80005ac:	4618      	mov	r0, r3
 80005ae:	f002 ffd2 	bl	8003556 <osThreadCreate>
 80005b2:	4603      	mov	r3, r0
 80005b4:	4a25      	ldr	r2, [pc, #148]	@ (800064c <main+0x148>)
 80005b6:	6013      	str	r3, [r2, #0]

  /* definition and creation of TopPanTask */
  osThreadDef(TopPanTask, TopPan, osPriorityNormal, 0, 128);
 80005b8:	4b25      	ldr	r3, [pc, #148]	@ (8000650 <main+0x14c>)
 80005ba:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80005be:	461d      	mov	r5, r3
 80005c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TopPanTaskHandle = osThreadCreate(osThread(TopPanTask), NULL);
 80005cc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f002 ffbf 	bl	8003556 <osThreadCreate>
 80005d8:	4603      	mov	r3, r0
 80005da:	4a1e      	ldr	r2, [pc, #120]	@ (8000654 <main+0x150>)
 80005dc:	6013      	str	r3, [r2, #0]

  /* definition and creation of PanTiltTask */
  osThreadDef(PanTiltTask, PanTilt, osPriorityNormal, 0, 128);
 80005de:	4b1e      	ldr	r3, [pc, #120]	@ (8000658 <main+0x154>)
 80005e0:	f107 0420 	add.w	r4, r7, #32
 80005e4:	461d      	mov	r5, r3
 80005e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PanTiltTaskHandle = osThreadCreate(osThread(PanTiltTask), NULL);
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f002 ffac 	bl	8003556 <osThreadCreate>
 80005fe:	4603      	mov	r3, r0
 8000600:	4a16      	ldr	r2, [pc, #88]	@ (800065c <main+0x158>)
 8000602:	6013      	str	r3, [r2, #0]

  /* definition and creation of MainTask */
  osThreadDef(MainTask, Main, osPriorityNormal, 0, 128);
 8000604:	4b16      	ldr	r3, [pc, #88]	@ (8000660 <main+0x15c>)
 8000606:	1d3c      	adds	r4, r7, #4
 8000608:	461d      	mov	r5, r3
 800060a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800060e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000612:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MainTaskHandle = osThreadCreate(osThread(MainTask), NULL);
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f002 ff9b 	bl	8003556 <osThreadCreate>
 8000620:	4603      	mov	r3, r0
 8000622:	4a10      	ldr	r2, [pc, #64]	@ (8000664 <main+0x160>)
 8000624:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000626:	f002 ff8f 	bl	8003548 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800062a:	bf00      	nop
 800062c:	e7fd      	b.n	800062a <main+0x126>
 800062e:	bf00      	nop
 8000630:	40020400 	.word	0x40020400
 8000634:	40020000 	.word	0x40020000
 8000638:	20000364 	.word	0x20000364
 800063c:	200003ac 	.word	0x200003ac
 8000640:	08004c0c 	.word	0x08004c0c
 8000644:	20000484 	.word	0x20000484
 8000648:	08004c38 	.word	0x08004c38
 800064c:	20000488 	.word	0x20000488
 8000650:	08004c60 	.word	0x08004c60
 8000654:	2000048c 	.word	0x2000048c
 8000658:	08004c88 	.word	0x08004c88
 800065c:	20000490 	.word	0x20000490
 8000660:	08004cb0 	.word	0x08004cb0
 8000664:	20000494 	.word	0x20000494

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b094      	sub	sp, #80	@ 0x50
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 0320 	add.w	r3, r7, #32
 8000672:	2230      	movs	r2, #48	@ 0x30
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f004 f9dc 	bl	8004a34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	4b27      	ldr	r3, [pc, #156]	@ (8000730 <SystemClock_Config+0xc8>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000694:	4a26      	ldr	r2, [pc, #152]	@ (8000730 <SystemClock_Config+0xc8>)
 8000696:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800069a:	6413      	str	r3, [r2, #64]	@ 0x40
 800069c:	4b24      	ldr	r3, [pc, #144]	@ (8000730 <SystemClock_Config+0xc8>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006a4:	60bb      	str	r3, [r7, #8]
 80006a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a8:	2300      	movs	r3, #0
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	4b21      	ldr	r3, [pc, #132]	@ (8000734 <SystemClock_Config+0xcc>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a20      	ldr	r2, [pc, #128]	@ (8000734 <SystemClock_Config+0xcc>)
 80006b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006b6:	6013      	str	r3, [r2, #0]
 80006b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000734 <SystemClock_Config+0xcc>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c4:	2301      	movs	r3, #1
 80006c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006cc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ce:	2302      	movs	r3, #2
 80006d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80006d8:	230c      	movs	r3, #12
 80006da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006dc:	2360      	movs	r3, #96	@ 0x60
 80006de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e0:	2302      	movs	r3, #2
 80006e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006e4:	2304      	movs	r3, #4
 80006e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e8:	f107 0320 	add.w	r3, r7, #32
 80006ec:	4618      	mov	r0, r3
 80006ee:	f001 fb6b 	bl	8001dc8 <HAL_RCC_OscConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006f8:	f000 fbf6 	bl	8000ee8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fc:	230f      	movs	r3, #15
 80006fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000700:	2302      	movs	r3, #2
 8000702:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000708:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800070c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070e:	2300      	movs	r3, #0
 8000710:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000712:	f107 030c 	add.w	r3, r7, #12
 8000716:	2103      	movs	r1, #3
 8000718:	4618      	mov	r0, r3
 800071a:	f001 fdcd 	bl	80022b8 <HAL_RCC_ClockConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000724:	f000 fbe0 	bl	8000ee8 <Error_Handler>
  }
}
 8000728:	bf00      	nop
 800072a:	3750      	adds	r7, #80	@ 0x50
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40023800 	.word	0x40023800
 8000734:	40007000 	.word	0x40007000

08000738 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800073e:	463b      	mov	r3, r7
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800074a:	4b21      	ldr	r3, [pc, #132]	@ (80007d0 <MX_ADC1_Init+0x98>)
 800074c:	4a21      	ldr	r2, [pc, #132]	@ (80007d4 <MX_ADC1_Init+0x9c>)
 800074e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000750:	4b1f      	ldr	r3, [pc, #124]	@ (80007d0 <MX_ADC1_Init+0x98>)
 8000752:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000756:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000758:	4b1d      	ldr	r3, [pc, #116]	@ (80007d0 <MX_ADC1_Init+0x98>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800075e:	4b1c      	ldr	r3, [pc, #112]	@ (80007d0 <MX_ADC1_Init+0x98>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000764:	4b1a      	ldr	r3, [pc, #104]	@ (80007d0 <MX_ADC1_Init+0x98>)
 8000766:	2200      	movs	r2, #0
 8000768:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800076a:	4b19      	ldr	r3, [pc, #100]	@ (80007d0 <MX_ADC1_Init+0x98>)
 800076c:	2200      	movs	r2, #0
 800076e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000772:	4b17      	ldr	r3, [pc, #92]	@ (80007d0 <MX_ADC1_Init+0x98>)
 8000774:	2200      	movs	r2, #0
 8000776:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000778:	4b15      	ldr	r3, [pc, #84]	@ (80007d0 <MX_ADC1_Init+0x98>)
 800077a:	4a17      	ldr	r2, [pc, #92]	@ (80007d8 <MX_ADC1_Init+0xa0>)
 800077c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800077e:	4b14      	ldr	r3, [pc, #80]	@ (80007d0 <MX_ADC1_Init+0x98>)
 8000780:	2200      	movs	r2, #0
 8000782:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000784:	4b12      	ldr	r3, [pc, #72]	@ (80007d0 <MX_ADC1_Init+0x98>)
 8000786:	2201      	movs	r2, #1
 8000788:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800078a:	4b11      	ldr	r3, [pc, #68]	@ (80007d0 <MX_ADC1_Init+0x98>)
 800078c:	2200      	movs	r2, #0
 800078e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000792:	4b0f      	ldr	r3, [pc, #60]	@ (80007d0 <MX_ADC1_Init+0x98>)
 8000794:	2201      	movs	r2, #1
 8000796:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000798:	480d      	ldr	r0, [pc, #52]	@ (80007d0 <MX_ADC1_Init+0x98>)
 800079a:	f000 fe0b 	bl	80013b4 <HAL_ADC_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007a4:	f000 fba0 	bl	8000ee8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80007a8:	2302      	movs	r3, #2
 80007aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007ac:	2301      	movs	r3, #1
 80007ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007b0:	2300      	movs	r3, #0
 80007b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b4:	463b      	mov	r3, r7
 80007b6:	4619      	mov	r1, r3
 80007b8:	4805      	ldr	r0, [pc, #20]	@ (80007d0 <MX_ADC1_Init+0x98>)
 80007ba:	f000 fe3f 	bl	800143c <HAL_ADC_ConfigChannel>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007c4:	f000 fb90 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	2000031c 	.word	0x2000031c
 80007d4:	40012000 	.word	0x40012000
 80007d8:	0f000001 	.word	0x0f000001

080007dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007e2:	f107 0308 	add.w	r3, r7, #8
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f0:	463b      	mov	r3, r7
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000874 <MX_TIM1_Init+0x98>)
 80007fa:	4a1f      	ldr	r2, [pc, #124]	@ (8000878 <MX_TIM1_Init+0x9c>)
 80007fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 99;
 80007fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000874 <MX_TIM1_Init+0x98>)
 8000800:	2263      	movs	r2, #99	@ 0x63
 8000802:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000804:	4b1b      	ldr	r3, [pc, #108]	@ (8000874 <MX_TIM1_Init+0x98>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800080a:	4b1a      	ldr	r3, [pc, #104]	@ (8000874 <MX_TIM1_Init+0x98>)
 800080c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000810:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000812:	4b18      	ldr	r3, [pc, #96]	@ (8000874 <MX_TIM1_Init+0x98>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000818:	4b16      	ldr	r3, [pc, #88]	@ (8000874 <MX_TIM1_Init+0x98>)
 800081a:	2200      	movs	r2, #0
 800081c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800081e:	4b15      	ldr	r3, [pc, #84]	@ (8000874 <MX_TIM1_Init+0x98>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000824:	4813      	ldr	r0, [pc, #76]	@ (8000874 <MX_TIM1_Init+0x98>)
 8000826:	f001 ff45 	bl	80026b4 <HAL_TIM_Base_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000830:	f000 fb5a 	bl	8000ee8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000834:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000838:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800083a:	f107 0308 	add.w	r3, r7, #8
 800083e:	4619      	mov	r1, r3
 8000840:	480c      	ldr	r0, [pc, #48]	@ (8000874 <MX_TIM1_Init+0x98>)
 8000842:	f002 fa45 	bl	8002cd0 <HAL_TIM_ConfigClockSource>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800084c:	f000 fb4c 	bl	8000ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000850:	2300      	movs	r3, #0
 8000852:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000854:	2300      	movs	r3, #0
 8000856:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000858:	463b      	mov	r3, r7
 800085a:	4619      	mov	r1, r3
 800085c:	4805      	ldr	r0, [pc, #20]	@ (8000874 <MX_TIM1_Init+0x98>)
 800085e:	f002 fdd9 	bl	8003414 <HAL_TIMEx_MasterConfigSynchronization>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000868:	f000 fb3e 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	3718      	adds	r7, #24
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000364 	.word	0x20000364
 8000878:	40010000 	.word	0x40010000

0800087c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000882:	f107 0308 	add.w	r3, r7, #8
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000890:	463b      	mov	r3, r7
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000898:	4b1d      	ldr	r3, [pc, #116]	@ (8000910 <MX_TIM2_Init+0x94>)
 800089a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800089e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 80008a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000910 <MX_TIM2_Init+0x94>)
 80008a2:	2263      	movs	r2, #99	@ 0x63
 80008a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000910 <MX_TIM2_Init+0x94>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80008ac:	4b18      	ldr	r3, [pc, #96]	@ (8000910 <MX_TIM2_Init+0x94>)
 80008ae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80008b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b4:	4b16      	ldr	r3, [pc, #88]	@ (8000910 <MX_TIM2_Init+0x94>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ba:	4b15      	ldr	r3, [pc, #84]	@ (8000910 <MX_TIM2_Init+0x94>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008c0:	4813      	ldr	r0, [pc, #76]	@ (8000910 <MX_TIM2_Init+0x94>)
 80008c2:	f001 fef7 	bl	80026b4 <HAL_TIM_Base_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80008cc:	f000 fb0c 	bl	8000ee8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008d6:	f107 0308 	add.w	r3, r7, #8
 80008da:	4619      	mov	r1, r3
 80008dc:	480c      	ldr	r0, [pc, #48]	@ (8000910 <MX_TIM2_Init+0x94>)
 80008de:	f002 f9f7 	bl	8002cd0 <HAL_TIM_ConfigClockSource>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80008e8:	f000 fafe 	bl	8000ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ec:	2300      	movs	r3, #0
 80008ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f0:	2300      	movs	r3, #0
 80008f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008f4:	463b      	mov	r3, r7
 80008f6:	4619      	mov	r1, r3
 80008f8:	4805      	ldr	r0, [pc, #20]	@ (8000910 <MX_TIM2_Init+0x94>)
 80008fa:	f002 fd8b 	bl	8003414 <HAL_TIMEx_MasterConfigSynchronization>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000904:	f000 faf0 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000908:	bf00      	nop
 800090a:	3718      	adds	r7, #24
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	200003ac 	.word	0x200003ac

08000914 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08a      	sub	sp, #40	@ 0x28
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800091a:	f107 0320 	add.w	r3, r7, #32
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
 8000930:	611a      	str	r2, [r3, #16]
 8000932:	615a      	str	r2, [r3, #20]
 8000934:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000936:	4b32      	ldr	r3, [pc, #200]	@ (8000a00 <MX_TIM4_Init+0xec>)
 8000938:	4a32      	ldr	r2, [pc, #200]	@ (8000a04 <MX_TIM4_Init+0xf0>)
 800093a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 800093c:	4b30      	ldr	r3, [pc, #192]	@ (8000a00 <MX_TIM4_Init+0xec>)
 800093e:	2263      	movs	r2, #99	@ 0x63
 8000940:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000942:	4b2f      	ldr	r3, [pc, #188]	@ (8000a00 <MX_TIM4_Init+0xec>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8000948:	4b2d      	ldr	r3, [pc, #180]	@ (8000a00 <MX_TIM4_Init+0xec>)
 800094a:	2264      	movs	r2, #100	@ 0x64
 800094c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800094e:	4b2c      	ldr	r3, [pc, #176]	@ (8000a00 <MX_TIM4_Init+0xec>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000954:	4b2a      	ldr	r3, [pc, #168]	@ (8000a00 <MX_TIM4_Init+0xec>)
 8000956:	2200      	movs	r2, #0
 8000958:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800095a:	4829      	ldr	r0, [pc, #164]	@ (8000a00 <MX_TIM4_Init+0xec>)
 800095c:	f001 ffb6 	bl	80028cc <HAL_TIM_PWM_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000966:	f000 fabf 	bl	8000ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800096a:	2300      	movs	r3, #0
 800096c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800096e:	2300      	movs	r3, #0
 8000970:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000972:	f107 0320 	add.w	r3, r7, #32
 8000976:	4619      	mov	r1, r3
 8000978:	4821      	ldr	r0, [pc, #132]	@ (8000a00 <MX_TIM4_Init+0xec>)
 800097a:	f002 fd4b 	bl	8003414 <HAL_TIMEx_MasterConfigSynchronization>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8000984:	f000 fab0 	bl	8000ee8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000988:	2360      	movs	r3, #96	@ 0x60
 800098a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000990:	2300      	movs	r3, #0
 8000992:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	2200      	movs	r2, #0
 800099c:	4619      	mov	r1, r3
 800099e:	4818      	ldr	r0, [pc, #96]	@ (8000a00 <MX_TIM4_Init+0xec>)
 80009a0:	f002 f8d4 	bl	8002b4c <HAL_TIM_PWM_ConfigChannel>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80009aa:	f000 fa9d 	bl	8000ee8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	2204      	movs	r2, #4
 80009b2:	4619      	mov	r1, r3
 80009b4:	4812      	ldr	r0, [pc, #72]	@ (8000a00 <MX_TIM4_Init+0xec>)
 80009b6:	f002 f8c9 	bl	8002b4c <HAL_TIM_PWM_ConfigChannel>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80009c0:	f000 fa92 	bl	8000ee8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	2208      	movs	r2, #8
 80009c8:	4619      	mov	r1, r3
 80009ca:	480d      	ldr	r0, [pc, #52]	@ (8000a00 <MX_TIM4_Init+0xec>)
 80009cc:	f002 f8be 	bl	8002b4c <HAL_TIM_PWM_ConfigChannel>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_TIM4_Init+0xc6>
  {
    Error_Handler();
 80009d6:	f000 fa87 	bl	8000ee8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	220c      	movs	r2, #12
 80009de:	4619      	mov	r1, r3
 80009e0:	4807      	ldr	r0, [pc, #28]	@ (8000a00 <MX_TIM4_Init+0xec>)
 80009e2:	f002 f8b3 	bl	8002b4c <HAL_TIM_PWM_ConfigChannel>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 80009ec:	f000 fa7c 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80009f0:	4803      	ldr	r0, [pc, #12]	@ (8000a00 <MX_TIM4_Init+0xec>)
 80009f2:	f000 fb5d 	bl	80010b0 <HAL_TIM_MspPostInit>

}
 80009f6:	bf00      	nop
 80009f8:	3728      	adds	r7, #40	@ 0x28
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200003f4 	.word	0x200003f4
 8000a04:	40000800 	.word	0x40000800

08000a08 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	@ 0x28
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a0e:	f107 0320 	add.w	r3, r7, #32
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
 8000a24:	611a      	str	r2, [r3, #16]
 8000a26:	615a      	str	r2, [r3, #20]
 8000a28:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000a2a:	4b21      	ldr	r3, [pc, #132]	@ (8000ab0 <MX_TIM5_Init+0xa8>)
 8000a2c:	4a21      	ldr	r2, [pc, #132]	@ (8000ab4 <MX_TIM5_Init+0xac>)
 8000a2e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 99;
 8000a30:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab0 <MX_TIM5_Init+0xa8>)
 8000a32:	2263      	movs	r2, #99	@ 0x63
 8000a34:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a36:	4b1e      	ldr	r3, [pc, #120]	@ (8000ab0 <MX_TIM5_Init+0xa8>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100;
 8000a3c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab0 <MX_TIM5_Init+0xa8>)
 8000a3e:	2264      	movs	r2, #100	@ 0x64
 8000a40:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a42:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab0 <MX_TIM5_Init+0xa8>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a48:	4b19      	ldr	r3, [pc, #100]	@ (8000ab0 <MX_TIM5_Init+0xa8>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000a4e:	4818      	ldr	r0, [pc, #96]	@ (8000ab0 <MX_TIM5_Init+0xa8>)
 8000a50:	f001 ff3c 	bl	80028cc <HAL_TIM_PWM_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8000a5a:	f000 fa45 	bl	8000ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000a66:	f107 0320 	add.w	r3, r7, #32
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4810      	ldr	r0, [pc, #64]	@ (8000ab0 <MX_TIM5_Init+0xa8>)
 8000a6e:	f002 fcd1 	bl	8003414 <HAL_TIMEx_MasterConfigSynchronization>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8000a78:	f000 fa36 	bl	8000ee8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a7c:	2360      	movs	r3, #96	@ 0x60
 8000a7e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	2204      	movs	r2, #4
 8000a90:	4619      	mov	r1, r3
 8000a92:	4807      	ldr	r0, [pc, #28]	@ (8000ab0 <MX_TIM5_Init+0xa8>)
 8000a94:	f002 f85a 	bl	8002b4c <HAL_TIM_PWM_ConfigChannel>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000a9e:	f000 fa23 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000aa2:	4803      	ldr	r0, [pc, #12]	@ (8000ab0 <MX_TIM5_Init+0xa8>)
 8000aa4:	f000 fb04 	bl	80010b0 <HAL_TIM_MspPostInit>

}
 8000aa8:	bf00      	nop
 8000aaa:	3728      	adds	r7, #40	@ 0x28
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	2000043c 	.word	0x2000043c
 8000ab4:	40000c00 	.word	0x40000c00

08000ab8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08a      	sub	sp, #40	@ 0x28
 8000abc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abe:	f107 0314 	add.w	r3, r7, #20
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
 8000acc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]
 8000ad2:	4b37      	ldr	r3, [pc, #220]	@ (8000bb0 <MX_GPIO_Init+0xf8>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	4a36      	ldr	r2, [pc, #216]	@ (8000bb0 <MX_GPIO_Init+0xf8>)
 8000ad8:	f043 0304 	orr.w	r3, r3, #4
 8000adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ade:	4b34      	ldr	r3, [pc, #208]	@ (8000bb0 <MX_GPIO_Init+0xf8>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	f003 0304 	and.w	r3, r3, #4
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	4b30      	ldr	r3, [pc, #192]	@ (8000bb0 <MX_GPIO_Init+0xf8>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	4a2f      	ldr	r2, [pc, #188]	@ (8000bb0 <MX_GPIO_Init+0xf8>)
 8000af4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afa:	4b2d      	ldr	r3, [pc, #180]	@ (8000bb0 <MX_GPIO_Init+0xf8>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	4b29      	ldr	r3, [pc, #164]	@ (8000bb0 <MX_GPIO_Init+0xf8>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	4a28      	ldr	r2, [pc, #160]	@ (8000bb0 <MX_GPIO_Init+0xf8>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b16:	4b26      	ldr	r3, [pc, #152]	@ (8000bb0 <MX_GPIO_Init+0xf8>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	60bb      	str	r3, [r7, #8]
 8000b20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	4b22      	ldr	r3, [pc, #136]	@ (8000bb0 <MX_GPIO_Init+0xf8>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	4a21      	ldr	r2, [pc, #132]	@ (8000bb0 <MX_GPIO_Init+0xf8>)
 8000b2c:	f043 0302 	orr.w	r3, r3, #2
 8000b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b32:	4b1f      	ldr	r3, [pc, #124]	@ (8000bb0 <MX_GPIO_Init+0xf8>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	f003 0302 	and.w	r3, r3, #2
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	21c0      	movs	r1, #192	@ 0xc0
 8000b42:	481c      	ldr	r0, [pc, #112]	@ (8000bb4 <MX_GPIO_Init+0xfc>)
 8000b44:	f001 f926 	bl	8001d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10, GPIO_PIN_RESET);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f240 4107 	movw	r1, #1031	@ 0x407
 8000b4e:	481a      	ldr	r0, [pc, #104]	@ (8000bb8 <MX_GPIO_Init+0x100>)
 8000b50:	f001 f920 	bl	8001d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b54:	23c0      	movs	r3, #192	@ 0xc0
 8000b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4812      	ldr	r0, [pc, #72]	@ (8000bb4 <MX_GPIO_Init+0xfc>)
 8000b6c:	f000 ff76 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10;
 8000b70:	f240 4307 	movw	r3, #1031	@ 0x407
 8000b74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b76:	2301      	movs	r3, #1
 8000b78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	480b      	ldr	r0, [pc, #44]	@ (8000bb8 <MX_GPIO_Init+0x100>)
 8000b8a:	f000 ff67 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_Switch_Linear_Pin Limit_Switch_Top_Pan_Pin Limit_Switch_Pan_Flip_Pin */
  GPIO_InitStruct.Pin = Limit_Switch_Linear_Pin|Limit_Switch_Top_Pan_Pin|Limit_Switch_Pan_Flip_Pin;
 8000b8e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000b92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4805      	ldr	r0, [pc, #20]	@ (8000bb8 <MX_GPIO_Init+0x100>)
 8000ba4:	f000 ff5a 	bl	8001a5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ba8:	bf00      	nop
 8000baa:	3728      	adds	r7, #40	@ 0x28
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40020000 	.word	0x40020000
 8000bb8:	40020400 	.word	0x40020400

08000bbc <microDelay1>:
int posLinear = 0;  // 0->Base , 1->Right , 2->Slow return to base
int posTopPan = 0;  // 0->Top , 1->Bottom
int posTilt = 0;    // 0->Normal , 1->Tilt

void microDelay1 (uint16_t delay)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000bc6:	4b09      	ldr	r3, [pc, #36]	@ (8000bec <microDelay1+0x30>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8000bce:	bf00      	nop
 8000bd0:	4b06      	ldr	r3, [pc, #24]	@ (8000bec <microDelay1+0x30>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000bd6:	88fb      	ldrh	r3, [r7, #6]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d3f9      	bcc.n	8000bd0 <microDelay1+0x14>
}
 8000bdc:	bf00      	nop
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	20000364 	.word	0x20000364

08000bf0 <microDelay2>:

// micro seconds delay for motor2
void microDelay2 (uint16_t delay)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000bfa:	4b09      	ldr	r3, [pc, #36]	@ (8000c20 <microDelay2+0x30>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim2) < delay);
 8000c02:	bf00      	nop
 8000c04:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <microDelay2+0x30>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000c0a:	88fb      	ldrh	r3, [r7, #6]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d3f9      	bcc.n	8000c04 <microDelay2+0x14>
}
 8000c10:	bf00      	nop
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	200003ac 	.word	0x200003ac

08000c24 <stepLinear>:

void stepLinear (int steps, uint8_t direction, uint16_t delay)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	70fb      	strb	r3, [r7, #3]
 8000c30:	4613      	mov	r3, r2
 8000c32:	803b      	strh	r3, [r7, #0]
  int x;
  if (direction == 0)
 8000c34:	78fb      	ldrb	r3, [r7, #3]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d105      	bne.n	8000c46 <stepLinear+0x22>
    HAL_GPIO_WritePin(DIR_PORT_LINEAR, DIR_PIN_LINEAR, 1);
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	4815      	ldr	r0, [pc, #84]	@ (8000c94 <stepLinear+0x70>)
 8000c40:	f001 f8a8 	bl	8001d94 <HAL_GPIO_WritePin>
 8000c44:	e004      	b.n	8000c50 <stepLinear+0x2c>
  else
    HAL_GPIO_WritePin(DIR_PORT_LINEAR, DIR_PIN_LINEAR, 0);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2101      	movs	r1, #1
 8000c4a:	4812      	ldr	r0, [pc, #72]	@ (8000c94 <stepLinear+0x70>)
 8000c4c:	f001 f8a2 	bl	8001d94 <HAL_GPIO_WritePin>
  for(x=0; x<steps; x=x+1)
 8000c50:	2300      	movs	r3, #0
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	e014      	b.n	8000c80 <stepLinear+0x5c>
  {
    HAL_GPIO_WritePin(STEP_PORT_LINEAR, STEP_PIN_LINEAR, 1);
 8000c56:	2201      	movs	r2, #1
 8000c58:	2102      	movs	r1, #2
 8000c5a:	480e      	ldr	r0, [pc, #56]	@ (8000c94 <stepLinear+0x70>)
 8000c5c:	f001 f89a 	bl	8001d94 <HAL_GPIO_WritePin>
    microDelay1(delay);
 8000c60:	883b      	ldrh	r3, [r7, #0]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff ffaa 	bl	8000bbc <microDelay1>
    HAL_GPIO_WritePin(STEP_PORT_LINEAR, STEP_PIN_LINEAR, 0);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2102      	movs	r1, #2
 8000c6c:	4809      	ldr	r0, [pc, #36]	@ (8000c94 <stepLinear+0x70>)
 8000c6e:	f001 f891 	bl	8001d94 <HAL_GPIO_WritePin>
    microDelay1(delay);
 8000c72:	883b      	ldrh	r3, [r7, #0]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff ffa1 	bl	8000bbc <microDelay1>
  for(x=0; x<steps; x=x+1)
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fa      	ldr	r2, [r7, #12]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	dbe6      	blt.n	8000c56 <stepLinear+0x32>
  }
}
 8000c88:	bf00      	nop
 8000c8a:	bf00      	nop
 8000c8c:	3710      	adds	r7, #16
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40020400 	.word	0x40020400

08000c98 <stepTopPan>:

void stepTopPan (int steps, uint8_t direction, uint16_t delay)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	70fb      	strb	r3, [r7, #3]
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	803b      	strh	r3, [r7, #0]
  int x;
  if (direction == 0)
 8000ca8:	78fb      	ldrb	r3, [r7, #3]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d105      	bne.n	8000cba <stepTopPan+0x22>
    HAL_GPIO_WritePin(DIR_PORT_TOP_PAN, DIR_PIN_TOP_PAN, GPIO_PIN_SET);
 8000cae:	2201      	movs	r2, #1
 8000cb0:	2140      	movs	r1, #64	@ 0x40
 8000cb2:	4815      	ldr	r0, [pc, #84]	@ (8000d08 <stepTopPan+0x70>)
 8000cb4:	f001 f86e 	bl	8001d94 <HAL_GPIO_WritePin>
 8000cb8:	e004      	b.n	8000cc4 <stepTopPan+0x2c>
  else
    HAL_GPIO_WritePin(DIR_PORT_TOP_PAN, DIR_PIN_TOP_PAN, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2140      	movs	r1, #64	@ 0x40
 8000cbe:	4812      	ldr	r0, [pc, #72]	@ (8000d08 <stepTopPan+0x70>)
 8000cc0:	f001 f868 	bl	8001d94 <HAL_GPIO_WritePin>
  for(x=0; x<steps; x=x+1)
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	e014      	b.n	8000cf4 <stepTopPan+0x5c>
  {
    HAL_GPIO_WritePin(STEP_PORT_TOP_PAN, STEP_PIN_TOP_PAN, GPIO_PIN_SET);
 8000cca:	2201      	movs	r2, #1
 8000ccc:	2180      	movs	r1, #128	@ 0x80
 8000cce:	480e      	ldr	r0, [pc, #56]	@ (8000d08 <stepTopPan+0x70>)
 8000cd0:	f001 f860 	bl	8001d94 <HAL_GPIO_WritePin>
    microDelay2(delay);
 8000cd4:	883b      	ldrh	r3, [r7, #0]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff ff8a 	bl	8000bf0 <microDelay2>
    HAL_GPIO_WritePin(STEP_PORT_TOP_PAN, STEP_PIN_TOP_PAN, GPIO_PIN_RESET);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2180      	movs	r1, #128	@ 0x80
 8000ce0:	4809      	ldr	r0, [pc, #36]	@ (8000d08 <stepTopPan+0x70>)
 8000ce2:	f001 f857 	bl	8001d94 <HAL_GPIO_WritePin>
    microDelay2(delay);
 8000ce6:	883b      	ldrh	r3, [r7, #0]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ff81 	bl	8000bf0 <microDelay2>
  for(x=0; x<steps; x=x+1)
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fa      	ldr	r2, [r7, #12]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	dbe6      	blt.n	8000cca <stepTopPan+0x32>
  }
}
 8000cfc:	bf00      	nop
 8000cfe:	bf00      	nop
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40020000 	.word	0x40020000

08000d0c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d14:	2001      	movs	r0, #1
 8000d16:	f002 fc6a 	bl	80035ee <osDelay>
 8000d1a:	e7fb      	b.n	8000d14 <StartDefaultTask+0x8>

08000d1c <LinearMotor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LinearMotor */
void LinearMotor(void const * argument)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LinearMotor */
  /* Infinite loop */
  for(;;)
  {
	  if (triggerLinear == 1)
 8000d24:	4b21      	ldr	r3, [pc, #132]	@ (8000dac <LinearMotor+0x90>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d13b      	bne.n	8000da4 <LinearMotor+0x88>
	  {
		  if (posLinear == 0)
 8000d2c:	4b20      	ldr	r3, [pc, #128]	@ (8000db0 <LinearMotor+0x94>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d112      	bne.n	8000d5a <LinearMotor+0x3e>
		  {
			  while(!(HAL_GPIO_ReadPin (LIM_SWT_PORT, LIM_SWT_PIN_LINEAR)))
 8000d34:	e005      	b.n	8000d42 <LinearMotor+0x26>
			  {
				  stepLinear(20,0,1500);
 8000d36:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	2014      	movs	r0, #20
 8000d3e:	f7ff ff71 	bl	8000c24 <stepLinear>
			  while(!(HAL_GPIO_ReadPin (LIM_SWT_PORT, LIM_SWT_PIN_LINEAR)))
 8000d42:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d46:	481b      	ldr	r0, [pc, #108]	@ (8000db4 <LinearMotor+0x98>)
 8000d48:	f001 f80c 	bl	8001d64 <HAL_GPIO_ReadPin>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d0f1      	beq.n	8000d36 <LinearMotor+0x1a>
			  }
			  triggerLinear = 0;
 8000d52:	4b16      	ldr	r3, [pc, #88]	@ (8000dac <LinearMotor+0x90>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	e024      	b.n	8000da4 <LinearMotor+0x88>
		  }

		  else if (posLinear == 1)
 8000d5a:	4b15      	ldr	r3, [pc, #84]	@ (8000db0 <LinearMotor+0x94>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d10a      	bne.n	8000d78 <LinearMotor+0x5c>
		  {
			  stepLinear(2000, 1, 800);
 8000d62:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8000d66:	2101      	movs	r1, #1
 8000d68:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000d6c:	f7ff ff5a 	bl	8000c24 <stepLinear>
			  triggerLinear = 0;
 8000d70:	4b0e      	ldr	r3, [pc, #56]	@ (8000dac <LinearMotor+0x90>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	e015      	b.n	8000da4 <LinearMotor+0x88>
		  }

		  else if (posLinear == 2)
 8000d78:	4b0d      	ldr	r3, [pc, #52]	@ (8000db0 <LinearMotor+0x94>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	d111      	bne.n	8000da4 <LinearMotor+0x88>
		  {
			  while(!(HAL_GPIO_ReadPin (LIM_SWT_PORT, LIM_SWT_PIN_LINEAR)))
 8000d80:	e005      	b.n	8000d8e <LinearMotor+0x72>
			  {
				  stepLinear(20,0,2200);
 8000d82:	f640 0298 	movw	r2, #2200	@ 0x898
 8000d86:	2100      	movs	r1, #0
 8000d88:	2014      	movs	r0, #20
 8000d8a:	f7ff ff4b 	bl	8000c24 <stepLinear>
			  while(!(HAL_GPIO_ReadPin (LIM_SWT_PORT, LIM_SWT_PIN_LINEAR)))
 8000d8e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d92:	4808      	ldr	r0, [pc, #32]	@ (8000db4 <LinearMotor+0x98>)
 8000d94:	f000 ffe6 	bl	8001d64 <HAL_GPIO_ReadPin>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d0f1      	beq.n	8000d82 <LinearMotor+0x66>
			  }
			  triggerLinear = 0;
 8000d9e:	4b03      	ldr	r3, [pc, #12]	@ (8000dac <LinearMotor+0x90>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
		  }
	  }

    osDelay(1);
 8000da4:	2001      	movs	r0, #1
 8000da6:	f002 fc22 	bl	80035ee <osDelay>
	  if (triggerLinear == 1)
 8000daa:	e7bb      	b.n	8000d24 <LinearMotor+0x8>
 8000dac:	20000498 	.word	0x20000498
 8000db0:	200004a4 	.word	0x200004a4
 8000db4:	40020400 	.word	0x40020400

08000db8 <TopPan>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TopPan */
void TopPan(void const * argument)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TopPan */
  /* Infinite loop */
  for(;;)
  {
	  if (triggerTopPan == 1)
 8000dc0:	4b12      	ldr	r3, [pc, #72]	@ (8000e0c <TopPan+0x54>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d11c      	bne.n	8000e02 <TopPan+0x4a>
	  {
		  if (posTopPan == 0)
 8000dc8:	4b11      	ldr	r3, [pc, #68]	@ (8000e10 <TopPan+0x58>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d10a      	bne.n	8000de6 <TopPan+0x2e>
			  /*while(!(HAL_GPIO_ReadPin (LIM_SWT_PORT, LIM_SWT_PIN_TOP_PAN)))
			  {
				  stepTopPan(20,0,1500);
			  }
			  */
			  stepTopPan(2200,1,700);
 8000dd0:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	f640 0098 	movw	r0, #2200	@ 0x898
 8000dda:	f7ff ff5d 	bl	8000c98 <stepTopPan>

			  triggerTopPan = 0;
 8000dde:	4b0b      	ldr	r3, [pc, #44]	@ (8000e0c <TopPan+0x54>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	e00d      	b.n	8000e02 <TopPan+0x4a>
		  }

		  else if (posTopPan == 1)
 8000de6:	4b0a      	ldr	r3, [pc, #40]	@ (8000e10 <TopPan+0x58>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d109      	bne.n	8000e02 <TopPan+0x4a>
		  {
			  stepTopPan(2200,0,700);
 8000dee:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8000df2:	2100      	movs	r1, #0
 8000df4:	f640 0098 	movw	r0, #2200	@ 0x898
 8000df8:	f7ff ff4e 	bl	8000c98 <stepTopPan>
			  triggerTopPan = 0;
 8000dfc:	4b03      	ldr	r3, [pc, #12]	@ (8000e0c <TopPan+0x54>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
		  }
	  }
    osDelay(1);
 8000e02:	2001      	movs	r0, #1
 8000e04:	f002 fbf3 	bl	80035ee <osDelay>
	  if (triggerTopPan == 1)
 8000e08:	e7da      	b.n	8000dc0 <TopPan+0x8>
 8000e0a:	bf00      	nop
 8000e0c:	2000049c 	.word	0x2000049c
 8000e10:	200004a8 	.word	0x200004a8

08000e14 <PanTilt>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_PanTilt */
void PanTilt(void const * argument)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PanTilt */
  /* Infinite loop */
  for(;;)
  {
	  if (triggerTilt == 1)
 8000e1c:	4b15      	ldr	r3, [pc, #84]	@ (8000e74 <PanTilt+0x60>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d123      	bne.n	8000e6c <PanTilt+0x58>
	  	  {
	  		  if (posTilt == 0)
 8000e24:	4b14      	ldr	r3, [pc, #80]	@ (8000e78 <PanTilt+0x64>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d112      	bne.n	8000e52 <PanTilt+0x3e>
	  		  {
	  			  while(!(HAL_GPIO_ReadPin (LIM_SWT_PORT, LIM_SWT_PIN_TILT)))
 8000e2c:	e005      	b.n	8000e3a <PanTilt+0x26>
	  			  {
	  				  stepTopPan(20,0,1500);
 8000e2e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000e32:	2100      	movs	r1, #0
 8000e34:	2014      	movs	r0, #20
 8000e36:	f7ff ff2f 	bl	8000c98 <stepTopPan>
	  			  while(!(HAL_GPIO_ReadPin (LIM_SWT_PORT, LIM_SWT_PIN_TILT)))
 8000e3a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e3e:	480f      	ldr	r0, [pc, #60]	@ (8000e7c <PanTilt+0x68>)
 8000e40:	f000 ff90 	bl	8001d64 <HAL_GPIO_ReadPin>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d0f1      	beq.n	8000e2e <PanTilt+0x1a>
	  			  }
	  			  triggerTilt = 0;
 8000e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e74 <PanTilt+0x60>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	e00c      	b.n	8000e6c <PanTilt+0x58>
	  		  }

	  		  else if (posTilt == 1)
 8000e52:	4b09      	ldr	r3, [pc, #36]	@ (8000e78 <PanTilt+0x64>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d108      	bne.n	8000e6c <PanTilt+0x58>
	  		  {
	  			  stepTopPan(200,1,800);
 8000e5a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8000e5e:	2101      	movs	r1, #1
 8000e60:	20c8      	movs	r0, #200	@ 0xc8
 8000e62:	f7ff ff19 	bl	8000c98 <stepTopPan>
	  			  triggerTilt = 0;
 8000e66:	4b03      	ldr	r3, [pc, #12]	@ (8000e74 <PanTilt+0x60>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
	  		  }
	  	  }
    osDelay(1);
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	f002 fbbe 	bl	80035ee <osDelay>
	  if (triggerTilt == 1)
 8000e72:	e7d3      	b.n	8000e1c <PanTilt+0x8>
 8000e74:	200004a0 	.word	0x200004a0
 8000e78:	200004ac 	.word	0x200004ac
 8000e7c:	40020400 	.word	0x40020400

08000e80 <Main>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Main */
void Main(void const * argument)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
	  osDelay(5000);

	  */


	  posTopPan = 1;
 8000e88:	4b0c      	ldr	r3, [pc, #48]	@ (8000ebc <Main+0x3c>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	601a      	str	r2, [r3, #0]
	  triggerTopPan = 1;
 8000e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec0 <Main+0x40>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	601a      	str	r2, [r3, #0]
	  osDelay(5000);
 8000e94:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000e98:	f002 fba9 	bl	80035ee <osDelay>

	  posTopPan = 0;
 8000e9c:	4b07      	ldr	r3, [pc, #28]	@ (8000ebc <Main+0x3c>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
	  triggerTopPan = 1;
 8000ea2:	4b07      	ldr	r3, [pc, #28]	@ (8000ec0 <Main+0x40>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	601a      	str	r2, [r3, #0]
	  osDelay(5000);
 8000ea8:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000eac:	f002 fb9f 	bl	80035ee <osDelay>




    osDelay(5000);
 8000eb0:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000eb4:	f002 fb9b 	bl	80035ee <osDelay>
	  posTopPan = 1;
 8000eb8:	bf00      	nop
 8000eba:	e7e5      	b.n	8000e88 <Main+0x8>
 8000ebc:	200004a8 	.word	0x200004a8
 8000ec0:	2000049c 	.word	0x2000049c

08000ec4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a04      	ldr	r2, [pc, #16]	@ (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d101      	bne.n	8000eda <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ed6:	f000 fa4d 	bl	8001374 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40000400 	.word	0x40000400

08000ee8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eec:	b672      	cpsid	i
}
 8000eee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <Error_Handler+0x8>

08000ef4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	607b      	str	r3, [r7, #4]
 8000efe:	4b12      	ldr	r3, [pc, #72]	@ (8000f48 <HAL_MspInit+0x54>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f02:	4a11      	ldr	r2, [pc, #68]	@ (8000f48 <HAL_MspInit+0x54>)
 8000f04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f48 <HAL_MspInit+0x54>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	603b      	str	r3, [r7, #0]
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f48 <HAL_MspInit+0x54>)
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f48 <HAL_MspInit+0x54>)
 8000f20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f26:	4b08      	ldr	r3, [pc, #32]	@ (8000f48 <HAL_MspInit+0x54>)
 8000f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f2e:	603b      	str	r3, [r7, #0]
 8000f30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	210f      	movs	r1, #15
 8000f36:	f06f 0001 	mvn.w	r0, #1
 8000f3a:	f000 fd65 	bl	8001a08 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40023800 	.word	0x40023800

08000f4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08a      	sub	sp, #40	@ 0x28
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a17      	ldr	r2, [pc, #92]	@ (8000fc8 <HAL_ADC_MspInit+0x7c>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d127      	bne.n	8000fbe <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
 8000f72:	4b16      	ldr	r3, [pc, #88]	@ (8000fcc <HAL_ADC_MspInit+0x80>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f76:	4a15      	ldr	r2, [pc, #84]	@ (8000fcc <HAL_ADC_MspInit+0x80>)
 8000f78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f7e:	4b13      	ldr	r3, [pc, #76]	@ (8000fcc <HAL_ADC_MspInit+0x80>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fcc <HAL_ADC_MspInit+0x80>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f92:	4a0e      	ldr	r2, [pc, #56]	@ (8000fcc <HAL_ADC_MspInit+0x80>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000fcc <HAL_ADC_MspInit+0x80>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000fa6:	233d      	movs	r3, #61	@ 0x3d
 8000fa8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000faa:	2303      	movs	r3, #3
 8000fac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb2:	f107 0314 	add.w	r3, r7, #20
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4805      	ldr	r0, [pc, #20]	@ (8000fd0 <HAL_ADC_MspInit+0x84>)
 8000fba:	f000 fd4f 	bl	8001a5c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000fbe:	bf00      	nop
 8000fc0:	3728      	adds	r7, #40	@ 0x28
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40012000 	.word	0x40012000
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40020000 	.word	0x40020000

08000fd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a15      	ldr	r2, [pc, #84]	@ (8001038 <HAL_TIM_Base_MspInit+0x64>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d10e      	bne.n	8001004 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	4b14      	ldr	r3, [pc, #80]	@ (800103c <HAL_TIM_Base_MspInit+0x68>)
 8000fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fee:	4a13      	ldr	r2, [pc, #76]	@ (800103c <HAL_TIM_Base_MspInit+0x68>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ff6:	4b11      	ldr	r3, [pc, #68]	@ (800103c <HAL_TIM_Base_MspInit+0x68>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001002:	e012      	b.n	800102a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800100c:	d10d      	bne.n	800102a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	4b0a      	ldr	r3, [pc, #40]	@ (800103c <HAL_TIM_Base_MspInit+0x68>)
 8001014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001016:	4a09      	ldr	r2, [pc, #36]	@ (800103c <HAL_TIM_Base_MspInit+0x68>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	6413      	str	r3, [r2, #64]	@ 0x40
 800101e:	4b07      	ldr	r3, [pc, #28]	@ (800103c <HAL_TIM_Base_MspInit+0x68>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
}
 800102a:	bf00      	nop
 800102c:	3714      	adds	r7, #20
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	40010000 	.word	0x40010000
 800103c:	40023800 	.word	0x40023800

08001040 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a15      	ldr	r2, [pc, #84]	@ (80010a4 <HAL_TIM_PWM_MspInit+0x64>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d10e      	bne.n	8001070 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	4b14      	ldr	r3, [pc, #80]	@ (80010a8 <HAL_TIM_PWM_MspInit+0x68>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105a:	4a13      	ldr	r2, [pc, #76]	@ (80010a8 <HAL_TIM_PWM_MspInit+0x68>)
 800105c:	f043 0304 	orr.w	r3, r3, #4
 8001060:	6413      	str	r3, [r2, #64]	@ 0x40
 8001062:	4b11      	ldr	r3, [pc, #68]	@ (80010a8 <HAL_TIM_PWM_MspInit+0x68>)
 8001064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001066:	f003 0304 	and.w	r3, r3, #4
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800106e:	e012      	b.n	8001096 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM5)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a0d      	ldr	r2, [pc, #52]	@ (80010ac <HAL_TIM_PWM_MspInit+0x6c>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d10d      	bne.n	8001096 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	4b0a      	ldr	r3, [pc, #40]	@ (80010a8 <HAL_TIM_PWM_MspInit+0x68>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001082:	4a09      	ldr	r2, [pc, #36]	@ (80010a8 <HAL_TIM_PWM_MspInit+0x68>)
 8001084:	f043 0308 	orr.w	r3, r3, #8
 8001088:	6413      	str	r3, [r2, #64]	@ 0x40
 800108a:	4b07      	ldr	r3, [pc, #28]	@ (80010a8 <HAL_TIM_PWM_MspInit+0x68>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108e:	f003 0308 	and.w	r3, r3, #8
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
}
 8001096:	bf00      	nop
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	40000800 	.word	0x40000800
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40000c00 	.word	0x40000c00

080010b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	@ 0x28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a24      	ldr	r2, [pc, #144]	@ (8001160 <HAL_TIM_MspPostInit+0xb0>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d11f      	bne.n	8001112 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	4b23      	ldr	r3, [pc, #140]	@ (8001164 <HAL_TIM_MspPostInit+0xb4>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010da:	4a22      	ldr	r2, [pc, #136]	@ (8001164 <HAL_TIM_MspPostInit+0xb4>)
 80010dc:	f043 0302 	orr.w	r3, r3, #2
 80010e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e2:	4b20      	ldr	r3, [pc, #128]	@ (8001164 <HAL_TIM_MspPostInit+0xb4>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80010ee:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80010f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f4:	2302      	movs	r3, #2
 80010f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fc:	2300      	movs	r3, #0
 80010fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001100:	2302      	movs	r3, #2
 8001102:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	4619      	mov	r1, r3
 800110a:	4817      	ldr	r0, [pc, #92]	@ (8001168 <HAL_TIM_MspPostInit+0xb8>)
 800110c:	f000 fca6 	bl	8001a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001110:	e022      	b.n	8001158 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM5)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a15      	ldr	r2, [pc, #84]	@ (800116c <HAL_TIM_MspPostInit+0xbc>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d11d      	bne.n	8001158 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111c:	2300      	movs	r3, #0
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	4b10      	ldr	r3, [pc, #64]	@ (8001164 <HAL_TIM_MspPostInit+0xb4>)
 8001122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001124:	4a0f      	ldr	r2, [pc, #60]	@ (8001164 <HAL_TIM_MspPostInit+0xb4>)
 8001126:	f043 0301 	orr.w	r3, r3, #1
 800112a:	6313      	str	r3, [r2, #48]	@ 0x30
 800112c:	4b0d      	ldr	r3, [pc, #52]	@ (8001164 <HAL_TIM_MspPostInit+0xb4>)
 800112e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001138:	2302      	movs	r3, #2
 800113a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	2302      	movs	r3, #2
 800113e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2300      	movs	r3, #0
 8001146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001148:	2302      	movs	r3, #2
 800114a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	4619      	mov	r1, r3
 8001152:	4807      	ldr	r0, [pc, #28]	@ (8001170 <HAL_TIM_MspPostInit+0xc0>)
 8001154:	f000 fc82 	bl	8001a5c <HAL_GPIO_Init>
}
 8001158:	bf00      	nop
 800115a:	3728      	adds	r7, #40	@ 0x28
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40000800 	.word	0x40000800
 8001164:	40023800 	.word	0x40023800
 8001168:	40020400 	.word	0x40020400
 800116c:	40000c00 	.word	0x40000c00
 8001170:	40020000 	.word	0x40020000

08001174 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08e      	sub	sp, #56	@ 0x38
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800117c:	2300      	movs	r3, #0
 800117e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001180:	2300      	movs	r3, #0
 8001182:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001184:	2300      	movs	r3, #0
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	4b33      	ldr	r3, [pc, #204]	@ (8001258 <HAL_InitTick+0xe4>)
 800118a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118c:	4a32      	ldr	r2, [pc, #200]	@ (8001258 <HAL_InitTick+0xe4>)
 800118e:	f043 0302 	orr.w	r3, r3, #2
 8001192:	6413      	str	r3, [r2, #64]	@ 0x40
 8001194:	4b30      	ldr	r3, [pc, #192]	@ (8001258 <HAL_InitTick+0xe4>)
 8001196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001198:	f003 0302 	and.w	r3, r3, #2
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011a0:	f107 0210 	add.w	r2, r7, #16
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	4611      	mov	r1, r2
 80011aa:	4618      	mov	r0, r3
 80011ac:	f001 fa50 	bl	8002650 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80011b0:	6a3b      	ldr	r3, [r7, #32]
 80011b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80011b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d103      	bne.n	80011c2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011ba:	f001 fa35 	bl	8002628 <HAL_RCC_GetPCLK1Freq>
 80011be:	6378      	str	r0, [r7, #52]	@ 0x34
 80011c0:	e004      	b.n	80011cc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80011c2:	f001 fa31 	bl	8002628 <HAL_RCC_GetPCLK1Freq>
 80011c6:	4603      	mov	r3, r0
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011ce:	4a23      	ldr	r2, [pc, #140]	@ (800125c <HAL_InitTick+0xe8>)
 80011d0:	fba2 2303 	umull	r2, r3, r2, r3
 80011d4:	0c9b      	lsrs	r3, r3, #18
 80011d6:	3b01      	subs	r3, #1
 80011d8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80011da:	4b21      	ldr	r3, [pc, #132]	@ (8001260 <HAL_InitTick+0xec>)
 80011dc:	4a21      	ldr	r2, [pc, #132]	@ (8001264 <HAL_InitTick+0xf0>)
 80011de:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80011e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001260 <HAL_InitTick+0xec>)
 80011e2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011e6:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80011e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001260 <HAL_InitTick+0xec>)
 80011ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011ec:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80011ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001260 <HAL_InitTick+0xec>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001260 <HAL_InitTick+0xec>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011fa:	4b19      	ldr	r3, [pc, #100]	@ (8001260 <HAL_InitTick+0xec>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8001200:	4817      	ldr	r0, [pc, #92]	@ (8001260 <HAL_InitTick+0xec>)
 8001202:	f001 fa57 	bl	80026b4 <HAL_TIM_Base_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800120c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001210:	2b00      	cmp	r3, #0
 8001212:	d11b      	bne.n	800124c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8001214:	4812      	ldr	r0, [pc, #72]	@ (8001260 <HAL_InitTick+0xec>)
 8001216:	f001 faf7 	bl	8002808 <HAL_TIM_Base_Start_IT>
 800121a:	4603      	mov	r3, r0
 800121c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001220:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001224:	2b00      	cmp	r3, #0
 8001226:	d111      	bne.n	800124c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001228:	201d      	movs	r0, #29
 800122a:	f000 fc09 	bl	8001a40 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b0f      	cmp	r3, #15
 8001232:	d808      	bhi.n	8001246 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8001234:	2200      	movs	r2, #0
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	201d      	movs	r0, #29
 800123a:	f000 fbe5 	bl	8001a08 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800123e:	4a0a      	ldr	r2, [pc, #40]	@ (8001268 <HAL_InitTick+0xf4>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	e002      	b.n	800124c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800124c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001250:	4618      	mov	r0, r3
 8001252:	3738      	adds	r7, #56	@ 0x38
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40023800 	.word	0x40023800
 800125c:	431bde83 	.word	0x431bde83
 8001260:	200004b0 	.word	0x200004b0
 8001264:	40000400 	.word	0x40000400
 8001268:	20000004 	.word	0x20000004

0800126c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <NMI_Handler+0x4>

08001274 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001278:	bf00      	nop
 800127a:	e7fd      	b.n	8001278 <HardFault_Handler+0x4>

0800127c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001280:	bf00      	nop
 8001282:	e7fd      	b.n	8001280 <MemManage_Handler+0x4>

08001284 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001288:	bf00      	nop
 800128a:	e7fd      	b.n	8001288 <BusFault_Handler+0x4>

0800128c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001290:	bf00      	nop
 8001292:	e7fd      	b.n	8001290 <UsageFault_Handler+0x4>

08001294 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
	...

080012a4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80012a8:	4802      	ldr	r0, [pc, #8]	@ (80012b4 <TIM3_IRQHandler+0x10>)
 80012aa:	f001 fb5e 	bl	800296a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	200004b0 	.word	0x200004b0

080012b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012bc:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <SystemInit+0x20>)
 80012be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012c2:	4a05      	ldr	r2, [pc, #20]	@ (80012d8 <SystemInit+0x20>)
 80012c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80012dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001314 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012e0:	f7ff ffea 	bl	80012b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012e4:	480c      	ldr	r0, [pc, #48]	@ (8001318 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012e6:	490d      	ldr	r1, [pc, #52]	@ (800131c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001320 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012ec:	e002      	b.n	80012f4 <LoopCopyDataInit>

080012ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012f2:	3304      	adds	r3, #4

080012f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012f8:	d3f9      	bcc.n	80012ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001324 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001328 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001300:	e001      	b.n	8001306 <LoopFillZerobss>

08001302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001304:	3204      	adds	r2, #4

08001306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001308:	d3fb      	bcc.n	8001302 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800130a:	f003 fbf1 	bl	8004af0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800130e:	f7ff f8f9 	bl	8000504 <main>
  bx  lr    
 8001312:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001314:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800131c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001320:	08004cfc 	.word	0x08004cfc
  ldr r2, =_sbss
 8001324:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001328:	20004390 	.word	0x20004390

0800132c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800132c:	e7fe      	b.n	800132c <ADC_IRQHandler>
	...

08001330 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001334:	4b0e      	ldr	r3, [pc, #56]	@ (8001370 <HAL_Init+0x40>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a0d      	ldr	r2, [pc, #52]	@ (8001370 <HAL_Init+0x40>)
 800133a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800133e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001340:	4b0b      	ldr	r3, [pc, #44]	@ (8001370 <HAL_Init+0x40>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a0a      	ldr	r2, [pc, #40]	@ (8001370 <HAL_Init+0x40>)
 8001346:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800134a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800134c:	4b08      	ldr	r3, [pc, #32]	@ (8001370 <HAL_Init+0x40>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a07      	ldr	r2, [pc, #28]	@ (8001370 <HAL_Init+0x40>)
 8001352:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001356:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001358:	2003      	movs	r0, #3
 800135a:	f000 fb4a 	bl	80019f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800135e:	200f      	movs	r0, #15
 8001360:	f7ff ff08 	bl	8001174 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001364:	f7ff fdc6 	bl	8000ef4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40023c00 	.word	0x40023c00

08001374 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001378:	4b06      	ldr	r3, [pc, #24]	@ (8001394 <HAL_IncTick+0x20>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	461a      	mov	r2, r3
 800137e:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <HAL_IncTick+0x24>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4413      	add	r3, r2
 8001384:	4a04      	ldr	r2, [pc, #16]	@ (8001398 <HAL_IncTick+0x24>)
 8001386:	6013      	str	r3, [r2, #0]
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	20000008 	.word	0x20000008
 8001398:	200004f8 	.word	0x200004f8

0800139c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return uwTick;
 80013a0:	4b03      	ldr	r3, [pc, #12]	@ (80013b0 <HAL_GetTick+0x14>)
 80013a2:	681b      	ldr	r3, [r3, #0]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	200004f8 	.word	0x200004f8

080013b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013bc:	2300      	movs	r3, #0
 80013be:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d101      	bne.n	80013ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e033      	b.n	8001432 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d109      	bne.n	80013e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff fdba 	bl	8000f4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ea:	f003 0310 	and.w	r3, r3, #16
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d118      	bne.n	8001424 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80013fa:	f023 0302 	bic.w	r3, r3, #2
 80013fe:	f043 0202 	orr.w	r2, r3, #2
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f000 f94a 	bl	80016a0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001416:	f023 0303 	bic.w	r3, r3, #3
 800141a:	f043 0201 	orr.w	r2, r3, #1
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	641a      	str	r2, [r3, #64]	@ 0x40
 8001422:	e001      	b.n	8001428 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001430:	7bfb      	ldrb	r3, [r7, #15]
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001446:	2300      	movs	r3, #0
 8001448:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001450:	2b01      	cmp	r3, #1
 8001452:	d101      	bne.n	8001458 <HAL_ADC_ConfigChannel+0x1c>
 8001454:	2302      	movs	r3, #2
 8001456:	e113      	b.n	8001680 <HAL_ADC_ConfigChannel+0x244>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2201      	movs	r2, #1
 800145c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b09      	cmp	r3, #9
 8001466:	d925      	bls.n	80014b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	68d9      	ldr	r1, [r3, #12]
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	b29b      	uxth	r3, r3
 8001474:	461a      	mov	r2, r3
 8001476:	4613      	mov	r3, r2
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	4413      	add	r3, r2
 800147c:	3b1e      	subs	r3, #30
 800147e:	2207      	movs	r2, #7
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43da      	mvns	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	400a      	ands	r2, r1
 800148c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	68d9      	ldr	r1, [r3, #12]
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	689a      	ldr	r2, [r3, #8]
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	b29b      	uxth	r3, r3
 800149e:	4618      	mov	r0, r3
 80014a0:	4603      	mov	r3, r0
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	4403      	add	r3, r0
 80014a6:	3b1e      	subs	r3, #30
 80014a8:	409a      	lsls	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	430a      	orrs	r2, r1
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	e022      	b.n	80014fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	6919      	ldr	r1, [r3, #16]
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	b29b      	uxth	r3, r3
 80014c0:	461a      	mov	r2, r3
 80014c2:	4613      	mov	r3, r2
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	4413      	add	r3, r2
 80014c8:	2207      	movs	r2, #7
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43da      	mvns	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	400a      	ands	r2, r1
 80014d6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6919      	ldr	r1, [r3, #16]
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	689a      	ldr	r2, [r3, #8]
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	4618      	mov	r0, r3
 80014ea:	4603      	mov	r3, r0
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	4403      	add	r3, r0
 80014f0:	409a      	lsls	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	430a      	orrs	r2, r1
 80014f8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	2b06      	cmp	r3, #6
 8001500:	d824      	bhi.n	800154c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	4613      	mov	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	4413      	add	r3, r2
 8001512:	3b05      	subs	r3, #5
 8001514:	221f      	movs	r2, #31
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43da      	mvns	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	400a      	ands	r2, r1
 8001522:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	b29b      	uxth	r3, r3
 8001530:	4618      	mov	r0, r3
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685a      	ldr	r2, [r3, #4]
 8001536:	4613      	mov	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	4413      	add	r3, r2
 800153c:	3b05      	subs	r3, #5
 800153e:	fa00 f203 	lsl.w	r2, r0, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	430a      	orrs	r2, r1
 8001548:	635a      	str	r2, [r3, #52]	@ 0x34
 800154a:	e04c      	b.n	80015e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	2b0c      	cmp	r3, #12
 8001552:	d824      	bhi.n	800159e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685a      	ldr	r2, [r3, #4]
 800155e:	4613      	mov	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4413      	add	r3, r2
 8001564:	3b23      	subs	r3, #35	@ 0x23
 8001566:	221f      	movs	r2, #31
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43da      	mvns	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	400a      	ands	r2, r1
 8001574:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	b29b      	uxth	r3, r3
 8001582:	4618      	mov	r0, r3
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685a      	ldr	r2, [r3, #4]
 8001588:	4613      	mov	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	3b23      	subs	r3, #35	@ 0x23
 8001590:	fa00 f203 	lsl.w	r2, r0, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	430a      	orrs	r2, r1
 800159a:	631a      	str	r2, [r3, #48]	@ 0x30
 800159c:	e023      	b.n	80015e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	4613      	mov	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4413      	add	r3, r2
 80015ae:	3b41      	subs	r3, #65	@ 0x41
 80015b0:	221f      	movs	r2, #31
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43da      	mvns	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	400a      	ands	r2, r1
 80015be:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	4618      	mov	r0, r3
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685a      	ldr	r2, [r3, #4]
 80015d2:	4613      	mov	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4413      	add	r3, r2
 80015d8:	3b41      	subs	r3, #65	@ 0x41
 80015da:	fa00 f203 	lsl.w	r2, r0, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	430a      	orrs	r2, r1
 80015e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015e6:	4b29      	ldr	r3, [pc, #164]	@ (800168c <HAL_ADC_ConfigChannel+0x250>)
 80015e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a28      	ldr	r2, [pc, #160]	@ (8001690 <HAL_ADC_ConfigChannel+0x254>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d10f      	bne.n	8001614 <HAL_ADC_ConfigChannel+0x1d8>
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b12      	cmp	r3, #18
 80015fa:	d10b      	bne.n	8001614 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a1d      	ldr	r2, [pc, #116]	@ (8001690 <HAL_ADC_ConfigChannel+0x254>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d12b      	bne.n	8001676 <HAL_ADC_ConfigChannel+0x23a>
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a1c      	ldr	r2, [pc, #112]	@ (8001694 <HAL_ADC_ConfigChannel+0x258>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d003      	beq.n	8001630 <HAL_ADC_ConfigChannel+0x1f4>
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b11      	cmp	r3, #17
 800162e:	d122      	bne.n	8001676 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a11      	ldr	r2, [pc, #68]	@ (8001694 <HAL_ADC_ConfigChannel+0x258>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d111      	bne.n	8001676 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001652:	4b11      	ldr	r3, [pc, #68]	@ (8001698 <HAL_ADC_ConfigChannel+0x25c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a11      	ldr	r2, [pc, #68]	@ (800169c <HAL_ADC_ConfigChannel+0x260>)
 8001658:	fba2 2303 	umull	r2, r3, r2, r3
 800165c:	0c9a      	lsrs	r2, r3, #18
 800165e:	4613      	mov	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001668:	e002      	b.n	8001670 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	3b01      	subs	r3, #1
 800166e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1f9      	bne.n	800166a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	40012300 	.word	0x40012300
 8001690:	40012000 	.word	0x40012000
 8001694:	10000012 	.word	0x10000012
 8001698:	20000000 	.word	0x20000000
 800169c:	431bde83 	.word	0x431bde83

080016a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016a8:	4b79      	ldr	r3, [pc, #484]	@ (8001890 <ADC_Init+0x1f0>)
 80016aa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	431a      	orrs	r2, r3
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	685a      	ldr	r2, [r3, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80016d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	6859      	ldr	r1, [r3, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	021a      	lsls	r2, r3, #8
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	430a      	orrs	r2, r1
 80016e8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80016f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6859      	ldr	r1, [r3, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	430a      	orrs	r2, r1
 800170a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	689a      	ldr	r2, [r3, #8]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800171a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6899      	ldr	r1, [r3, #8]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68da      	ldr	r2, [r3, #12]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	430a      	orrs	r2, r1
 800172c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001732:	4a58      	ldr	r2, [pc, #352]	@ (8001894 <ADC_Init+0x1f4>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d022      	beq.n	800177e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	689a      	ldr	r2, [r3, #8]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001746:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6899      	ldr	r1, [r3, #8]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	430a      	orrs	r2, r1
 8001758:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001768:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6899      	ldr	r1, [r3, #8]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	430a      	orrs	r2, r1
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	e00f      	b.n	800179e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800178c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800179c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 0202 	bic.w	r2, r2, #2
 80017ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6899      	ldr	r1, [r3, #8]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	7e1b      	ldrb	r3, [r3, #24]
 80017b8:	005a      	lsls	r2, r3, #1
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	430a      	orrs	r2, r1
 80017c0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d01b      	beq.n	8001804 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80017da:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80017ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6859      	ldr	r1, [r3, #4]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f6:	3b01      	subs	r3, #1
 80017f8:	035a      	lsls	r2, r3, #13
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	430a      	orrs	r2, r1
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	e007      	b.n	8001814 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	685a      	ldr	r2, [r3, #4]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001812:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001822:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	3b01      	subs	r3, #1
 8001830:	051a      	lsls	r2, r3, #20
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	430a      	orrs	r2, r1
 8001838:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001848:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	6899      	ldr	r1, [r3, #8]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001856:	025a      	lsls	r2, r3, #9
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	430a      	orrs	r2, r1
 800185e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	689a      	ldr	r2, [r3, #8]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800186e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6899      	ldr	r1, [r3, #8]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	029a      	lsls	r2, r3, #10
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	430a      	orrs	r2, r1
 8001882:	609a      	str	r2, [r3, #8]
}
 8001884:	bf00      	nop
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	40012300 	.word	0x40012300
 8001894:	0f000001 	.word	0x0f000001

08001898 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018a8:	4b0c      	ldr	r3, [pc, #48]	@ (80018dc <__NVIC_SetPriorityGrouping+0x44>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ae:	68ba      	ldr	r2, [r7, #8]
 80018b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018b4:	4013      	ands	r3, r2
 80018b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ca:	4a04      	ldr	r2, [pc, #16]	@ (80018dc <__NVIC_SetPriorityGrouping+0x44>)
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	60d3      	str	r3, [r2, #12]
}
 80018d0:	bf00      	nop
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018e4:	4b04      	ldr	r3, [pc, #16]	@ (80018f8 <__NVIC_GetPriorityGrouping+0x18>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	0a1b      	lsrs	r3, r3, #8
 80018ea:	f003 0307 	and.w	r3, r3, #7
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190a:	2b00      	cmp	r3, #0
 800190c:	db0b      	blt.n	8001926 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	f003 021f 	and.w	r2, r3, #31
 8001914:	4907      	ldr	r1, [pc, #28]	@ (8001934 <__NVIC_EnableIRQ+0x38>)
 8001916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191a:	095b      	lsrs	r3, r3, #5
 800191c:	2001      	movs	r0, #1
 800191e:	fa00 f202 	lsl.w	r2, r0, r2
 8001922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	e000e100 	.word	0xe000e100

08001938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	6039      	str	r1, [r7, #0]
 8001942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001948:	2b00      	cmp	r3, #0
 800194a:	db0a      	blt.n	8001962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	b2da      	uxtb	r2, r3
 8001950:	490c      	ldr	r1, [pc, #48]	@ (8001984 <__NVIC_SetPriority+0x4c>)
 8001952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001956:	0112      	lsls	r2, r2, #4
 8001958:	b2d2      	uxtb	r2, r2
 800195a:	440b      	add	r3, r1
 800195c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001960:	e00a      	b.n	8001978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	b2da      	uxtb	r2, r3
 8001966:	4908      	ldr	r1, [pc, #32]	@ (8001988 <__NVIC_SetPriority+0x50>)
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	f003 030f 	and.w	r3, r3, #15
 800196e:	3b04      	subs	r3, #4
 8001970:	0112      	lsls	r2, r2, #4
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	440b      	add	r3, r1
 8001976:	761a      	strb	r2, [r3, #24]
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	e000e100 	.word	0xe000e100
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800198c:	b480      	push	{r7}
 800198e:	b089      	sub	sp, #36	@ 0x24
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	f1c3 0307 	rsb	r3, r3, #7
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	bf28      	it	cs
 80019aa:	2304      	movcs	r3, #4
 80019ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	3304      	adds	r3, #4
 80019b2:	2b06      	cmp	r3, #6
 80019b4:	d902      	bls.n	80019bc <NVIC_EncodePriority+0x30>
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	3b03      	subs	r3, #3
 80019ba:	e000      	b.n	80019be <NVIC_EncodePriority+0x32>
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	43da      	mvns	r2, r3
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	401a      	ands	r2, r3
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019d4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	fa01 f303 	lsl.w	r3, r1, r3
 80019de:	43d9      	mvns	r1, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e4:	4313      	orrs	r3, r2
         );
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3724      	adds	r7, #36	@ 0x24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b082      	sub	sp, #8
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff ff4c 	bl	8001898 <__NVIC_SetPriorityGrouping>
}
 8001a00:	bf00      	nop
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
 8001a14:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a16:	2300      	movs	r3, #0
 8001a18:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a1a:	f7ff ff61 	bl	80018e0 <__NVIC_GetPriorityGrouping>
 8001a1e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	68b9      	ldr	r1, [r7, #8]
 8001a24:	6978      	ldr	r0, [r7, #20]
 8001a26:	f7ff ffb1 	bl	800198c <NVIC_EncodePriority>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a30:	4611      	mov	r1, r2
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff ff80 	bl	8001938 <__NVIC_SetPriority>
}
 8001a38:	bf00      	nop
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff ff54 	bl	80018fc <__NVIC_EnableIRQ>
}
 8001a54:	bf00      	nop
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b089      	sub	sp, #36	@ 0x24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a72:	2300      	movs	r3, #0
 8001a74:	61fb      	str	r3, [r7, #28]
 8001a76:	e159      	b.n	8001d2c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a78:	2201      	movs	r2, #1
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	697a      	ldr	r2, [r7, #20]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	f040 8148 	bne.w	8001d26 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f003 0303 	and.w	r3, r3, #3
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d005      	beq.n	8001aae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d130      	bne.n	8001b10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	2203      	movs	r2, #3
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	68da      	ldr	r2, [r3, #12]
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	091b      	lsrs	r3, r3, #4
 8001afa:	f003 0201 	and.w	r2, r3, #1
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 0303 	and.w	r3, r3, #3
 8001b18:	2b03      	cmp	r3, #3
 8001b1a:	d017      	beq.n	8001b4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	2203      	movs	r2, #3
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 0303 	and.w	r3, r3, #3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d123      	bne.n	8001ba0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	08da      	lsrs	r2, r3, #3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3208      	adds	r2, #8
 8001b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	220f      	movs	r2, #15
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	691a      	ldr	r2, [r3, #16]
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	08da      	lsrs	r2, r3, #3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	3208      	adds	r2, #8
 8001b9a:	69b9      	ldr	r1, [r7, #24]
 8001b9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	2203      	movs	r2, #3
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 0203 	and.w	r2, r3, #3
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 80a2 	beq.w	8001d26 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	4b57      	ldr	r3, [pc, #348]	@ (8001d44 <HAL_GPIO_Init+0x2e8>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bea:	4a56      	ldr	r2, [pc, #344]	@ (8001d44 <HAL_GPIO_Init+0x2e8>)
 8001bec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bf0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bf2:	4b54      	ldr	r3, [pc, #336]	@ (8001d44 <HAL_GPIO_Init+0x2e8>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bfe:	4a52      	ldr	r2, [pc, #328]	@ (8001d48 <HAL_GPIO_Init+0x2ec>)
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	089b      	lsrs	r3, r3, #2
 8001c04:	3302      	adds	r3, #2
 8001c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f003 0303 	and.w	r3, r3, #3
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	220f      	movs	r2, #15
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a49      	ldr	r2, [pc, #292]	@ (8001d4c <HAL_GPIO_Init+0x2f0>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d019      	beq.n	8001c5e <HAL_GPIO_Init+0x202>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a48      	ldr	r2, [pc, #288]	@ (8001d50 <HAL_GPIO_Init+0x2f4>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d013      	beq.n	8001c5a <HAL_GPIO_Init+0x1fe>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a47      	ldr	r2, [pc, #284]	@ (8001d54 <HAL_GPIO_Init+0x2f8>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d00d      	beq.n	8001c56 <HAL_GPIO_Init+0x1fa>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a46      	ldr	r2, [pc, #280]	@ (8001d58 <HAL_GPIO_Init+0x2fc>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d007      	beq.n	8001c52 <HAL_GPIO_Init+0x1f6>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a45      	ldr	r2, [pc, #276]	@ (8001d5c <HAL_GPIO_Init+0x300>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d101      	bne.n	8001c4e <HAL_GPIO_Init+0x1f2>
 8001c4a:	2304      	movs	r3, #4
 8001c4c:	e008      	b.n	8001c60 <HAL_GPIO_Init+0x204>
 8001c4e:	2307      	movs	r3, #7
 8001c50:	e006      	b.n	8001c60 <HAL_GPIO_Init+0x204>
 8001c52:	2303      	movs	r3, #3
 8001c54:	e004      	b.n	8001c60 <HAL_GPIO_Init+0x204>
 8001c56:	2302      	movs	r3, #2
 8001c58:	e002      	b.n	8001c60 <HAL_GPIO_Init+0x204>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <HAL_GPIO_Init+0x204>
 8001c5e:	2300      	movs	r3, #0
 8001c60:	69fa      	ldr	r2, [r7, #28]
 8001c62:	f002 0203 	and.w	r2, r2, #3
 8001c66:	0092      	lsls	r2, r2, #2
 8001c68:	4093      	lsls	r3, r2
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c70:	4935      	ldr	r1, [pc, #212]	@ (8001d48 <HAL_GPIO_Init+0x2ec>)
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	089b      	lsrs	r3, r3, #2
 8001c76:	3302      	adds	r3, #2
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c7e:	4b38      	ldr	r3, [pc, #224]	@ (8001d60 <HAL_GPIO_Init+0x304>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	43db      	mvns	r3, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ca2:	4a2f      	ldr	r2, [pc, #188]	@ (8001d60 <HAL_GPIO_Init+0x304>)
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ca8:	4b2d      	ldr	r3, [pc, #180]	@ (8001d60 <HAL_GPIO_Init+0x304>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ccc:	4a24      	ldr	r2, [pc, #144]	@ (8001d60 <HAL_GPIO_Init+0x304>)
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cd2:	4b23      	ldr	r3, [pc, #140]	@ (8001d60 <HAL_GPIO_Init+0x304>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cf6:	4a1a      	ldr	r2, [pc, #104]	@ (8001d60 <HAL_GPIO_Init+0x304>)
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cfc:	4b18      	ldr	r3, [pc, #96]	@ (8001d60 <HAL_GPIO_Init+0x304>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d20:	4a0f      	ldr	r2, [pc, #60]	@ (8001d60 <HAL_GPIO_Init+0x304>)
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	61fb      	str	r3, [r7, #28]
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	2b0f      	cmp	r3, #15
 8001d30:	f67f aea2 	bls.w	8001a78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d34:	bf00      	nop
 8001d36:	bf00      	nop
 8001d38:	3724      	adds	r7, #36	@ 0x24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	40023800 	.word	0x40023800
 8001d48:	40013800 	.word	0x40013800
 8001d4c:	40020000 	.word	0x40020000
 8001d50:	40020400 	.word	0x40020400
 8001d54:	40020800 	.word	0x40020800
 8001d58:	40020c00 	.word	0x40020c00
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	40013c00 	.word	0x40013c00

08001d64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	691a      	ldr	r2, [r3, #16]
 8001d74:	887b      	ldrh	r3, [r7, #2]
 8001d76:	4013      	ands	r3, r2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d002      	beq.n	8001d82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	73fb      	strb	r3, [r7, #15]
 8001d80:	e001      	b.n	8001d86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d82:	2300      	movs	r3, #0
 8001d84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	807b      	strh	r3, [r7, #2]
 8001da0:	4613      	mov	r3, r2
 8001da2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001da4:	787b      	ldrb	r3, [r7, #1]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001daa:	887a      	ldrh	r2, [r7, #2]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001db0:	e003      	b.n	8001dba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001db2:	887b      	ldrh	r3, [r7, #2]
 8001db4:	041a      	lsls	r2, r3, #16
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	619a      	str	r2, [r3, #24]
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
	...

08001dc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e267      	b.n	80022aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d075      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001de6:	4b88      	ldr	r3, [pc, #544]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 030c 	and.w	r3, r3, #12
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	d00c      	beq.n	8001e0c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001df2:	4b85      	ldr	r3, [pc, #532]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001dfa:	2b08      	cmp	r3, #8
 8001dfc:	d112      	bne.n	8001e24 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dfe:	4b82      	ldr	r3, [pc, #520]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e0a:	d10b      	bne.n	8001e24 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e0c:	4b7e      	ldr	r3, [pc, #504]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d05b      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x108>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d157      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e242      	b.n	80022aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e2c:	d106      	bne.n	8001e3c <HAL_RCC_OscConfig+0x74>
 8001e2e:	4b76      	ldr	r3, [pc, #472]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a75      	ldr	r2, [pc, #468]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001e34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e38:	6013      	str	r3, [r2, #0]
 8001e3a:	e01d      	b.n	8001e78 <HAL_RCC_OscConfig+0xb0>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e44:	d10c      	bne.n	8001e60 <HAL_RCC_OscConfig+0x98>
 8001e46:	4b70      	ldr	r3, [pc, #448]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a6f      	ldr	r2, [pc, #444]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001e4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e50:	6013      	str	r3, [r2, #0]
 8001e52:	4b6d      	ldr	r3, [pc, #436]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a6c      	ldr	r2, [pc, #432]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001e58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e5c:	6013      	str	r3, [r2, #0]
 8001e5e:	e00b      	b.n	8001e78 <HAL_RCC_OscConfig+0xb0>
 8001e60:	4b69      	ldr	r3, [pc, #420]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a68      	ldr	r2, [pc, #416]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001e66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e6a:	6013      	str	r3, [r2, #0]
 8001e6c:	4b66      	ldr	r3, [pc, #408]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a65      	ldr	r2, [pc, #404]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001e72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d013      	beq.n	8001ea8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e80:	f7ff fa8c 	bl	800139c <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e88:	f7ff fa88 	bl	800139c <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b64      	cmp	r3, #100	@ 0x64
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e207      	b.n	80022aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9a:	4b5b      	ldr	r3, [pc, #364]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d0f0      	beq.n	8001e88 <HAL_RCC_OscConfig+0xc0>
 8001ea6:	e014      	b.n	8001ed2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea8:	f7ff fa78 	bl	800139c <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eb0:	f7ff fa74 	bl	800139c <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b64      	cmp	r3, #100	@ 0x64
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e1f3      	b.n	80022aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ec2:	4b51      	ldr	r3, [pc, #324]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f0      	bne.n	8001eb0 <HAL_RCC_OscConfig+0xe8>
 8001ece:	e000      	b.n	8001ed2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d063      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001ede:	4b4a      	ldr	r3, [pc, #296]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f003 030c 	and.w	r3, r3, #12
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00b      	beq.n	8001f02 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eea:	4b47      	ldr	r3, [pc, #284]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001ef2:	2b08      	cmp	r3, #8
 8001ef4:	d11c      	bne.n	8001f30 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ef6:	4b44      	ldr	r3, [pc, #272]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d116      	bne.n	8001f30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f02:	4b41      	ldr	r3, [pc, #260]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d005      	beq.n	8001f1a <HAL_RCC_OscConfig+0x152>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d001      	beq.n	8001f1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e1c7      	b.n	80022aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f1a:	4b3b      	ldr	r3, [pc, #236]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	4937      	ldr	r1, [pc, #220]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f2e:	e03a      	b.n	8001fa6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d020      	beq.n	8001f7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f38:	4b34      	ldr	r3, [pc, #208]	@ (800200c <HAL_RCC_OscConfig+0x244>)
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3e:	f7ff fa2d 	bl	800139c <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f46:	f7ff fa29 	bl	800139c <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e1a8      	b.n	80022aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f58:	4b2b      	ldr	r3, [pc, #172]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0f0      	beq.n	8001f46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f64:	4b28      	ldr	r3, [pc, #160]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	4925      	ldr	r1, [pc, #148]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	600b      	str	r3, [r1, #0]
 8001f78:	e015      	b.n	8001fa6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f7a:	4b24      	ldr	r3, [pc, #144]	@ (800200c <HAL_RCC_OscConfig+0x244>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f80:	f7ff fa0c 	bl	800139c <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f88:	f7ff fa08 	bl	800139c <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e187      	b.n	80022aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f9a:	4b1b      	ldr	r3, [pc, #108]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f0      	bne.n	8001f88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0308 	and.w	r3, r3, #8
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d036      	beq.n	8002020 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d016      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fba:	4b15      	ldr	r3, [pc, #84]	@ (8002010 <HAL_RCC_OscConfig+0x248>)
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc0:	f7ff f9ec 	bl	800139c <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fc8:	f7ff f9e8 	bl	800139c <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e167      	b.n	80022aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fda:	4b0b      	ldr	r3, [pc, #44]	@ (8002008 <HAL_RCC_OscConfig+0x240>)
 8001fdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0f0      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x200>
 8001fe6:	e01b      	b.n	8002020 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fe8:	4b09      	ldr	r3, [pc, #36]	@ (8002010 <HAL_RCC_OscConfig+0x248>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fee:	f7ff f9d5 	bl	800139c <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff4:	e00e      	b.n	8002014 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ff6:	f7ff f9d1 	bl	800139c <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d907      	bls.n	8002014 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e150      	b.n	80022aa <HAL_RCC_OscConfig+0x4e2>
 8002008:	40023800 	.word	0x40023800
 800200c:	42470000 	.word	0x42470000
 8002010:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002014:	4b88      	ldr	r3, [pc, #544]	@ (8002238 <HAL_RCC_OscConfig+0x470>)
 8002016:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1ea      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0304 	and.w	r3, r3, #4
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 8097 	beq.w	800215c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800202e:	2300      	movs	r3, #0
 8002030:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002032:	4b81      	ldr	r3, [pc, #516]	@ (8002238 <HAL_RCC_OscConfig+0x470>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002036:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d10f      	bne.n	800205e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	60bb      	str	r3, [r7, #8]
 8002042:	4b7d      	ldr	r3, [pc, #500]	@ (8002238 <HAL_RCC_OscConfig+0x470>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002046:	4a7c      	ldr	r2, [pc, #496]	@ (8002238 <HAL_RCC_OscConfig+0x470>)
 8002048:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800204c:	6413      	str	r3, [r2, #64]	@ 0x40
 800204e:	4b7a      	ldr	r3, [pc, #488]	@ (8002238 <HAL_RCC_OscConfig+0x470>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002052:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002056:	60bb      	str	r3, [r7, #8]
 8002058:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800205a:	2301      	movs	r3, #1
 800205c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800205e:	4b77      	ldr	r3, [pc, #476]	@ (800223c <HAL_RCC_OscConfig+0x474>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002066:	2b00      	cmp	r3, #0
 8002068:	d118      	bne.n	800209c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800206a:	4b74      	ldr	r3, [pc, #464]	@ (800223c <HAL_RCC_OscConfig+0x474>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a73      	ldr	r2, [pc, #460]	@ (800223c <HAL_RCC_OscConfig+0x474>)
 8002070:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002074:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002076:	f7ff f991 	bl	800139c <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800207e:	f7ff f98d 	bl	800139c <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e10c      	b.n	80022aa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002090:	4b6a      	ldr	r3, [pc, #424]	@ (800223c <HAL_RCC_OscConfig+0x474>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0f0      	beq.n	800207e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d106      	bne.n	80020b2 <HAL_RCC_OscConfig+0x2ea>
 80020a4:	4b64      	ldr	r3, [pc, #400]	@ (8002238 <HAL_RCC_OscConfig+0x470>)
 80020a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020a8:	4a63      	ldr	r2, [pc, #396]	@ (8002238 <HAL_RCC_OscConfig+0x470>)
 80020aa:	f043 0301 	orr.w	r3, r3, #1
 80020ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80020b0:	e01c      	b.n	80020ec <HAL_RCC_OscConfig+0x324>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	2b05      	cmp	r3, #5
 80020b8:	d10c      	bne.n	80020d4 <HAL_RCC_OscConfig+0x30c>
 80020ba:	4b5f      	ldr	r3, [pc, #380]	@ (8002238 <HAL_RCC_OscConfig+0x470>)
 80020bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020be:	4a5e      	ldr	r2, [pc, #376]	@ (8002238 <HAL_RCC_OscConfig+0x470>)
 80020c0:	f043 0304 	orr.w	r3, r3, #4
 80020c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80020c6:	4b5c      	ldr	r3, [pc, #368]	@ (8002238 <HAL_RCC_OscConfig+0x470>)
 80020c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ca:	4a5b      	ldr	r2, [pc, #364]	@ (8002238 <HAL_RCC_OscConfig+0x470>)
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80020d2:	e00b      	b.n	80020ec <HAL_RCC_OscConfig+0x324>
 80020d4:	4b58      	ldr	r3, [pc, #352]	@ (8002238 <HAL_RCC_OscConfig+0x470>)
 80020d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020d8:	4a57      	ldr	r2, [pc, #348]	@ (8002238 <HAL_RCC_OscConfig+0x470>)
 80020da:	f023 0301 	bic.w	r3, r3, #1
 80020de:	6713      	str	r3, [r2, #112]	@ 0x70
 80020e0:	4b55      	ldr	r3, [pc, #340]	@ (8002238 <HAL_RCC_OscConfig+0x470>)
 80020e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020e4:	4a54      	ldr	r2, [pc, #336]	@ (8002238 <HAL_RCC_OscConfig+0x470>)
 80020e6:	f023 0304 	bic.w	r3, r3, #4
 80020ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d015      	beq.n	8002120 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f4:	f7ff f952 	bl	800139c <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020fa:	e00a      	b.n	8002112 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020fc:	f7ff f94e 	bl	800139c <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	f241 3288 	movw	r2, #5000	@ 0x1388
 800210a:	4293      	cmp	r3, r2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e0cb      	b.n	80022aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002112:	4b49      	ldr	r3, [pc, #292]	@ (8002238 <HAL_RCC_OscConfig+0x470>)
 8002114:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0ee      	beq.n	80020fc <HAL_RCC_OscConfig+0x334>
 800211e:	e014      	b.n	800214a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002120:	f7ff f93c 	bl	800139c <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002126:	e00a      	b.n	800213e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002128:	f7ff f938 	bl	800139c <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002136:	4293      	cmp	r3, r2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e0b5      	b.n	80022aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800213e:	4b3e      	ldr	r3, [pc, #248]	@ (8002238 <HAL_RCC_OscConfig+0x470>)
 8002140:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1ee      	bne.n	8002128 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800214a:	7dfb      	ldrb	r3, [r7, #23]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d105      	bne.n	800215c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002150:	4b39      	ldr	r3, [pc, #228]	@ (8002238 <HAL_RCC_OscConfig+0x470>)
 8002152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002154:	4a38      	ldr	r2, [pc, #224]	@ (8002238 <HAL_RCC_OscConfig+0x470>)
 8002156:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800215a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	2b00      	cmp	r3, #0
 8002162:	f000 80a1 	beq.w	80022a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002166:	4b34      	ldr	r3, [pc, #208]	@ (8002238 <HAL_RCC_OscConfig+0x470>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 030c 	and.w	r3, r3, #12
 800216e:	2b08      	cmp	r3, #8
 8002170:	d05c      	beq.n	800222c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	2b02      	cmp	r3, #2
 8002178:	d141      	bne.n	80021fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800217a:	4b31      	ldr	r3, [pc, #196]	@ (8002240 <HAL_RCC_OscConfig+0x478>)
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002180:	f7ff f90c 	bl	800139c <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002188:	f7ff f908 	bl	800139c <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e087      	b.n	80022aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800219a:	4b27      	ldr	r3, [pc, #156]	@ (8002238 <HAL_RCC_OscConfig+0x470>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1f0      	bne.n	8002188 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69da      	ldr	r2, [r3, #28]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	431a      	orrs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b4:	019b      	lsls	r3, r3, #6
 80021b6:	431a      	orrs	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021bc:	085b      	lsrs	r3, r3, #1
 80021be:	3b01      	subs	r3, #1
 80021c0:	041b      	lsls	r3, r3, #16
 80021c2:	431a      	orrs	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021c8:	061b      	lsls	r3, r3, #24
 80021ca:	491b      	ldr	r1, [pc, #108]	@ (8002238 <HAL_RCC_OscConfig+0x470>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002240 <HAL_RCC_OscConfig+0x478>)
 80021d2:	2201      	movs	r2, #1
 80021d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d6:	f7ff f8e1 	bl	800139c <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021dc:	e008      	b.n	80021f0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021de:	f7ff f8dd 	bl	800139c <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e05c      	b.n	80022aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021f0:	4b11      	ldr	r3, [pc, #68]	@ (8002238 <HAL_RCC_OscConfig+0x470>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0f0      	beq.n	80021de <HAL_RCC_OscConfig+0x416>
 80021fc:	e054      	b.n	80022a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021fe:	4b10      	ldr	r3, [pc, #64]	@ (8002240 <HAL_RCC_OscConfig+0x478>)
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002204:	f7ff f8ca 	bl	800139c <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800220c:	f7ff f8c6 	bl	800139c <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e045      	b.n	80022aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800221e:	4b06      	ldr	r3, [pc, #24]	@ (8002238 <HAL_RCC_OscConfig+0x470>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f0      	bne.n	800220c <HAL_RCC_OscConfig+0x444>
 800222a:	e03d      	b.n	80022a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d107      	bne.n	8002244 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e038      	b.n	80022aa <HAL_RCC_OscConfig+0x4e2>
 8002238:	40023800 	.word	0x40023800
 800223c:	40007000 	.word	0x40007000
 8002240:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002244:	4b1b      	ldr	r3, [pc, #108]	@ (80022b4 <HAL_RCC_OscConfig+0x4ec>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d028      	beq.n	80022a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800225c:	429a      	cmp	r2, r3
 800225e:	d121      	bne.n	80022a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800226a:	429a      	cmp	r2, r3
 800226c:	d11a      	bne.n	80022a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002274:	4013      	ands	r3, r2
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800227a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800227c:	4293      	cmp	r3, r2
 800227e:	d111      	bne.n	80022a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800228a:	085b      	lsrs	r3, r3, #1
 800228c:	3b01      	subs	r3, #1
 800228e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002290:	429a      	cmp	r2, r3
 8002292:	d107      	bne.n	80022a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800229e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d001      	beq.n	80022a8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e000      	b.n	80022aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3718      	adds	r7, #24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40023800 	.word	0x40023800

080022b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d101      	bne.n	80022cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e0cc      	b.n	8002466 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022cc:	4b68      	ldr	r3, [pc, #416]	@ (8002470 <HAL_RCC_ClockConfig+0x1b8>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0307 	and.w	r3, r3, #7
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d90c      	bls.n	80022f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022da:	4b65      	ldr	r3, [pc, #404]	@ (8002470 <HAL_RCC_ClockConfig+0x1b8>)
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e2:	4b63      	ldr	r3, [pc, #396]	@ (8002470 <HAL_RCC_ClockConfig+0x1b8>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d001      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e0b8      	b.n	8002466 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d020      	beq.n	8002342 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b00      	cmp	r3, #0
 800230a:	d005      	beq.n	8002318 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800230c:	4b59      	ldr	r3, [pc, #356]	@ (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	4a58      	ldr	r2, [pc, #352]	@ (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 8002312:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002316:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0308 	and.w	r3, r3, #8
 8002320:	2b00      	cmp	r3, #0
 8002322:	d005      	beq.n	8002330 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002324:	4b53      	ldr	r3, [pc, #332]	@ (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	4a52      	ldr	r2, [pc, #328]	@ (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 800232a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800232e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002330:	4b50      	ldr	r3, [pc, #320]	@ (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	494d      	ldr	r1, [pc, #308]	@ (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 800233e:	4313      	orrs	r3, r2
 8002340:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d044      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d107      	bne.n	8002366 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002356:	4b47      	ldr	r3, [pc, #284]	@ (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d119      	bne.n	8002396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e07f      	b.n	8002466 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b02      	cmp	r3, #2
 800236c:	d003      	beq.n	8002376 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002372:	2b03      	cmp	r3, #3
 8002374:	d107      	bne.n	8002386 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002376:	4b3f      	ldr	r3, [pc, #252]	@ (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d109      	bne.n	8002396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e06f      	b.n	8002466 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002386:	4b3b      	ldr	r3, [pc, #236]	@ (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e067      	b.n	8002466 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002396:	4b37      	ldr	r3, [pc, #220]	@ (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f023 0203 	bic.w	r2, r3, #3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	4934      	ldr	r1, [pc, #208]	@ (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023a8:	f7fe fff8 	bl	800139c <HAL_GetTick>
 80023ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ae:	e00a      	b.n	80023c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023b0:	f7fe fff4 	bl	800139c <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023be:	4293      	cmp	r3, r2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e04f      	b.n	8002466 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023c6:	4b2b      	ldr	r3, [pc, #172]	@ (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 020c 	and.w	r2, r3, #12
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d1eb      	bne.n	80023b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023d8:	4b25      	ldr	r3, [pc, #148]	@ (8002470 <HAL_RCC_ClockConfig+0x1b8>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d20c      	bcs.n	8002400 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e6:	4b22      	ldr	r3, [pc, #136]	@ (8002470 <HAL_RCC_ClockConfig+0x1b8>)
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ee:	4b20      	ldr	r3, [pc, #128]	@ (8002470 <HAL_RCC_ClockConfig+0x1b8>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d001      	beq.n	8002400 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e032      	b.n	8002466 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0304 	and.w	r3, r3, #4
 8002408:	2b00      	cmp	r3, #0
 800240a:	d008      	beq.n	800241e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800240c:	4b19      	ldr	r3, [pc, #100]	@ (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	4916      	ldr	r1, [pc, #88]	@ (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 800241a:	4313      	orrs	r3, r2
 800241c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0308 	and.w	r3, r3, #8
 8002426:	2b00      	cmp	r3, #0
 8002428:	d009      	beq.n	800243e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800242a:	4b12      	ldr	r3, [pc, #72]	@ (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	490e      	ldr	r1, [pc, #56]	@ (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 800243a:	4313      	orrs	r3, r2
 800243c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800243e:	f000 f821 	bl	8002484 <HAL_RCC_GetSysClockFreq>
 8002442:	4602      	mov	r2, r0
 8002444:	4b0b      	ldr	r3, [pc, #44]	@ (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	091b      	lsrs	r3, r3, #4
 800244a:	f003 030f 	and.w	r3, r3, #15
 800244e:	490a      	ldr	r1, [pc, #40]	@ (8002478 <HAL_RCC_ClockConfig+0x1c0>)
 8002450:	5ccb      	ldrb	r3, [r1, r3]
 8002452:	fa22 f303 	lsr.w	r3, r2, r3
 8002456:	4a09      	ldr	r2, [pc, #36]	@ (800247c <HAL_RCC_ClockConfig+0x1c4>)
 8002458:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800245a:	4b09      	ldr	r3, [pc, #36]	@ (8002480 <HAL_RCC_ClockConfig+0x1c8>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f7fe fe88 	bl	8001174 <HAL_InitTick>

  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40023c00 	.word	0x40023c00
 8002474:	40023800 	.word	0x40023800
 8002478:	08004cd4 	.word	0x08004cd4
 800247c:	20000000 	.word	0x20000000
 8002480:	20000004 	.word	0x20000004

08002484 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002488:	b090      	sub	sp, #64	@ 0x40
 800248a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800248c:	2300      	movs	r3, #0
 800248e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002490:	2300      	movs	r3, #0
 8002492:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002494:	2300      	movs	r3, #0
 8002496:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002498:	2300      	movs	r3, #0
 800249a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800249c:	4b59      	ldr	r3, [pc, #356]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x180>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f003 030c 	and.w	r3, r3, #12
 80024a4:	2b08      	cmp	r3, #8
 80024a6:	d00d      	beq.n	80024c4 <HAL_RCC_GetSysClockFreq+0x40>
 80024a8:	2b08      	cmp	r3, #8
 80024aa:	f200 80a1 	bhi.w	80025f0 <HAL_RCC_GetSysClockFreq+0x16c>
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d002      	beq.n	80024b8 <HAL_RCC_GetSysClockFreq+0x34>
 80024b2:	2b04      	cmp	r3, #4
 80024b4:	d003      	beq.n	80024be <HAL_RCC_GetSysClockFreq+0x3a>
 80024b6:	e09b      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024b8:	4b53      	ldr	r3, [pc, #332]	@ (8002608 <HAL_RCC_GetSysClockFreq+0x184>)
 80024ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80024bc:	e09b      	b.n	80025f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024be:	4b53      	ldr	r3, [pc, #332]	@ (800260c <HAL_RCC_GetSysClockFreq+0x188>)
 80024c0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80024c2:	e098      	b.n	80025f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024c4:	4b4f      	ldr	r3, [pc, #316]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x180>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024cc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024ce:	4b4d      	ldr	r3, [pc, #308]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x180>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d028      	beq.n	800252c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024da:	4b4a      	ldr	r3, [pc, #296]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x180>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	099b      	lsrs	r3, r3, #6
 80024e0:	2200      	movs	r2, #0
 80024e2:	623b      	str	r3, [r7, #32]
 80024e4:	627a      	str	r2, [r7, #36]	@ 0x24
 80024e6:	6a3b      	ldr	r3, [r7, #32]
 80024e8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80024ec:	2100      	movs	r1, #0
 80024ee:	4b47      	ldr	r3, [pc, #284]	@ (800260c <HAL_RCC_GetSysClockFreq+0x188>)
 80024f0:	fb03 f201 	mul.w	r2, r3, r1
 80024f4:	2300      	movs	r3, #0
 80024f6:	fb00 f303 	mul.w	r3, r0, r3
 80024fa:	4413      	add	r3, r2
 80024fc:	4a43      	ldr	r2, [pc, #268]	@ (800260c <HAL_RCC_GetSysClockFreq+0x188>)
 80024fe:	fba0 1202 	umull	r1, r2, r0, r2
 8002502:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002504:	460a      	mov	r2, r1
 8002506:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002508:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800250a:	4413      	add	r3, r2
 800250c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800250e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002510:	2200      	movs	r2, #0
 8002512:	61bb      	str	r3, [r7, #24]
 8002514:	61fa      	str	r2, [r7, #28]
 8002516:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800251a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800251e:	f7fd fe5f 	bl	80001e0 <__aeabi_uldivmod>
 8002522:	4602      	mov	r2, r0
 8002524:	460b      	mov	r3, r1
 8002526:	4613      	mov	r3, r2
 8002528:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800252a:	e053      	b.n	80025d4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800252c:	4b35      	ldr	r3, [pc, #212]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x180>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	099b      	lsrs	r3, r3, #6
 8002532:	2200      	movs	r2, #0
 8002534:	613b      	str	r3, [r7, #16]
 8002536:	617a      	str	r2, [r7, #20]
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800253e:	f04f 0b00 	mov.w	fp, #0
 8002542:	4652      	mov	r2, sl
 8002544:	465b      	mov	r3, fp
 8002546:	f04f 0000 	mov.w	r0, #0
 800254a:	f04f 0100 	mov.w	r1, #0
 800254e:	0159      	lsls	r1, r3, #5
 8002550:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002554:	0150      	lsls	r0, r2, #5
 8002556:	4602      	mov	r2, r0
 8002558:	460b      	mov	r3, r1
 800255a:	ebb2 080a 	subs.w	r8, r2, sl
 800255e:	eb63 090b 	sbc.w	r9, r3, fp
 8002562:	f04f 0200 	mov.w	r2, #0
 8002566:	f04f 0300 	mov.w	r3, #0
 800256a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800256e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002572:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002576:	ebb2 0408 	subs.w	r4, r2, r8
 800257a:	eb63 0509 	sbc.w	r5, r3, r9
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	f04f 0300 	mov.w	r3, #0
 8002586:	00eb      	lsls	r3, r5, #3
 8002588:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800258c:	00e2      	lsls	r2, r4, #3
 800258e:	4614      	mov	r4, r2
 8002590:	461d      	mov	r5, r3
 8002592:	eb14 030a 	adds.w	r3, r4, sl
 8002596:	603b      	str	r3, [r7, #0]
 8002598:	eb45 030b 	adc.w	r3, r5, fp
 800259c:	607b      	str	r3, [r7, #4]
 800259e:	f04f 0200 	mov.w	r2, #0
 80025a2:	f04f 0300 	mov.w	r3, #0
 80025a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025aa:	4629      	mov	r1, r5
 80025ac:	028b      	lsls	r3, r1, #10
 80025ae:	4621      	mov	r1, r4
 80025b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025b4:	4621      	mov	r1, r4
 80025b6:	028a      	lsls	r2, r1, #10
 80025b8:	4610      	mov	r0, r2
 80025ba:	4619      	mov	r1, r3
 80025bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025be:	2200      	movs	r2, #0
 80025c0:	60bb      	str	r3, [r7, #8]
 80025c2:	60fa      	str	r2, [r7, #12]
 80025c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025c8:	f7fd fe0a 	bl	80001e0 <__aeabi_uldivmod>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	4613      	mov	r3, r2
 80025d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80025d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x180>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	0c1b      	lsrs	r3, r3, #16
 80025da:	f003 0303 	and.w	r3, r3, #3
 80025de:	3301      	adds	r3, #1
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80025e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80025e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80025ee:	e002      	b.n	80025f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025f0:	4b05      	ldr	r3, [pc, #20]	@ (8002608 <HAL_RCC_GetSysClockFreq+0x184>)
 80025f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80025f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3740      	adds	r7, #64	@ 0x40
 80025fc:	46bd      	mov	sp, r7
 80025fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002602:	bf00      	nop
 8002604:	40023800 	.word	0x40023800
 8002608:	00f42400 	.word	0x00f42400
 800260c:	017d7840 	.word	0x017d7840

08002610 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002614:	4b03      	ldr	r3, [pc, #12]	@ (8002624 <HAL_RCC_GetHCLKFreq+0x14>)
 8002616:	681b      	ldr	r3, [r3, #0]
}
 8002618:	4618      	mov	r0, r3
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	20000000 	.word	0x20000000

08002628 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800262c:	f7ff fff0 	bl	8002610 <HAL_RCC_GetHCLKFreq>
 8002630:	4602      	mov	r2, r0
 8002632:	4b05      	ldr	r3, [pc, #20]	@ (8002648 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	0a9b      	lsrs	r3, r3, #10
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	4903      	ldr	r1, [pc, #12]	@ (800264c <HAL_RCC_GetPCLK1Freq+0x24>)
 800263e:	5ccb      	ldrb	r3, [r1, r3]
 8002640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002644:	4618      	mov	r0, r3
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40023800 	.word	0x40023800
 800264c:	08004ce4 	.word	0x08004ce4

08002650 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	220f      	movs	r2, #15
 800265e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002660:	4b12      	ldr	r3, [pc, #72]	@ (80026ac <HAL_RCC_GetClockConfig+0x5c>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f003 0203 	and.w	r2, r3, #3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800266c:	4b0f      	ldr	r3, [pc, #60]	@ (80026ac <HAL_RCC_GetClockConfig+0x5c>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002678:	4b0c      	ldr	r3, [pc, #48]	@ (80026ac <HAL_RCC_GetClockConfig+0x5c>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002684:	4b09      	ldr	r3, [pc, #36]	@ (80026ac <HAL_RCC_GetClockConfig+0x5c>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	08db      	lsrs	r3, r3, #3
 800268a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002692:	4b07      	ldr	r3, [pc, #28]	@ (80026b0 <HAL_RCC_GetClockConfig+0x60>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0207 	and.w	r2, r3, #7
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	601a      	str	r2, [r3, #0]
}
 800269e:	bf00      	nop
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	40023800 	.word	0x40023800
 80026b0:	40023c00 	.word	0x40023c00

080026b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e041      	b.n	800274a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d106      	bne.n	80026e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7fe fc7a 	bl	8000fd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2202      	movs	r2, #2
 80026e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3304      	adds	r3, #4
 80026f0:	4619      	mov	r1, r3
 80026f2:	4610      	mov	r0, r2
 80026f4:	f000 fbdc 	bl	8002eb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
	...

08002754 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b01      	cmp	r3, #1
 8002766:	d001      	beq.n	800276c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e03c      	b.n	80027e6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2202      	movs	r2, #2
 8002770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a1e      	ldr	r2, [pc, #120]	@ (80027f4 <HAL_TIM_Base_Start+0xa0>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d018      	beq.n	80027b0 <HAL_TIM_Base_Start+0x5c>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002786:	d013      	beq.n	80027b0 <HAL_TIM_Base_Start+0x5c>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a1a      	ldr	r2, [pc, #104]	@ (80027f8 <HAL_TIM_Base_Start+0xa4>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d00e      	beq.n	80027b0 <HAL_TIM_Base_Start+0x5c>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a19      	ldr	r2, [pc, #100]	@ (80027fc <HAL_TIM_Base_Start+0xa8>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d009      	beq.n	80027b0 <HAL_TIM_Base_Start+0x5c>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a17      	ldr	r2, [pc, #92]	@ (8002800 <HAL_TIM_Base_Start+0xac>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d004      	beq.n	80027b0 <HAL_TIM_Base_Start+0x5c>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a16      	ldr	r2, [pc, #88]	@ (8002804 <HAL_TIM_Base_Start+0xb0>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d111      	bne.n	80027d4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2b06      	cmp	r3, #6
 80027c0:	d010      	beq.n	80027e4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f042 0201 	orr.w	r2, r2, #1
 80027d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027d2:	e007      	b.n	80027e4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 0201 	orr.w	r2, r2, #1
 80027e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	40010000 	.word	0x40010000
 80027f8:	40000400 	.word	0x40000400
 80027fc:	40000800 	.word	0x40000800
 8002800:	40000c00 	.word	0x40000c00
 8002804:	40014000 	.word	0x40014000

08002808 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b01      	cmp	r3, #1
 800281a:	d001      	beq.n	8002820 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e044      	b.n	80028aa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2202      	movs	r2, #2
 8002824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68da      	ldr	r2, [r3, #12]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f042 0201 	orr.w	r2, r2, #1
 8002836:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a1e      	ldr	r2, [pc, #120]	@ (80028b8 <HAL_TIM_Base_Start_IT+0xb0>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d018      	beq.n	8002874 <HAL_TIM_Base_Start_IT+0x6c>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800284a:	d013      	beq.n	8002874 <HAL_TIM_Base_Start_IT+0x6c>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a1a      	ldr	r2, [pc, #104]	@ (80028bc <HAL_TIM_Base_Start_IT+0xb4>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d00e      	beq.n	8002874 <HAL_TIM_Base_Start_IT+0x6c>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a19      	ldr	r2, [pc, #100]	@ (80028c0 <HAL_TIM_Base_Start_IT+0xb8>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d009      	beq.n	8002874 <HAL_TIM_Base_Start_IT+0x6c>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a17      	ldr	r2, [pc, #92]	@ (80028c4 <HAL_TIM_Base_Start_IT+0xbc>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d004      	beq.n	8002874 <HAL_TIM_Base_Start_IT+0x6c>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a16      	ldr	r2, [pc, #88]	@ (80028c8 <HAL_TIM_Base_Start_IT+0xc0>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d111      	bne.n	8002898 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2b06      	cmp	r3, #6
 8002884:	d010      	beq.n	80028a8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f042 0201 	orr.w	r2, r2, #1
 8002894:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002896:	e007      	b.n	80028a8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f042 0201 	orr.w	r2, r2, #1
 80028a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	40010000 	.word	0x40010000
 80028bc:	40000400 	.word	0x40000400
 80028c0:	40000800 	.word	0x40000800
 80028c4:	40000c00 	.word	0x40000c00
 80028c8:	40014000 	.word	0x40014000

080028cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e041      	b.n	8002962 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d106      	bne.n	80028f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f7fe fba4 	bl	8001040 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2202      	movs	r2, #2
 80028fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3304      	adds	r3, #4
 8002908:	4619      	mov	r1, r3
 800290a:	4610      	mov	r0, r2
 800290c:	f000 fad0 	bl	8002eb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b084      	sub	sp, #16
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d020      	beq.n	80029ce <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d01b      	beq.n	80029ce <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f06f 0202 	mvn.w	r2, #2
 800299e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	f003 0303 	and.w	r3, r3, #3
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d003      	beq.n	80029bc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 fa5c 	bl	8002e72 <HAL_TIM_IC_CaptureCallback>
 80029ba:	e005      	b.n	80029c8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f000 fa4e 	bl	8002e5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 fa5f 	bl	8002e86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d020      	beq.n	8002a1a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f003 0304 	and.w	r3, r3, #4
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d01b      	beq.n	8002a1a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f06f 0204 	mvn.w	r2, #4
 80029ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2202      	movs	r2, #2
 80029f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d003      	beq.n	8002a08 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 fa36 	bl	8002e72 <HAL_TIM_IC_CaptureCallback>
 8002a06:	e005      	b.n	8002a14 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 fa28 	bl	8002e5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 fa39 	bl	8002e86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	f003 0308 	and.w	r3, r3, #8
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d020      	beq.n	8002a66 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f003 0308 	and.w	r3, r3, #8
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d01b      	beq.n	8002a66 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f06f 0208 	mvn.w	r2, #8
 8002a36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2204      	movs	r2, #4
 8002a3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	f003 0303 	and.w	r3, r3, #3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d003      	beq.n	8002a54 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 fa10 	bl	8002e72 <HAL_TIM_IC_CaptureCallback>
 8002a52:	e005      	b.n	8002a60 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 fa02 	bl	8002e5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 fa13 	bl	8002e86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	f003 0310 	and.w	r3, r3, #16
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d020      	beq.n	8002ab2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f003 0310 	and.w	r3, r3, #16
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d01b      	beq.n	8002ab2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f06f 0210 	mvn.w	r2, #16
 8002a82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2208      	movs	r2, #8
 8002a88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	69db      	ldr	r3, [r3, #28]
 8002a90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d003      	beq.n	8002aa0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 f9ea 	bl	8002e72 <HAL_TIM_IC_CaptureCallback>
 8002a9e:	e005      	b.n	8002aac <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 f9dc 	bl	8002e5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f9ed 	bl	8002e86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00c      	beq.n	8002ad6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d007      	beq.n	8002ad6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f06f 0201 	mvn.w	r2, #1
 8002ace:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f7fe f9f7 	bl	8000ec4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00c      	beq.n	8002afa <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d007      	beq.n	8002afa <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002af2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 fd05 	bl	8003504 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00c      	beq.n	8002b1e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d007      	beq.n	8002b1e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002b16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 f9be 	bl	8002e9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	f003 0320 	and.w	r3, r3, #32
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00c      	beq.n	8002b42 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f003 0320 	and.w	r3, r3, #32
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d007      	beq.n	8002b42 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f06f 0220 	mvn.w	r2, #32
 8002b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 fcd7 	bl	80034f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b42:	bf00      	nop
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
	...

08002b4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d101      	bne.n	8002b6a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b66:	2302      	movs	r3, #2
 8002b68:	e0ae      	b.n	8002cc8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2b0c      	cmp	r3, #12
 8002b76:	f200 809f 	bhi.w	8002cb8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002b7a:	a201      	add	r2, pc, #4	@ (adr r2, 8002b80 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b80:	08002bb5 	.word	0x08002bb5
 8002b84:	08002cb9 	.word	0x08002cb9
 8002b88:	08002cb9 	.word	0x08002cb9
 8002b8c:	08002cb9 	.word	0x08002cb9
 8002b90:	08002bf5 	.word	0x08002bf5
 8002b94:	08002cb9 	.word	0x08002cb9
 8002b98:	08002cb9 	.word	0x08002cb9
 8002b9c:	08002cb9 	.word	0x08002cb9
 8002ba0:	08002c37 	.word	0x08002c37
 8002ba4:	08002cb9 	.word	0x08002cb9
 8002ba8:	08002cb9 	.word	0x08002cb9
 8002bac:	08002cb9 	.word	0x08002cb9
 8002bb0:	08002c77 	.word	0x08002c77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68b9      	ldr	r1, [r7, #8]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 fa04 	bl	8002fc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	699a      	ldr	r2, [r3, #24]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f042 0208 	orr.w	r2, r2, #8
 8002bce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699a      	ldr	r2, [r3, #24]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 0204 	bic.w	r2, r2, #4
 8002bde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6999      	ldr	r1, [r3, #24]
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	691a      	ldr	r2, [r3, #16]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	619a      	str	r2, [r3, #24]
      break;
 8002bf2:	e064      	b.n	8002cbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68b9      	ldr	r1, [r7, #8]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 fa4a 	bl	8003094 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	699a      	ldr	r2, [r3, #24]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	699a      	ldr	r2, [r3, #24]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6999      	ldr	r1, [r3, #24]
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	021a      	lsls	r2, r3, #8
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	619a      	str	r2, [r3, #24]
      break;
 8002c34:	e043      	b.n	8002cbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68b9      	ldr	r1, [r7, #8]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f000 fa95 	bl	800316c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	69da      	ldr	r2, [r3, #28]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f042 0208 	orr.w	r2, r2, #8
 8002c50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	69da      	ldr	r2, [r3, #28]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 0204 	bic.w	r2, r2, #4
 8002c60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	69d9      	ldr	r1, [r3, #28]
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	691a      	ldr	r2, [r3, #16]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	430a      	orrs	r2, r1
 8002c72:	61da      	str	r2, [r3, #28]
      break;
 8002c74:	e023      	b.n	8002cbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68b9      	ldr	r1, [r7, #8]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f000 fadf 	bl	8003240 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	69da      	ldr	r2, [r3, #28]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	69da      	ldr	r2, [r3, #28]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ca0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	69d9      	ldr	r1, [r3, #28]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	021a      	lsls	r2, r3, #8
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	61da      	str	r2, [r3, #28]
      break;
 8002cb6:	e002      	b.n	8002cbe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	75fb      	strb	r3, [r7, #23]
      break;
 8002cbc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002cc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3718      	adds	r7, #24
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d101      	bne.n	8002cec <HAL_TIM_ConfigClockSource+0x1c>
 8002ce8:	2302      	movs	r3, #2
 8002cea:	e0b4      	b.n	8002e56 <HAL_TIM_ConfigClockSource+0x186>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002d0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68ba      	ldr	r2, [r7, #8]
 8002d1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d24:	d03e      	beq.n	8002da4 <HAL_TIM_ConfigClockSource+0xd4>
 8002d26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d2a:	f200 8087 	bhi.w	8002e3c <HAL_TIM_ConfigClockSource+0x16c>
 8002d2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d32:	f000 8086 	beq.w	8002e42 <HAL_TIM_ConfigClockSource+0x172>
 8002d36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d3a:	d87f      	bhi.n	8002e3c <HAL_TIM_ConfigClockSource+0x16c>
 8002d3c:	2b70      	cmp	r3, #112	@ 0x70
 8002d3e:	d01a      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0xa6>
 8002d40:	2b70      	cmp	r3, #112	@ 0x70
 8002d42:	d87b      	bhi.n	8002e3c <HAL_TIM_ConfigClockSource+0x16c>
 8002d44:	2b60      	cmp	r3, #96	@ 0x60
 8002d46:	d050      	beq.n	8002dea <HAL_TIM_ConfigClockSource+0x11a>
 8002d48:	2b60      	cmp	r3, #96	@ 0x60
 8002d4a:	d877      	bhi.n	8002e3c <HAL_TIM_ConfigClockSource+0x16c>
 8002d4c:	2b50      	cmp	r3, #80	@ 0x50
 8002d4e:	d03c      	beq.n	8002dca <HAL_TIM_ConfigClockSource+0xfa>
 8002d50:	2b50      	cmp	r3, #80	@ 0x50
 8002d52:	d873      	bhi.n	8002e3c <HAL_TIM_ConfigClockSource+0x16c>
 8002d54:	2b40      	cmp	r3, #64	@ 0x40
 8002d56:	d058      	beq.n	8002e0a <HAL_TIM_ConfigClockSource+0x13a>
 8002d58:	2b40      	cmp	r3, #64	@ 0x40
 8002d5a:	d86f      	bhi.n	8002e3c <HAL_TIM_ConfigClockSource+0x16c>
 8002d5c:	2b30      	cmp	r3, #48	@ 0x30
 8002d5e:	d064      	beq.n	8002e2a <HAL_TIM_ConfigClockSource+0x15a>
 8002d60:	2b30      	cmp	r3, #48	@ 0x30
 8002d62:	d86b      	bhi.n	8002e3c <HAL_TIM_ConfigClockSource+0x16c>
 8002d64:	2b20      	cmp	r3, #32
 8002d66:	d060      	beq.n	8002e2a <HAL_TIM_ConfigClockSource+0x15a>
 8002d68:	2b20      	cmp	r3, #32
 8002d6a:	d867      	bhi.n	8002e3c <HAL_TIM_ConfigClockSource+0x16c>
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d05c      	beq.n	8002e2a <HAL_TIM_ConfigClockSource+0x15a>
 8002d70:	2b10      	cmp	r3, #16
 8002d72:	d05a      	beq.n	8002e2a <HAL_TIM_ConfigClockSource+0x15a>
 8002d74:	e062      	b.n	8002e3c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d86:	f000 fb25 	bl	80033d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002d98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	609a      	str	r2, [r3, #8]
      break;
 8002da2:	e04f      	b.n	8002e44 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002db4:	f000 fb0e 	bl	80033d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002dc6:	609a      	str	r2, [r3, #8]
      break;
 8002dc8:	e03c      	b.n	8002e44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	f000 fa82 	bl	80032e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2150      	movs	r1, #80	@ 0x50
 8002de2:	4618      	mov	r0, r3
 8002de4:	f000 fadb 	bl	800339e <TIM_ITRx_SetConfig>
      break;
 8002de8:	e02c      	b.n	8002e44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002df6:	461a      	mov	r2, r3
 8002df8:	f000 faa1 	bl	800333e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2160      	movs	r1, #96	@ 0x60
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 facb 	bl	800339e <TIM_ITRx_SetConfig>
      break;
 8002e08:	e01c      	b.n	8002e44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e16:	461a      	mov	r2, r3
 8002e18:	f000 fa62 	bl	80032e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2140      	movs	r1, #64	@ 0x40
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 fabb 	bl	800339e <TIM_ITRx_SetConfig>
      break;
 8002e28:	e00c      	b.n	8002e44 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4619      	mov	r1, r3
 8002e34:	4610      	mov	r0, r2
 8002e36:	f000 fab2 	bl	800339e <TIM_ITRx_SetConfig>
      break;
 8002e3a:	e003      	b.n	8002e44 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e40:	e000      	b.n	8002e44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr

08002e72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e72:	b480      	push	{r7}
 8002e74:	b083      	sub	sp, #12
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e7a:	bf00      	nop
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b083      	sub	sp, #12
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e8e:	bf00      	nop
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr

08002e9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b083      	sub	sp, #12
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
	...

08002eb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a3a      	ldr	r2, [pc, #232]	@ (8002fac <TIM_Base_SetConfig+0xfc>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d00f      	beq.n	8002ee8 <TIM_Base_SetConfig+0x38>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ece:	d00b      	beq.n	8002ee8 <TIM_Base_SetConfig+0x38>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a37      	ldr	r2, [pc, #220]	@ (8002fb0 <TIM_Base_SetConfig+0x100>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d007      	beq.n	8002ee8 <TIM_Base_SetConfig+0x38>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a36      	ldr	r2, [pc, #216]	@ (8002fb4 <TIM_Base_SetConfig+0x104>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d003      	beq.n	8002ee8 <TIM_Base_SetConfig+0x38>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a35      	ldr	r2, [pc, #212]	@ (8002fb8 <TIM_Base_SetConfig+0x108>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d108      	bne.n	8002efa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002eee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a2b      	ldr	r2, [pc, #172]	@ (8002fac <TIM_Base_SetConfig+0xfc>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d01b      	beq.n	8002f3a <TIM_Base_SetConfig+0x8a>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f08:	d017      	beq.n	8002f3a <TIM_Base_SetConfig+0x8a>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a28      	ldr	r2, [pc, #160]	@ (8002fb0 <TIM_Base_SetConfig+0x100>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d013      	beq.n	8002f3a <TIM_Base_SetConfig+0x8a>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a27      	ldr	r2, [pc, #156]	@ (8002fb4 <TIM_Base_SetConfig+0x104>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d00f      	beq.n	8002f3a <TIM_Base_SetConfig+0x8a>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a26      	ldr	r2, [pc, #152]	@ (8002fb8 <TIM_Base_SetConfig+0x108>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d00b      	beq.n	8002f3a <TIM_Base_SetConfig+0x8a>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a25      	ldr	r2, [pc, #148]	@ (8002fbc <TIM_Base_SetConfig+0x10c>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d007      	beq.n	8002f3a <TIM_Base_SetConfig+0x8a>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a24      	ldr	r2, [pc, #144]	@ (8002fc0 <TIM_Base_SetConfig+0x110>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d003      	beq.n	8002f3a <TIM_Base_SetConfig+0x8a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a23      	ldr	r2, [pc, #140]	@ (8002fc4 <TIM_Base_SetConfig+0x114>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d108      	bne.n	8002f4c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a0e      	ldr	r2, [pc, #56]	@ (8002fac <TIM_Base_SetConfig+0xfc>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d103      	bne.n	8002f80 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	691a      	ldr	r2, [r3, #16]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d105      	bne.n	8002f9e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	f023 0201 	bic.w	r2, r3, #1
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	611a      	str	r2, [r3, #16]
  }
}
 8002f9e:	bf00      	nop
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	40010000 	.word	0x40010000
 8002fb0:	40000400 	.word	0x40000400
 8002fb4:	40000800 	.word	0x40000800
 8002fb8:	40000c00 	.word	0x40000c00
 8002fbc:	40014000 	.word	0x40014000
 8002fc0:	40014400 	.word	0x40014400
 8002fc4:	40014800 	.word	0x40014800

08002fc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b087      	sub	sp, #28
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	f023 0201 	bic.w	r2, r3, #1
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f023 0303 	bic.w	r3, r3, #3
 8002ffe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	4313      	orrs	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f023 0302 	bic.w	r3, r3, #2
 8003010:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	4313      	orrs	r3, r2
 800301a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a1c      	ldr	r2, [pc, #112]	@ (8003090 <TIM_OC1_SetConfig+0xc8>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d10c      	bne.n	800303e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	f023 0308 	bic.w	r3, r3, #8
 800302a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	4313      	orrs	r3, r2
 8003034:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	f023 0304 	bic.w	r3, r3, #4
 800303c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a13      	ldr	r2, [pc, #76]	@ (8003090 <TIM_OC1_SetConfig+0xc8>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d111      	bne.n	800306a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800304c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003054:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	4313      	orrs	r3, r2
 800305e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	4313      	orrs	r3, r2
 8003068:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685a      	ldr	r2, [r3, #4]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	621a      	str	r2, [r3, #32]
}
 8003084:	bf00      	nop
 8003086:	371c      	adds	r7, #28
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr
 8003090:	40010000 	.word	0x40010000

08003094 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003094:	b480      	push	{r7}
 8003096:	b087      	sub	sp, #28
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	f023 0210 	bic.w	r2, r3, #16
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80030c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	021b      	lsls	r3, r3, #8
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	f023 0320 	bic.w	r3, r3, #32
 80030de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a1e      	ldr	r2, [pc, #120]	@ (8003168 <TIM_OC2_SetConfig+0xd4>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d10d      	bne.n	8003110 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	4313      	orrs	r3, r2
 8003106:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800310e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a15      	ldr	r2, [pc, #84]	@ (8003168 <TIM_OC2_SetConfig+0xd4>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d113      	bne.n	8003140 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800311e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003126:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	4313      	orrs	r3, r2
 8003132:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	4313      	orrs	r3, r2
 800313e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	621a      	str	r2, [r3, #32]
}
 800315a:	bf00      	nop
 800315c:	371c      	adds	r7, #28
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	40010000 	.word	0x40010000

0800316c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800316c:	b480      	push	{r7}
 800316e:	b087      	sub	sp, #28
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800319a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f023 0303 	bic.w	r3, r3, #3
 80031a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80031b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	021b      	lsls	r3, r3, #8
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	4313      	orrs	r3, r2
 80031c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a1d      	ldr	r2, [pc, #116]	@ (800323c <TIM_OC3_SetConfig+0xd0>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d10d      	bne.n	80031e6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80031d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	021b      	lsls	r3, r3, #8
 80031d8:	697a      	ldr	r2, [r7, #20]
 80031da:	4313      	orrs	r3, r2
 80031dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80031e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a14      	ldr	r2, [pc, #80]	@ (800323c <TIM_OC3_SetConfig+0xd0>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d113      	bne.n	8003216 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80031f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80031fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	011b      	lsls	r3, r3, #4
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	4313      	orrs	r3, r2
 8003208:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	011b      	lsls	r3, r3, #4
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	4313      	orrs	r3, r2
 8003214:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	621a      	str	r2, [r3, #32]
}
 8003230:	bf00      	nop
 8003232:	371c      	adds	r7, #28
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	40010000 	.word	0x40010000

08003240 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003240:	b480      	push	{r7}
 8003242:	b087      	sub	sp, #28
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800326e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003276:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	021b      	lsls	r3, r3, #8
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	4313      	orrs	r3, r2
 8003282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800328a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	031b      	lsls	r3, r3, #12
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	4313      	orrs	r3, r2
 8003296:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a10      	ldr	r2, [pc, #64]	@ (80032dc <TIM_OC4_SetConfig+0x9c>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d109      	bne.n	80032b4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80032a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	019b      	lsls	r3, r3, #6
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	621a      	str	r2, [r3, #32]
}
 80032ce:	bf00      	nop
 80032d0:	371c      	adds	r7, #28
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	40010000 	.word	0x40010000

080032e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b087      	sub	sp, #28
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	f023 0201 	bic.w	r2, r3, #1
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800330a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	011b      	lsls	r3, r3, #4
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	4313      	orrs	r3, r2
 8003314:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	f023 030a 	bic.w	r3, r3, #10
 800331c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	4313      	orrs	r3, r2
 8003324:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	621a      	str	r2, [r3, #32]
}
 8003332:	bf00      	nop
 8003334:	371c      	adds	r7, #28
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800333e:	b480      	push	{r7}
 8003340:	b087      	sub	sp, #28
 8003342:	af00      	add	r7, sp, #0
 8003344:	60f8      	str	r0, [r7, #12]
 8003346:	60b9      	str	r1, [r7, #8]
 8003348:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	f023 0210 	bic.w	r2, r3, #16
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003368:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	031b      	lsls	r3, r3, #12
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	4313      	orrs	r3, r2
 8003372:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800337a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	011b      	lsls	r3, r3, #4
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	4313      	orrs	r3, r2
 8003384:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	621a      	str	r2, [r3, #32]
}
 8003392:	bf00      	nop
 8003394:	371c      	adds	r7, #28
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800339e:	b480      	push	{r7}
 80033a0:	b085      	sub	sp, #20
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
 80033a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	f043 0307 	orr.w	r3, r3, #7
 80033c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	609a      	str	r2, [r3, #8]
}
 80033c8:	bf00      	nop
 80033ca:	3714      	adds	r7, #20
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b087      	sub	sp, #28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
 80033e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80033ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	021a      	lsls	r2, r3, #8
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	431a      	orrs	r2, r3
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	4313      	orrs	r3, r2
 8003400:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	609a      	str	r2, [r3, #8]
}
 8003408:	bf00      	nop
 800340a:	371c      	adds	r7, #28
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003424:	2b01      	cmp	r3, #1
 8003426:	d101      	bne.n	800342c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003428:	2302      	movs	r3, #2
 800342a:	e050      	b.n	80034ce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2202      	movs	r2, #2
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003452:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	4313      	orrs	r3, r2
 800345c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a1c      	ldr	r2, [pc, #112]	@ (80034dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d018      	beq.n	80034a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003478:	d013      	beq.n	80034a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a18      	ldr	r2, [pc, #96]	@ (80034e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d00e      	beq.n	80034a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a16      	ldr	r2, [pc, #88]	@ (80034e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d009      	beq.n	80034a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a15      	ldr	r2, [pc, #84]	@ (80034e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d004      	beq.n	80034a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a13      	ldr	r2, [pc, #76]	@ (80034ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d10c      	bne.n	80034bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68ba      	ldr	r2, [r7, #8]
 80034ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3714      	adds	r7, #20
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	40010000 	.word	0x40010000
 80034e0:	40000400 	.word	0x40000400
 80034e4:	40000800 	.word	0x40000800
 80034e8:	40000c00 	.word	0x40000c00
 80034ec:	40014000 	.word	0x40014000

080034f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	4603      	mov	r3, r0
 8003520:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003522:	2300      	movs	r3, #0
 8003524:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003526:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800352a:	2b84      	cmp	r3, #132	@ 0x84
 800352c:	d005      	beq.n	800353a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800352e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	4413      	add	r3, r2
 8003536:	3303      	adds	r3, #3
 8003538:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800353a:	68fb      	ldr	r3, [r7, #12]
}
 800353c:	4618      	mov	r0, r3
 800353e:	3714      	adds	r7, #20
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800354c:	f000 fafc 	bl	8003b48 <vTaskStartScheduler>
  
  return osOK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	bd80      	pop	{r7, pc}

08003556 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003556:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003558:	b089      	sub	sp, #36	@ 0x24
 800355a:	af04      	add	r7, sp, #16
 800355c:	6078      	str	r0, [r7, #4]
 800355e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d020      	beq.n	80035aa <osThreadCreate+0x54>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d01c      	beq.n	80035aa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685c      	ldr	r4, [r3, #4]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	691e      	ldr	r6, [r3, #16]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff ffc8 	bl	8003518 <makeFreeRtosPriority>
 8003588:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003592:	9202      	str	r2, [sp, #8]
 8003594:	9301      	str	r3, [sp, #4]
 8003596:	9100      	str	r1, [sp, #0]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	4632      	mov	r2, r6
 800359c:	4629      	mov	r1, r5
 800359e:	4620      	mov	r0, r4
 80035a0:	f000 f8ed 	bl	800377e <xTaskCreateStatic>
 80035a4:	4603      	mov	r3, r0
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	e01c      	b.n	80035e4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685c      	ldr	r4, [r3, #4]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035b6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035be:	4618      	mov	r0, r3
 80035c0:	f7ff ffaa 	bl	8003518 <makeFreeRtosPriority>
 80035c4:	4602      	mov	r2, r0
 80035c6:	f107 030c 	add.w	r3, r7, #12
 80035ca:	9301      	str	r3, [sp, #4]
 80035cc:	9200      	str	r2, [sp, #0]
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	4632      	mov	r2, r6
 80035d2:	4629      	mov	r1, r5
 80035d4:	4620      	mov	r0, r4
 80035d6:	f000 f932 	bl	800383e <xTaskCreate>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d001      	beq.n	80035e4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80035e0:	2300      	movs	r3, #0
 80035e2:	e000      	b.n	80035e6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80035e4:	68fb      	ldr	r3, [r7, #12]
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3714      	adds	r7, #20
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035ee <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b084      	sub	sp, #16
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <osDelay+0x16>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	e000      	b.n	8003606 <osDelay+0x18>
 8003604:	2301      	movs	r3, #1
 8003606:	4618      	mov	r0, r3
 8003608:	f000 fa68 	bl	8003adc <vTaskDelay>
  
  return osOK;
 800360c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800360e:	4618      	mov	r0, r3
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003616:	b480      	push	{r7}
 8003618:	b083      	sub	sp, #12
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f103 0208 	add.w	r2, r3, #8
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800362e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f103 0208 	add.w	r2, r3, #8
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f103 0208 	add.w	r2, r3, #8
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800364a:	bf00      	nop
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	683a      	ldr	r2, [r7, #0]
 8003694:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	1c5a      	adds	r2, r3, #1
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	601a      	str	r2, [r3, #0]
}
 80036ac:	bf00      	nop
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036ce:	d103      	bne.n	80036d8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	e00c      	b.n	80036f2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3308      	adds	r3, #8
 80036dc:	60fb      	str	r3, [r7, #12]
 80036de:	e002      	b.n	80036e6 <vListInsert+0x2e>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	60fb      	str	r3, [r7, #12]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d2f6      	bcs.n	80036e0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	1c5a      	adds	r2, r3, #1
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	601a      	str	r2, [r3, #0]
}
 800371e:	bf00      	nop
 8003720:	3714      	adds	r7, #20
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800372a:	b480      	push	{r7}
 800372c:	b085      	sub	sp, #20
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	6892      	ldr	r2, [r2, #8]
 8003740:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6852      	ldr	r2, [r2, #4]
 800374a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	429a      	cmp	r2, r3
 8003754:	d103      	bne.n	800375e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689a      	ldr	r2, [r3, #8]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	1e5a      	subs	r2, r3, #1
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
}
 8003772:	4618      	mov	r0, r3
 8003774:	3714      	adds	r7, #20
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800377e:	b580      	push	{r7, lr}
 8003780:	b08e      	sub	sp, #56	@ 0x38
 8003782:	af04      	add	r7, sp, #16
 8003784:	60f8      	str	r0, [r7, #12]
 8003786:	60b9      	str	r1, [r7, #8]
 8003788:	607a      	str	r2, [r7, #4]
 800378a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800378c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10b      	bne.n	80037aa <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003796:	f383 8811 	msr	BASEPRI, r3
 800379a:	f3bf 8f6f 	isb	sy
 800379e:	f3bf 8f4f 	dsb	sy
 80037a2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80037a4:	bf00      	nop
 80037a6:	bf00      	nop
 80037a8:	e7fd      	b.n	80037a6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80037aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10b      	bne.n	80037c8 <xTaskCreateStatic+0x4a>
	__asm volatile
 80037b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037b4:	f383 8811 	msr	BASEPRI, r3
 80037b8:	f3bf 8f6f 	isb	sy
 80037bc:	f3bf 8f4f 	dsb	sy
 80037c0:	61fb      	str	r3, [r7, #28]
}
 80037c2:	bf00      	nop
 80037c4:	bf00      	nop
 80037c6:	e7fd      	b.n	80037c4 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80037c8:	23a0      	movs	r3, #160	@ 0xa0
 80037ca:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	2ba0      	cmp	r3, #160	@ 0xa0
 80037d0:	d00b      	beq.n	80037ea <xTaskCreateStatic+0x6c>
	__asm volatile
 80037d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037d6:	f383 8811 	msr	BASEPRI, r3
 80037da:	f3bf 8f6f 	isb	sy
 80037de:	f3bf 8f4f 	dsb	sy
 80037e2:	61bb      	str	r3, [r7, #24]
}
 80037e4:	bf00      	nop
 80037e6:	bf00      	nop
 80037e8:	e7fd      	b.n	80037e6 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80037ea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80037ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d01e      	beq.n	8003830 <xTaskCreateStatic+0xb2>
 80037f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d01b      	beq.n	8003830 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80037f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037fa:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80037fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003800:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003804:	2202      	movs	r2, #2
 8003806:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800380a:	2300      	movs	r3, #0
 800380c:	9303      	str	r3, [sp, #12]
 800380e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003810:	9302      	str	r3, [sp, #8]
 8003812:	f107 0314 	add.w	r3, r7, #20
 8003816:	9301      	str	r3, [sp, #4]
 8003818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800381a:	9300      	str	r3, [sp, #0]
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	68b9      	ldr	r1, [r7, #8]
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 f850 	bl	80038c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003828:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800382a:	f000 f8ed 	bl	8003a08 <prvAddNewTaskToReadyList>
 800382e:	e001      	b.n	8003834 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003830:	2300      	movs	r3, #0
 8003832:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003834:	697b      	ldr	r3, [r7, #20]
	}
 8003836:	4618      	mov	r0, r3
 8003838:	3728      	adds	r7, #40	@ 0x28
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800383e:	b580      	push	{r7, lr}
 8003840:	b08c      	sub	sp, #48	@ 0x30
 8003842:	af04      	add	r7, sp, #16
 8003844:	60f8      	str	r0, [r7, #12]
 8003846:	60b9      	str	r1, [r7, #8]
 8003848:	603b      	str	r3, [r7, #0]
 800384a:	4613      	mov	r3, r2
 800384c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800384e:	88fb      	ldrh	r3, [r7, #6]
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4618      	mov	r0, r3
 8003854:	f000 ff00 	bl	8004658 <pvPortMalloc>
 8003858:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00e      	beq.n	800387e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003860:	20a0      	movs	r0, #160	@ 0xa0
 8003862:	f000 fef9 	bl	8004658 <pvPortMalloc>
 8003866:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	631a      	str	r2, [r3, #48]	@ 0x30
 8003874:	e005      	b.n	8003882 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003876:	6978      	ldr	r0, [r7, #20]
 8003878:	f000 ffbc 	bl	80047f4 <vPortFree>
 800387c:	e001      	b.n	8003882 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800387e:	2300      	movs	r3, #0
 8003880:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d017      	beq.n	80038b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003890:	88fa      	ldrh	r2, [r7, #6]
 8003892:	2300      	movs	r3, #0
 8003894:	9303      	str	r3, [sp, #12]
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	9302      	str	r3, [sp, #8]
 800389a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800389c:	9301      	str	r3, [sp, #4]
 800389e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	68b9      	ldr	r1, [r7, #8]
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 f80e 	bl	80038c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038ac:	69f8      	ldr	r0, [r7, #28]
 80038ae:	f000 f8ab 	bl	8003a08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80038b2:	2301      	movs	r3, #1
 80038b4:	61bb      	str	r3, [r7, #24]
 80038b6:	e002      	b.n	80038be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80038b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80038bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80038be:	69bb      	ldr	r3, [r7, #24]
	}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3720      	adds	r7, #32
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b088      	sub	sp, #32
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
 80038d4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80038d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80038e0:	3b01      	subs	r3, #1
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4413      	add	r3, r2
 80038e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	f023 0307 	bic.w	r3, r3, #7
 80038ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	f003 0307 	and.w	r3, r3, #7
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00b      	beq.n	8003912 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80038fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038fe:	f383 8811 	msr	BASEPRI, r3
 8003902:	f3bf 8f6f 	isb	sy
 8003906:	f3bf 8f4f 	dsb	sy
 800390a:	617b      	str	r3, [r7, #20]
}
 800390c:	bf00      	nop
 800390e:	bf00      	nop
 8003910:	e7fd      	b.n	800390e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d01f      	beq.n	8003958 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003918:	2300      	movs	r3, #0
 800391a:	61fb      	str	r3, [r7, #28]
 800391c:	e012      	b.n	8003944 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800391e:	68ba      	ldr	r2, [r7, #8]
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	4413      	add	r3, r2
 8003924:	7819      	ldrb	r1, [r3, #0]
 8003926:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	4413      	add	r3, r2
 800392c:	3334      	adds	r3, #52	@ 0x34
 800392e:	460a      	mov	r2, r1
 8003930:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	4413      	add	r3, r2
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d006      	beq.n	800394c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	3301      	adds	r3, #1
 8003942:	61fb      	str	r3, [r7, #28]
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	2b0f      	cmp	r3, #15
 8003948:	d9e9      	bls.n	800391e <prvInitialiseNewTask+0x56>
 800394a:	e000      	b.n	800394e <prvInitialiseNewTask+0x86>
			{
				break;
 800394c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800394e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003956:	e003      	b.n	8003960 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800395a:	2200      	movs	r2, #0
 800395c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003962:	2b06      	cmp	r3, #6
 8003964:	d901      	bls.n	800396a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003966:	2306      	movs	r3, #6
 8003968:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800396a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800396c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800396e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003972:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003974:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003978:	2200      	movs	r2, #0
 800397a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800397c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800397e:	3304      	adds	r3, #4
 8003980:	4618      	mov	r0, r3
 8003982:	f7ff fe68 	bl	8003656 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003988:	3318      	adds	r3, #24
 800398a:	4618      	mov	r0, r3
 800398c:	f7ff fe63 	bl	8003656 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003992:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003994:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003998:	f1c3 0207 	rsb	r2, r3, #7
 800399c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800399e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80039a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039a4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80039a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a8:	2200      	movs	r2, #0
 80039aa:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80039ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80039b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b8:	334c      	adds	r3, #76	@ 0x4c
 80039ba:	224c      	movs	r2, #76	@ 0x4c
 80039bc:	2100      	movs	r1, #0
 80039be:	4618      	mov	r0, r3
 80039c0:	f001 f838 	bl	8004a34 <memset>
 80039c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c6:	4a0d      	ldr	r2, [pc, #52]	@ (80039fc <prvInitialiseNewTask+0x134>)
 80039c8:	651a      	str	r2, [r3, #80]	@ 0x50
 80039ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039cc:	4a0c      	ldr	r2, [pc, #48]	@ (8003a00 <prvInitialiseNewTask+0x138>)
 80039ce:	655a      	str	r2, [r3, #84]	@ 0x54
 80039d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d2:	4a0c      	ldr	r2, [pc, #48]	@ (8003a04 <prvInitialiseNewTask+0x13c>)
 80039d4:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80039d6:	683a      	ldr	r2, [r7, #0]
 80039d8:	68f9      	ldr	r1, [r7, #12]
 80039da:	69b8      	ldr	r0, [r7, #24]
 80039dc:	f000 fc2a 	bl	8004234 <pxPortInitialiseStack>
 80039e0:	4602      	mov	r2, r0
 80039e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80039e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d002      	beq.n	80039f2 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80039ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039f2:	bf00      	nop
 80039f4:	3720      	adds	r7, #32
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	20004250 	.word	0x20004250
 8003a00:	200042b8 	.word	0x200042b8
 8003a04:	20004320 	.word	0x20004320

08003a08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a10:	f000 fd42 	bl	8004498 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a14:	4b2a      	ldr	r3, [pc, #168]	@ (8003ac0 <prvAddNewTaskToReadyList+0xb8>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	4a29      	ldr	r2, [pc, #164]	@ (8003ac0 <prvAddNewTaskToReadyList+0xb8>)
 8003a1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003a1e:	4b29      	ldr	r3, [pc, #164]	@ (8003ac4 <prvAddNewTaskToReadyList+0xbc>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d109      	bne.n	8003a3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003a26:	4a27      	ldr	r2, [pc, #156]	@ (8003ac4 <prvAddNewTaskToReadyList+0xbc>)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a2c:	4b24      	ldr	r3, [pc, #144]	@ (8003ac0 <prvAddNewTaskToReadyList+0xb8>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d110      	bne.n	8003a56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003a34:	f000 fad4 	bl	8003fe0 <prvInitialiseTaskLists>
 8003a38:	e00d      	b.n	8003a56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003a3a:	4b23      	ldr	r3, [pc, #140]	@ (8003ac8 <prvAddNewTaskToReadyList+0xc0>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d109      	bne.n	8003a56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003a42:	4b20      	ldr	r3, [pc, #128]	@ (8003ac4 <prvAddNewTaskToReadyList+0xbc>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d802      	bhi.n	8003a56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003a50:	4a1c      	ldr	r2, [pc, #112]	@ (8003ac4 <prvAddNewTaskToReadyList+0xbc>)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003a56:	4b1d      	ldr	r3, [pc, #116]	@ (8003acc <prvAddNewTaskToReadyList+0xc4>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	4a1b      	ldr	r2, [pc, #108]	@ (8003acc <prvAddNewTaskToReadyList+0xc4>)
 8003a5e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a64:	2201      	movs	r2, #1
 8003a66:	409a      	lsls	r2, r3
 8003a68:	4b19      	ldr	r3, [pc, #100]	@ (8003ad0 <prvAddNewTaskToReadyList+0xc8>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	4a18      	ldr	r2, [pc, #96]	@ (8003ad0 <prvAddNewTaskToReadyList+0xc8>)
 8003a70:	6013      	str	r3, [r2, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a76:	4613      	mov	r3, r2
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	4413      	add	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4a15      	ldr	r2, [pc, #84]	@ (8003ad4 <prvAddNewTaskToReadyList+0xcc>)
 8003a80:	441a      	add	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	3304      	adds	r3, #4
 8003a86:	4619      	mov	r1, r3
 8003a88:	4610      	mov	r0, r2
 8003a8a:	f7ff fdf1 	bl	8003670 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003a8e:	f000 fd35 	bl	80044fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003a92:	4b0d      	ldr	r3, [pc, #52]	@ (8003ac8 <prvAddNewTaskToReadyList+0xc0>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00e      	beq.n	8003ab8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8003ac4 <prvAddNewTaskToReadyList+0xbc>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d207      	bcs.n	8003ab8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad8 <prvAddNewTaskToReadyList+0xd0>)
 8003aaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	f3bf 8f4f 	dsb	sy
 8003ab4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ab8:	bf00      	nop
 8003aba:	3708      	adds	r7, #8
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	200005fc 	.word	0x200005fc
 8003ac4:	200004fc 	.word	0x200004fc
 8003ac8:	20000608 	.word	0x20000608
 8003acc:	20000618 	.word	0x20000618
 8003ad0:	20000604 	.word	0x20000604
 8003ad4:	20000500 	.word	0x20000500
 8003ad8:	e000ed04 	.word	0xe000ed04

08003adc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d018      	beq.n	8003b20 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003aee:	4b14      	ldr	r3, [pc, #80]	@ (8003b40 <vTaskDelay+0x64>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00b      	beq.n	8003b0e <vTaskDelay+0x32>
	__asm volatile
 8003af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003afa:	f383 8811 	msr	BASEPRI, r3
 8003afe:	f3bf 8f6f 	isb	sy
 8003b02:	f3bf 8f4f 	dsb	sy
 8003b06:	60bb      	str	r3, [r7, #8]
}
 8003b08:	bf00      	nop
 8003b0a:	bf00      	nop
 8003b0c:	e7fd      	b.n	8003b0a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003b0e:	f000 f885 	bl	8003c1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b12:	2100      	movs	r1, #0
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 fb27 	bl	8004168 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003b1a:	f000 f88d 	bl	8003c38 <xTaskResumeAll>
 8003b1e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d107      	bne.n	8003b36 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003b26:	4b07      	ldr	r3, [pc, #28]	@ (8003b44 <vTaskDelay+0x68>)
 8003b28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b2c:	601a      	str	r2, [r3, #0]
 8003b2e:	f3bf 8f4f 	dsb	sy
 8003b32:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003b36:	bf00      	nop
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	20000624 	.word	0x20000624
 8003b44:	e000ed04 	.word	0xe000ed04

08003b48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b08a      	sub	sp, #40	@ 0x28
 8003b4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003b52:	2300      	movs	r3, #0
 8003b54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003b56:	463a      	mov	r2, r7
 8003b58:	1d39      	adds	r1, r7, #4
 8003b5a:	f107 0308 	add.w	r3, r7, #8
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7fc fcb6 	bl	80004d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003b64:	6839      	ldr	r1, [r7, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68ba      	ldr	r2, [r7, #8]
 8003b6a:	9202      	str	r2, [sp, #8]
 8003b6c:	9301      	str	r3, [sp, #4]
 8003b6e:	2300      	movs	r3, #0
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	2300      	movs	r3, #0
 8003b74:	460a      	mov	r2, r1
 8003b76:	4921      	ldr	r1, [pc, #132]	@ (8003bfc <vTaskStartScheduler+0xb4>)
 8003b78:	4821      	ldr	r0, [pc, #132]	@ (8003c00 <vTaskStartScheduler+0xb8>)
 8003b7a:	f7ff fe00 	bl	800377e <xTaskCreateStatic>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	4a20      	ldr	r2, [pc, #128]	@ (8003c04 <vTaskStartScheduler+0xbc>)
 8003b82:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003b84:	4b1f      	ldr	r3, [pc, #124]	@ (8003c04 <vTaskStartScheduler+0xbc>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d002      	beq.n	8003b92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	617b      	str	r3, [r7, #20]
 8003b90:	e001      	b.n	8003b96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003b92:	2300      	movs	r3, #0
 8003b94:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d11b      	bne.n	8003bd4 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ba0:	f383 8811 	msr	BASEPRI, r3
 8003ba4:	f3bf 8f6f 	isb	sy
 8003ba8:	f3bf 8f4f 	dsb	sy
 8003bac:	613b      	str	r3, [r7, #16]
}
 8003bae:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003bb0:	4b15      	ldr	r3, [pc, #84]	@ (8003c08 <vTaskStartScheduler+0xc0>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	334c      	adds	r3, #76	@ 0x4c
 8003bb6:	4a15      	ldr	r2, [pc, #84]	@ (8003c0c <vTaskStartScheduler+0xc4>)
 8003bb8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003bba:	4b15      	ldr	r3, [pc, #84]	@ (8003c10 <vTaskStartScheduler+0xc8>)
 8003bbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003bc0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003bc2:	4b14      	ldr	r3, [pc, #80]	@ (8003c14 <vTaskStartScheduler+0xcc>)
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003bc8:	4b13      	ldr	r3, [pc, #76]	@ (8003c18 <vTaskStartScheduler+0xd0>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003bce:	f000 fbbf 	bl	8004350 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003bd2:	e00f      	b.n	8003bf4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003bda:	d10b      	bne.n	8003bf4 <vTaskStartScheduler+0xac>
	__asm volatile
 8003bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003be0:	f383 8811 	msr	BASEPRI, r3
 8003be4:	f3bf 8f6f 	isb	sy
 8003be8:	f3bf 8f4f 	dsb	sy
 8003bec:	60fb      	str	r3, [r7, #12]
}
 8003bee:	bf00      	nop
 8003bf0:	bf00      	nop
 8003bf2:	e7fd      	b.n	8003bf0 <vTaskStartScheduler+0xa8>
}
 8003bf4:	bf00      	nop
 8003bf6:	3718      	adds	r7, #24
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	08004ccc 	.word	0x08004ccc
 8003c00:	08003fb1 	.word	0x08003fb1
 8003c04:	20000620 	.word	0x20000620
 8003c08:	200004fc 	.word	0x200004fc
 8003c0c:	20000010 	.word	0x20000010
 8003c10:	2000061c 	.word	0x2000061c
 8003c14:	20000608 	.word	0x20000608
 8003c18:	20000600 	.word	0x20000600

08003c1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003c20:	4b04      	ldr	r3, [pc, #16]	@ (8003c34 <vTaskSuspendAll+0x18>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	3301      	adds	r3, #1
 8003c26:	4a03      	ldr	r2, [pc, #12]	@ (8003c34 <vTaskSuspendAll+0x18>)
 8003c28:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003c2a:	bf00      	nop
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	20000624 	.word	0x20000624

08003c38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c42:	2300      	movs	r3, #0
 8003c44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c46:	4b42      	ldr	r3, [pc, #264]	@ (8003d50 <xTaskResumeAll+0x118>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10b      	bne.n	8003c66 <xTaskResumeAll+0x2e>
	__asm volatile
 8003c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c52:	f383 8811 	msr	BASEPRI, r3
 8003c56:	f3bf 8f6f 	isb	sy
 8003c5a:	f3bf 8f4f 	dsb	sy
 8003c5e:	603b      	str	r3, [r7, #0]
}
 8003c60:	bf00      	nop
 8003c62:	bf00      	nop
 8003c64:	e7fd      	b.n	8003c62 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c66:	f000 fc17 	bl	8004498 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c6a:	4b39      	ldr	r3, [pc, #228]	@ (8003d50 <xTaskResumeAll+0x118>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	4a37      	ldr	r2, [pc, #220]	@ (8003d50 <xTaskResumeAll+0x118>)
 8003c72:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c74:	4b36      	ldr	r3, [pc, #216]	@ (8003d50 <xTaskResumeAll+0x118>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d161      	bne.n	8003d40 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c7c:	4b35      	ldr	r3, [pc, #212]	@ (8003d54 <xTaskResumeAll+0x11c>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d05d      	beq.n	8003d40 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c84:	e02e      	b.n	8003ce4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c86:	4b34      	ldr	r3, [pc, #208]	@ (8003d58 <xTaskResumeAll+0x120>)
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	3318      	adds	r3, #24
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7ff fd49 	bl	800372a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	3304      	adds	r3, #4
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7ff fd44 	bl	800372a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	409a      	lsls	r2, r3
 8003caa:	4b2c      	ldr	r3, [pc, #176]	@ (8003d5c <xTaskResumeAll+0x124>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	4a2a      	ldr	r2, [pc, #168]	@ (8003d5c <xTaskResumeAll+0x124>)
 8003cb2:	6013      	str	r3, [r2, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cb8:	4613      	mov	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4413      	add	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4a27      	ldr	r2, [pc, #156]	@ (8003d60 <xTaskResumeAll+0x128>)
 8003cc2:	441a      	add	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	3304      	adds	r3, #4
 8003cc8:	4619      	mov	r1, r3
 8003cca:	4610      	mov	r0, r2
 8003ccc:	f7ff fcd0 	bl	8003670 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cd4:	4b23      	ldr	r3, [pc, #140]	@ (8003d64 <xTaskResumeAll+0x12c>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d302      	bcc.n	8003ce4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003cde:	4b22      	ldr	r3, [pc, #136]	@ (8003d68 <xTaskResumeAll+0x130>)
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ce4:	4b1c      	ldr	r3, [pc, #112]	@ (8003d58 <xTaskResumeAll+0x120>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1cc      	bne.n	8003c86 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003cf2:	f000 fa19 	bl	8004128 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003cf6:	4b1d      	ldr	r3, [pc, #116]	@ (8003d6c <xTaskResumeAll+0x134>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d010      	beq.n	8003d24 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003d02:	f000 f837 	bl	8003d74 <xTaskIncrementTick>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d002      	beq.n	8003d12 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003d0c:	4b16      	ldr	r3, [pc, #88]	@ (8003d68 <xTaskResumeAll+0x130>)
 8003d0e:	2201      	movs	r2, #1
 8003d10:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	3b01      	subs	r3, #1
 8003d16:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1f1      	bne.n	8003d02 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003d1e:	4b13      	ldr	r3, [pc, #76]	@ (8003d6c <xTaskResumeAll+0x134>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d24:	4b10      	ldr	r3, [pc, #64]	@ (8003d68 <xTaskResumeAll+0x130>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d009      	beq.n	8003d40 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d30:	4b0f      	ldr	r3, [pc, #60]	@ (8003d70 <xTaskResumeAll+0x138>)
 8003d32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	f3bf 8f4f 	dsb	sy
 8003d3c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d40:	f000 fbdc 	bl	80044fc <vPortExitCritical>

	return xAlreadyYielded;
 8003d44:	68bb      	ldr	r3, [r7, #8]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	20000624 	.word	0x20000624
 8003d54:	200005fc 	.word	0x200005fc
 8003d58:	200005bc 	.word	0x200005bc
 8003d5c:	20000604 	.word	0x20000604
 8003d60:	20000500 	.word	0x20000500
 8003d64:	200004fc 	.word	0x200004fc
 8003d68:	20000610 	.word	0x20000610
 8003d6c:	2000060c 	.word	0x2000060c
 8003d70:	e000ed04 	.word	0xe000ed04

08003d74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d7e:	4b4f      	ldr	r3, [pc, #316]	@ (8003ebc <xTaskIncrementTick+0x148>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f040 808f 	bne.w	8003ea6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d88:	4b4d      	ldr	r3, [pc, #308]	@ (8003ec0 <xTaskIncrementTick+0x14c>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003d90:	4a4b      	ldr	r2, [pc, #300]	@ (8003ec0 <xTaskIncrementTick+0x14c>)
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d121      	bne.n	8003de0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003d9c:	4b49      	ldr	r3, [pc, #292]	@ (8003ec4 <xTaskIncrementTick+0x150>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00b      	beq.n	8003dbe <xTaskIncrementTick+0x4a>
	__asm volatile
 8003da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003daa:	f383 8811 	msr	BASEPRI, r3
 8003dae:	f3bf 8f6f 	isb	sy
 8003db2:	f3bf 8f4f 	dsb	sy
 8003db6:	603b      	str	r3, [r7, #0]
}
 8003db8:	bf00      	nop
 8003dba:	bf00      	nop
 8003dbc:	e7fd      	b.n	8003dba <xTaskIncrementTick+0x46>
 8003dbe:	4b41      	ldr	r3, [pc, #260]	@ (8003ec4 <xTaskIncrementTick+0x150>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	60fb      	str	r3, [r7, #12]
 8003dc4:	4b40      	ldr	r3, [pc, #256]	@ (8003ec8 <xTaskIncrementTick+0x154>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a3e      	ldr	r2, [pc, #248]	@ (8003ec4 <xTaskIncrementTick+0x150>)
 8003dca:	6013      	str	r3, [r2, #0]
 8003dcc:	4a3e      	ldr	r2, [pc, #248]	@ (8003ec8 <xTaskIncrementTick+0x154>)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6013      	str	r3, [r2, #0]
 8003dd2:	4b3e      	ldr	r3, [pc, #248]	@ (8003ecc <xTaskIncrementTick+0x158>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	4a3c      	ldr	r2, [pc, #240]	@ (8003ecc <xTaskIncrementTick+0x158>)
 8003dda:	6013      	str	r3, [r2, #0]
 8003ddc:	f000 f9a4 	bl	8004128 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003de0:	4b3b      	ldr	r3, [pc, #236]	@ (8003ed0 <xTaskIncrementTick+0x15c>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d348      	bcc.n	8003e7c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003dea:	4b36      	ldr	r3, [pc, #216]	@ (8003ec4 <xTaskIncrementTick+0x150>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d104      	bne.n	8003dfe <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003df4:	4b36      	ldr	r3, [pc, #216]	@ (8003ed0 <xTaskIncrementTick+0x15c>)
 8003df6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003dfa:	601a      	str	r2, [r3, #0]
					break;
 8003dfc:	e03e      	b.n	8003e7c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dfe:	4b31      	ldr	r3, [pc, #196]	@ (8003ec4 <xTaskIncrementTick+0x150>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d203      	bcs.n	8003e1e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e16:	4a2e      	ldr	r2, [pc, #184]	@ (8003ed0 <xTaskIncrementTick+0x15c>)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003e1c:	e02e      	b.n	8003e7c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	3304      	adds	r3, #4
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7ff fc81 	bl	800372a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d004      	beq.n	8003e3a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	3318      	adds	r3, #24
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff fc78 	bl	800372a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e3e:	2201      	movs	r2, #1
 8003e40:	409a      	lsls	r2, r3
 8003e42:	4b24      	ldr	r3, [pc, #144]	@ (8003ed4 <xTaskIncrementTick+0x160>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	4a22      	ldr	r2, [pc, #136]	@ (8003ed4 <xTaskIncrementTick+0x160>)
 8003e4a:	6013      	str	r3, [r2, #0]
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e50:	4613      	mov	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4413      	add	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4a1f      	ldr	r2, [pc, #124]	@ (8003ed8 <xTaskIncrementTick+0x164>)
 8003e5a:	441a      	add	r2, r3
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	3304      	adds	r3, #4
 8003e60:	4619      	mov	r1, r3
 8003e62:	4610      	mov	r0, r2
 8003e64:	f7ff fc04 	bl	8003670 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e6c:	4b1b      	ldr	r3, [pc, #108]	@ (8003edc <xTaskIncrementTick+0x168>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d3b9      	bcc.n	8003dea <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003e76:	2301      	movs	r3, #1
 8003e78:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e7a:	e7b6      	b.n	8003dea <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e7c:	4b17      	ldr	r3, [pc, #92]	@ (8003edc <xTaskIncrementTick+0x168>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e82:	4915      	ldr	r1, [pc, #84]	@ (8003ed8 <xTaskIncrementTick+0x164>)
 8003e84:	4613      	mov	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	440b      	add	r3, r1
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d901      	bls.n	8003e98 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003e94:	2301      	movs	r3, #1
 8003e96:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003e98:	4b11      	ldr	r3, [pc, #68]	@ (8003ee0 <xTaskIncrementTick+0x16c>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d007      	beq.n	8003eb0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	617b      	str	r3, [r7, #20]
 8003ea4:	e004      	b.n	8003eb0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8003ee4 <xTaskIncrementTick+0x170>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	3301      	adds	r3, #1
 8003eac:	4a0d      	ldr	r2, [pc, #52]	@ (8003ee4 <xTaskIncrementTick+0x170>)
 8003eae:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003eb0:	697b      	ldr	r3, [r7, #20]
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3718      	adds	r7, #24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	20000624 	.word	0x20000624
 8003ec0:	20000600 	.word	0x20000600
 8003ec4:	200005b4 	.word	0x200005b4
 8003ec8:	200005b8 	.word	0x200005b8
 8003ecc:	20000614 	.word	0x20000614
 8003ed0:	2000061c 	.word	0x2000061c
 8003ed4:	20000604 	.word	0x20000604
 8003ed8:	20000500 	.word	0x20000500
 8003edc:	200004fc 	.word	0x200004fc
 8003ee0:	20000610 	.word	0x20000610
 8003ee4:	2000060c 	.word	0x2000060c

08003ee8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b087      	sub	sp, #28
 8003eec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003eee:	4b2a      	ldr	r3, [pc, #168]	@ (8003f98 <vTaskSwitchContext+0xb0>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d003      	beq.n	8003efe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003ef6:	4b29      	ldr	r3, [pc, #164]	@ (8003f9c <vTaskSwitchContext+0xb4>)
 8003ef8:	2201      	movs	r2, #1
 8003efa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003efc:	e045      	b.n	8003f8a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8003efe:	4b27      	ldr	r3, [pc, #156]	@ (8003f9c <vTaskSwitchContext+0xb4>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f04:	4b26      	ldr	r3, [pc, #152]	@ (8003fa0 <vTaskSwitchContext+0xb8>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	fab3 f383 	clz	r3, r3
 8003f10:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003f12:	7afb      	ldrb	r3, [r7, #11]
 8003f14:	f1c3 031f 	rsb	r3, r3, #31
 8003f18:	617b      	str	r3, [r7, #20]
 8003f1a:	4922      	ldr	r1, [pc, #136]	@ (8003fa4 <vTaskSwitchContext+0xbc>)
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4413      	add	r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	440b      	add	r3, r1
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10b      	bne.n	8003f46 <vTaskSwitchContext+0x5e>
	__asm volatile
 8003f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f32:	f383 8811 	msr	BASEPRI, r3
 8003f36:	f3bf 8f6f 	isb	sy
 8003f3a:	f3bf 8f4f 	dsb	sy
 8003f3e:	607b      	str	r3, [r7, #4]
}
 8003f40:	bf00      	nop
 8003f42:	bf00      	nop
 8003f44:	e7fd      	b.n	8003f42 <vTaskSwitchContext+0x5a>
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4a14      	ldr	r2, [pc, #80]	@ (8003fa4 <vTaskSwitchContext+0xbc>)
 8003f52:	4413      	add	r3, r2
 8003f54:	613b      	str	r3, [r7, #16]
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	605a      	str	r2, [r3, #4]
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	685a      	ldr	r2, [r3, #4]
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	3308      	adds	r3, #8
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d104      	bne.n	8003f76 <vTaskSwitchContext+0x8e>
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	605a      	str	r2, [r3, #4]
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	4a0a      	ldr	r2, [pc, #40]	@ (8003fa8 <vTaskSwitchContext+0xc0>)
 8003f7e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003f80:	4b09      	ldr	r3, [pc, #36]	@ (8003fa8 <vTaskSwitchContext+0xc0>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	334c      	adds	r3, #76	@ 0x4c
 8003f86:	4a09      	ldr	r2, [pc, #36]	@ (8003fac <vTaskSwitchContext+0xc4>)
 8003f88:	6013      	str	r3, [r2, #0]
}
 8003f8a:	bf00      	nop
 8003f8c:	371c      	adds	r7, #28
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	20000624 	.word	0x20000624
 8003f9c:	20000610 	.word	0x20000610
 8003fa0:	20000604 	.word	0x20000604
 8003fa4:	20000500 	.word	0x20000500
 8003fa8:	200004fc 	.word	0x200004fc
 8003fac:	20000010 	.word	0x20000010

08003fb0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003fb8:	f000 f852 	bl	8004060 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003fbc:	4b06      	ldr	r3, [pc, #24]	@ (8003fd8 <prvIdleTask+0x28>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d9f9      	bls.n	8003fb8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003fc4:	4b05      	ldr	r3, [pc, #20]	@ (8003fdc <prvIdleTask+0x2c>)
 8003fc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	f3bf 8f4f 	dsb	sy
 8003fd0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003fd4:	e7f0      	b.n	8003fb8 <prvIdleTask+0x8>
 8003fd6:	bf00      	nop
 8003fd8:	20000500 	.word	0x20000500
 8003fdc:	e000ed04 	.word	0xe000ed04

08003fe0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	607b      	str	r3, [r7, #4]
 8003fea:	e00c      	b.n	8004006 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	4413      	add	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4a12      	ldr	r2, [pc, #72]	@ (8004040 <prvInitialiseTaskLists+0x60>)
 8003ff8:	4413      	add	r3, r2
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7ff fb0b 	bl	8003616 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3301      	adds	r3, #1
 8004004:	607b      	str	r3, [r7, #4]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b06      	cmp	r3, #6
 800400a:	d9ef      	bls.n	8003fec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800400c:	480d      	ldr	r0, [pc, #52]	@ (8004044 <prvInitialiseTaskLists+0x64>)
 800400e:	f7ff fb02 	bl	8003616 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004012:	480d      	ldr	r0, [pc, #52]	@ (8004048 <prvInitialiseTaskLists+0x68>)
 8004014:	f7ff faff 	bl	8003616 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004018:	480c      	ldr	r0, [pc, #48]	@ (800404c <prvInitialiseTaskLists+0x6c>)
 800401a:	f7ff fafc 	bl	8003616 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800401e:	480c      	ldr	r0, [pc, #48]	@ (8004050 <prvInitialiseTaskLists+0x70>)
 8004020:	f7ff faf9 	bl	8003616 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004024:	480b      	ldr	r0, [pc, #44]	@ (8004054 <prvInitialiseTaskLists+0x74>)
 8004026:	f7ff faf6 	bl	8003616 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800402a:	4b0b      	ldr	r3, [pc, #44]	@ (8004058 <prvInitialiseTaskLists+0x78>)
 800402c:	4a05      	ldr	r2, [pc, #20]	@ (8004044 <prvInitialiseTaskLists+0x64>)
 800402e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004030:	4b0a      	ldr	r3, [pc, #40]	@ (800405c <prvInitialiseTaskLists+0x7c>)
 8004032:	4a05      	ldr	r2, [pc, #20]	@ (8004048 <prvInitialiseTaskLists+0x68>)
 8004034:	601a      	str	r2, [r3, #0]
}
 8004036:	bf00      	nop
 8004038:	3708      	adds	r7, #8
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	20000500 	.word	0x20000500
 8004044:	2000058c 	.word	0x2000058c
 8004048:	200005a0 	.word	0x200005a0
 800404c:	200005bc 	.word	0x200005bc
 8004050:	200005d0 	.word	0x200005d0
 8004054:	200005e8 	.word	0x200005e8
 8004058:	200005b4 	.word	0x200005b4
 800405c:	200005b8 	.word	0x200005b8

08004060 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004066:	e019      	b.n	800409c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004068:	f000 fa16 	bl	8004498 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800406c:	4b10      	ldr	r3, [pc, #64]	@ (80040b0 <prvCheckTasksWaitingTermination+0x50>)
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	3304      	adds	r3, #4
 8004078:	4618      	mov	r0, r3
 800407a:	f7ff fb56 	bl	800372a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800407e:	4b0d      	ldr	r3, [pc, #52]	@ (80040b4 <prvCheckTasksWaitingTermination+0x54>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	3b01      	subs	r3, #1
 8004084:	4a0b      	ldr	r2, [pc, #44]	@ (80040b4 <prvCheckTasksWaitingTermination+0x54>)
 8004086:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004088:	4b0b      	ldr	r3, [pc, #44]	@ (80040b8 <prvCheckTasksWaitingTermination+0x58>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	3b01      	subs	r3, #1
 800408e:	4a0a      	ldr	r2, [pc, #40]	@ (80040b8 <prvCheckTasksWaitingTermination+0x58>)
 8004090:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004092:	f000 fa33 	bl	80044fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f810 	bl	80040bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800409c:	4b06      	ldr	r3, [pc, #24]	@ (80040b8 <prvCheckTasksWaitingTermination+0x58>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1e1      	bne.n	8004068 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80040a4:	bf00      	nop
 80040a6:	bf00      	nop
 80040a8:	3708      	adds	r7, #8
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	200005d0 	.word	0x200005d0
 80040b4:	200005fc 	.word	0x200005fc
 80040b8:	200005e4 	.word	0x200005e4

080040bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	334c      	adds	r3, #76	@ 0x4c
 80040c8:	4618      	mov	r0, r3
 80040ca:	f000 fcbb 	bl	8004a44 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d108      	bne.n	80040ea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040dc:	4618      	mov	r0, r3
 80040de:	f000 fb89 	bl	80047f4 <vPortFree>
				vPortFree( pxTCB );
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 fb86 	bl	80047f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80040e8:	e019      	b.n	800411e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d103      	bne.n	80040fc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 fb7d 	bl	80047f4 <vPortFree>
	}
 80040fa:	e010      	b.n	800411e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004102:	2b02      	cmp	r3, #2
 8004104:	d00b      	beq.n	800411e <prvDeleteTCB+0x62>
	__asm volatile
 8004106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800410a:	f383 8811 	msr	BASEPRI, r3
 800410e:	f3bf 8f6f 	isb	sy
 8004112:	f3bf 8f4f 	dsb	sy
 8004116:	60fb      	str	r3, [r7, #12]
}
 8004118:	bf00      	nop
 800411a:	bf00      	nop
 800411c:	e7fd      	b.n	800411a <prvDeleteTCB+0x5e>
	}
 800411e:	bf00      	nop
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
	...

08004128 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800412e:	4b0c      	ldr	r3, [pc, #48]	@ (8004160 <prvResetNextTaskUnblockTime+0x38>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d104      	bne.n	8004142 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004138:	4b0a      	ldr	r3, [pc, #40]	@ (8004164 <prvResetNextTaskUnblockTime+0x3c>)
 800413a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800413e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004140:	e008      	b.n	8004154 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004142:	4b07      	ldr	r3, [pc, #28]	@ (8004160 <prvResetNextTaskUnblockTime+0x38>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	4a04      	ldr	r2, [pc, #16]	@ (8004164 <prvResetNextTaskUnblockTime+0x3c>)
 8004152:	6013      	str	r3, [r2, #0]
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	200005b4 	.word	0x200005b4
 8004164:	2000061c 	.word	0x2000061c

08004168 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004172:	4b29      	ldr	r3, [pc, #164]	@ (8004218 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004178:	4b28      	ldr	r3, [pc, #160]	@ (800421c <prvAddCurrentTaskToDelayedList+0xb4>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	3304      	adds	r3, #4
 800417e:	4618      	mov	r0, r3
 8004180:	f7ff fad3 	bl	800372a <uxListRemove>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10b      	bne.n	80041a2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800418a:	4b24      	ldr	r3, [pc, #144]	@ (800421c <prvAddCurrentTaskToDelayedList+0xb4>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004190:	2201      	movs	r2, #1
 8004192:	fa02 f303 	lsl.w	r3, r2, r3
 8004196:	43da      	mvns	r2, r3
 8004198:	4b21      	ldr	r3, [pc, #132]	@ (8004220 <prvAddCurrentTaskToDelayedList+0xb8>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4013      	ands	r3, r2
 800419e:	4a20      	ldr	r2, [pc, #128]	@ (8004220 <prvAddCurrentTaskToDelayedList+0xb8>)
 80041a0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041a8:	d10a      	bne.n	80041c0 <prvAddCurrentTaskToDelayedList+0x58>
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d007      	beq.n	80041c0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041b0:	4b1a      	ldr	r3, [pc, #104]	@ (800421c <prvAddCurrentTaskToDelayedList+0xb4>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	3304      	adds	r3, #4
 80041b6:	4619      	mov	r1, r3
 80041b8:	481a      	ldr	r0, [pc, #104]	@ (8004224 <prvAddCurrentTaskToDelayedList+0xbc>)
 80041ba:	f7ff fa59 	bl	8003670 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80041be:	e026      	b.n	800420e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4413      	add	r3, r2
 80041c6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80041c8:	4b14      	ldr	r3, [pc, #80]	@ (800421c <prvAddCurrentTaskToDelayedList+0xb4>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68ba      	ldr	r2, [r7, #8]
 80041ce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d209      	bcs.n	80041ec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041d8:	4b13      	ldr	r3, [pc, #76]	@ (8004228 <prvAddCurrentTaskToDelayedList+0xc0>)
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	4b0f      	ldr	r3, [pc, #60]	@ (800421c <prvAddCurrentTaskToDelayedList+0xb4>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	3304      	adds	r3, #4
 80041e2:	4619      	mov	r1, r3
 80041e4:	4610      	mov	r0, r2
 80041e6:	f7ff fa67 	bl	80036b8 <vListInsert>
}
 80041ea:	e010      	b.n	800420e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041ec:	4b0f      	ldr	r3, [pc, #60]	@ (800422c <prvAddCurrentTaskToDelayedList+0xc4>)
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	4b0a      	ldr	r3, [pc, #40]	@ (800421c <prvAddCurrentTaskToDelayedList+0xb4>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	3304      	adds	r3, #4
 80041f6:	4619      	mov	r1, r3
 80041f8:	4610      	mov	r0, r2
 80041fa:	f7ff fa5d 	bl	80036b8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80041fe:	4b0c      	ldr	r3, [pc, #48]	@ (8004230 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	429a      	cmp	r2, r3
 8004206:	d202      	bcs.n	800420e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004208:	4a09      	ldr	r2, [pc, #36]	@ (8004230 <prvAddCurrentTaskToDelayedList+0xc8>)
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	6013      	str	r3, [r2, #0]
}
 800420e:	bf00      	nop
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	20000600 	.word	0x20000600
 800421c:	200004fc 	.word	0x200004fc
 8004220:	20000604 	.word	0x20000604
 8004224:	200005e8 	.word	0x200005e8
 8004228:	200005b8 	.word	0x200005b8
 800422c:	200005b4 	.word	0x200005b4
 8004230:	2000061c 	.word	0x2000061c

08004234 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	3b04      	subs	r3, #4
 8004244:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800424c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	3b04      	subs	r3, #4
 8004252:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	f023 0201 	bic.w	r2, r3, #1
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	3b04      	subs	r3, #4
 8004262:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004264:	4a0c      	ldr	r2, [pc, #48]	@ (8004298 <pxPortInitialiseStack+0x64>)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	3b14      	subs	r3, #20
 800426e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	3b04      	subs	r3, #4
 800427a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f06f 0202 	mvn.w	r2, #2
 8004282:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	3b20      	subs	r3, #32
 8004288:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800428a:	68fb      	ldr	r3, [r7, #12]
}
 800428c:	4618      	mov	r0, r3
 800428e:	3714      	adds	r7, #20
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr
 8004298:	0800429d 	.word	0x0800429d

0800429c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80042a2:	2300      	movs	r3, #0
 80042a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80042a6:	4b13      	ldr	r3, [pc, #76]	@ (80042f4 <prvTaskExitError+0x58>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80042ae:	d00b      	beq.n	80042c8 <prvTaskExitError+0x2c>
	__asm volatile
 80042b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042b4:	f383 8811 	msr	BASEPRI, r3
 80042b8:	f3bf 8f6f 	isb	sy
 80042bc:	f3bf 8f4f 	dsb	sy
 80042c0:	60fb      	str	r3, [r7, #12]
}
 80042c2:	bf00      	nop
 80042c4:	bf00      	nop
 80042c6:	e7fd      	b.n	80042c4 <prvTaskExitError+0x28>
	__asm volatile
 80042c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042cc:	f383 8811 	msr	BASEPRI, r3
 80042d0:	f3bf 8f6f 	isb	sy
 80042d4:	f3bf 8f4f 	dsb	sy
 80042d8:	60bb      	str	r3, [r7, #8]
}
 80042da:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80042dc:	bf00      	nop
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d0fc      	beq.n	80042de <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80042e4:	bf00      	nop
 80042e6:	bf00      	nop
 80042e8:	3714      	adds	r7, #20
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	2000000c 	.word	0x2000000c
	...

08004300 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004300:	4b07      	ldr	r3, [pc, #28]	@ (8004320 <pxCurrentTCBConst2>)
 8004302:	6819      	ldr	r1, [r3, #0]
 8004304:	6808      	ldr	r0, [r1, #0]
 8004306:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800430a:	f380 8809 	msr	PSP, r0
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	f04f 0000 	mov.w	r0, #0
 8004316:	f380 8811 	msr	BASEPRI, r0
 800431a:	4770      	bx	lr
 800431c:	f3af 8000 	nop.w

08004320 <pxCurrentTCBConst2>:
 8004320:	200004fc 	.word	0x200004fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004324:	bf00      	nop
 8004326:	bf00      	nop

08004328 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004328:	4808      	ldr	r0, [pc, #32]	@ (800434c <prvPortStartFirstTask+0x24>)
 800432a:	6800      	ldr	r0, [r0, #0]
 800432c:	6800      	ldr	r0, [r0, #0]
 800432e:	f380 8808 	msr	MSP, r0
 8004332:	f04f 0000 	mov.w	r0, #0
 8004336:	f380 8814 	msr	CONTROL, r0
 800433a:	b662      	cpsie	i
 800433c:	b661      	cpsie	f
 800433e:	f3bf 8f4f 	dsb	sy
 8004342:	f3bf 8f6f 	isb	sy
 8004346:	df00      	svc	0
 8004348:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800434a:	bf00      	nop
 800434c:	e000ed08 	.word	0xe000ed08

08004350 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004356:	4b47      	ldr	r3, [pc, #284]	@ (8004474 <xPortStartScheduler+0x124>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a47      	ldr	r2, [pc, #284]	@ (8004478 <xPortStartScheduler+0x128>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d10b      	bne.n	8004378 <xPortStartScheduler+0x28>
	__asm volatile
 8004360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004364:	f383 8811 	msr	BASEPRI, r3
 8004368:	f3bf 8f6f 	isb	sy
 800436c:	f3bf 8f4f 	dsb	sy
 8004370:	613b      	str	r3, [r7, #16]
}
 8004372:	bf00      	nop
 8004374:	bf00      	nop
 8004376:	e7fd      	b.n	8004374 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004378:	4b3e      	ldr	r3, [pc, #248]	@ (8004474 <xPortStartScheduler+0x124>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a3f      	ldr	r2, [pc, #252]	@ (800447c <xPortStartScheduler+0x12c>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d10b      	bne.n	800439a <xPortStartScheduler+0x4a>
	__asm volatile
 8004382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004386:	f383 8811 	msr	BASEPRI, r3
 800438a:	f3bf 8f6f 	isb	sy
 800438e:	f3bf 8f4f 	dsb	sy
 8004392:	60fb      	str	r3, [r7, #12]
}
 8004394:	bf00      	nop
 8004396:	bf00      	nop
 8004398:	e7fd      	b.n	8004396 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800439a:	4b39      	ldr	r3, [pc, #228]	@ (8004480 <xPortStartScheduler+0x130>)
 800439c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	22ff      	movs	r2, #255	@ 0xff
 80043aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80043b4:	78fb      	ldrb	r3, [r7, #3]
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80043bc:	b2da      	uxtb	r2, r3
 80043be:	4b31      	ldr	r3, [pc, #196]	@ (8004484 <xPortStartScheduler+0x134>)
 80043c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80043c2:	4b31      	ldr	r3, [pc, #196]	@ (8004488 <xPortStartScheduler+0x138>)
 80043c4:	2207      	movs	r2, #7
 80043c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043c8:	e009      	b.n	80043de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80043ca:	4b2f      	ldr	r3, [pc, #188]	@ (8004488 <xPortStartScheduler+0x138>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	3b01      	subs	r3, #1
 80043d0:	4a2d      	ldr	r2, [pc, #180]	@ (8004488 <xPortStartScheduler+0x138>)
 80043d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80043d4:	78fb      	ldrb	r3, [r7, #3]
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043de:	78fb      	ldrb	r3, [r7, #3]
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043e6:	2b80      	cmp	r3, #128	@ 0x80
 80043e8:	d0ef      	beq.n	80043ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80043ea:	4b27      	ldr	r3, [pc, #156]	@ (8004488 <xPortStartScheduler+0x138>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f1c3 0307 	rsb	r3, r3, #7
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	d00b      	beq.n	800440e <xPortStartScheduler+0xbe>
	__asm volatile
 80043f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043fa:	f383 8811 	msr	BASEPRI, r3
 80043fe:	f3bf 8f6f 	isb	sy
 8004402:	f3bf 8f4f 	dsb	sy
 8004406:	60bb      	str	r3, [r7, #8]
}
 8004408:	bf00      	nop
 800440a:	bf00      	nop
 800440c:	e7fd      	b.n	800440a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800440e:	4b1e      	ldr	r3, [pc, #120]	@ (8004488 <xPortStartScheduler+0x138>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	021b      	lsls	r3, r3, #8
 8004414:	4a1c      	ldr	r2, [pc, #112]	@ (8004488 <xPortStartScheduler+0x138>)
 8004416:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004418:	4b1b      	ldr	r3, [pc, #108]	@ (8004488 <xPortStartScheduler+0x138>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004420:	4a19      	ldr	r2, [pc, #100]	@ (8004488 <xPortStartScheduler+0x138>)
 8004422:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	b2da      	uxtb	r2, r3
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800442c:	4b17      	ldr	r3, [pc, #92]	@ (800448c <xPortStartScheduler+0x13c>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a16      	ldr	r2, [pc, #88]	@ (800448c <xPortStartScheduler+0x13c>)
 8004432:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004436:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004438:	4b14      	ldr	r3, [pc, #80]	@ (800448c <xPortStartScheduler+0x13c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a13      	ldr	r2, [pc, #76]	@ (800448c <xPortStartScheduler+0x13c>)
 800443e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004442:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004444:	f000 f8da 	bl	80045fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004448:	4b11      	ldr	r3, [pc, #68]	@ (8004490 <xPortStartScheduler+0x140>)
 800444a:	2200      	movs	r2, #0
 800444c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800444e:	f000 f8f9 	bl	8004644 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004452:	4b10      	ldr	r3, [pc, #64]	@ (8004494 <xPortStartScheduler+0x144>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a0f      	ldr	r2, [pc, #60]	@ (8004494 <xPortStartScheduler+0x144>)
 8004458:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800445c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800445e:	f7ff ff63 	bl	8004328 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004462:	f7ff fd41 	bl	8003ee8 <vTaskSwitchContext>
	prvTaskExitError();
 8004466:	f7ff ff19 	bl	800429c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3718      	adds	r7, #24
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	e000ed00 	.word	0xe000ed00
 8004478:	410fc271 	.word	0x410fc271
 800447c:	410fc270 	.word	0x410fc270
 8004480:	e000e400 	.word	0xe000e400
 8004484:	20000628 	.word	0x20000628
 8004488:	2000062c 	.word	0x2000062c
 800448c:	e000ed20 	.word	0xe000ed20
 8004490:	2000000c 	.word	0x2000000c
 8004494:	e000ef34 	.word	0xe000ef34

08004498 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
	__asm volatile
 800449e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044a2:	f383 8811 	msr	BASEPRI, r3
 80044a6:	f3bf 8f6f 	isb	sy
 80044aa:	f3bf 8f4f 	dsb	sy
 80044ae:	607b      	str	r3, [r7, #4]
}
 80044b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80044b2:	4b10      	ldr	r3, [pc, #64]	@ (80044f4 <vPortEnterCritical+0x5c>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	3301      	adds	r3, #1
 80044b8:	4a0e      	ldr	r2, [pc, #56]	@ (80044f4 <vPortEnterCritical+0x5c>)
 80044ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80044bc:	4b0d      	ldr	r3, [pc, #52]	@ (80044f4 <vPortEnterCritical+0x5c>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d110      	bne.n	80044e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80044c4:	4b0c      	ldr	r3, [pc, #48]	@ (80044f8 <vPortEnterCritical+0x60>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00b      	beq.n	80044e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80044ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044d2:	f383 8811 	msr	BASEPRI, r3
 80044d6:	f3bf 8f6f 	isb	sy
 80044da:	f3bf 8f4f 	dsb	sy
 80044de:	603b      	str	r3, [r7, #0]
}
 80044e0:	bf00      	nop
 80044e2:	bf00      	nop
 80044e4:	e7fd      	b.n	80044e2 <vPortEnterCritical+0x4a>
	}
}
 80044e6:	bf00      	nop
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	2000000c 	.word	0x2000000c
 80044f8:	e000ed04 	.word	0xe000ed04

080044fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004502:	4b12      	ldr	r3, [pc, #72]	@ (800454c <vPortExitCritical+0x50>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10b      	bne.n	8004522 <vPortExitCritical+0x26>
	__asm volatile
 800450a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800450e:	f383 8811 	msr	BASEPRI, r3
 8004512:	f3bf 8f6f 	isb	sy
 8004516:	f3bf 8f4f 	dsb	sy
 800451a:	607b      	str	r3, [r7, #4]
}
 800451c:	bf00      	nop
 800451e:	bf00      	nop
 8004520:	e7fd      	b.n	800451e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004522:	4b0a      	ldr	r3, [pc, #40]	@ (800454c <vPortExitCritical+0x50>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	3b01      	subs	r3, #1
 8004528:	4a08      	ldr	r2, [pc, #32]	@ (800454c <vPortExitCritical+0x50>)
 800452a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800452c:	4b07      	ldr	r3, [pc, #28]	@ (800454c <vPortExitCritical+0x50>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d105      	bne.n	8004540 <vPortExitCritical+0x44>
 8004534:	2300      	movs	r3, #0
 8004536:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800453e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr
 800454c:	2000000c 	.word	0x2000000c

08004550 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004550:	f3ef 8009 	mrs	r0, PSP
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	4b15      	ldr	r3, [pc, #84]	@ (80045b0 <pxCurrentTCBConst>)
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	f01e 0f10 	tst.w	lr, #16
 8004560:	bf08      	it	eq
 8004562:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004566:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800456a:	6010      	str	r0, [r2, #0]
 800456c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004570:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004574:	f380 8811 	msr	BASEPRI, r0
 8004578:	f3bf 8f4f 	dsb	sy
 800457c:	f3bf 8f6f 	isb	sy
 8004580:	f7ff fcb2 	bl	8003ee8 <vTaskSwitchContext>
 8004584:	f04f 0000 	mov.w	r0, #0
 8004588:	f380 8811 	msr	BASEPRI, r0
 800458c:	bc09      	pop	{r0, r3}
 800458e:	6819      	ldr	r1, [r3, #0]
 8004590:	6808      	ldr	r0, [r1, #0]
 8004592:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004596:	f01e 0f10 	tst.w	lr, #16
 800459a:	bf08      	it	eq
 800459c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80045a0:	f380 8809 	msr	PSP, r0
 80045a4:	f3bf 8f6f 	isb	sy
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	f3af 8000 	nop.w

080045b0 <pxCurrentTCBConst>:
 80045b0:	200004fc 	.word	0x200004fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80045b4:	bf00      	nop
 80045b6:	bf00      	nop

080045b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
	__asm volatile
 80045be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045c2:	f383 8811 	msr	BASEPRI, r3
 80045c6:	f3bf 8f6f 	isb	sy
 80045ca:	f3bf 8f4f 	dsb	sy
 80045ce:	607b      	str	r3, [r7, #4]
}
 80045d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80045d2:	f7ff fbcf 	bl	8003d74 <xTaskIncrementTick>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d003      	beq.n	80045e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80045dc:	4b06      	ldr	r3, [pc, #24]	@ (80045f8 <SysTick_Handler+0x40>)
 80045de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	2300      	movs	r3, #0
 80045e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	f383 8811 	msr	BASEPRI, r3
}
 80045ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80045f0:	bf00      	nop
 80045f2:	3708      	adds	r7, #8
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	e000ed04 	.word	0xe000ed04

080045fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004600:	4b0b      	ldr	r3, [pc, #44]	@ (8004630 <vPortSetupTimerInterrupt+0x34>)
 8004602:	2200      	movs	r2, #0
 8004604:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004606:	4b0b      	ldr	r3, [pc, #44]	@ (8004634 <vPortSetupTimerInterrupt+0x38>)
 8004608:	2200      	movs	r2, #0
 800460a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800460c:	4b0a      	ldr	r3, [pc, #40]	@ (8004638 <vPortSetupTimerInterrupt+0x3c>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a0a      	ldr	r2, [pc, #40]	@ (800463c <vPortSetupTimerInterrupt+0x40>)
 8004612:	fba2 2303 	umull	r2, r3, r2, r3
 8004616:	099b      	lsrs	r3, r3, #6
 8004618:	4a09      	ldr	r2, [pc, #36]	@ (8004640 <vPortSetupTimerInterrupt+0x44>)
 800461a:	3b01      	subs	r3, #1
 800461c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800461e:	4b04      	ldr	r3, [pc, #16]	@ (8004630 <vPortSetupTimerInterrupt+0x34>)
 8004620:	2207      	movs	r2, #7
 8004622:	601a      	str	r2, [r3, #0]
}
 8004624:	bf00      	nop
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	e000e010 	.word	0xe000e010
 8004634:	e000e018 	.word	0xe000e018
 8004638:	20000000 	.word	0x20000000
 800463c:	10624dd3 	.word	0x10624dd3
 8004640:	e000e014 	.word	0xe000e014

08004644 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004644:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004654 <vPortEnableVFP+0x10>
 8004648:	6801      	ldr	r1, [r0, #0]
 800464a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800464e:	6001      	str	r1, [r0, #0]
 8004650:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004652:	bf00      	nop
 8004654:	e000ed88 	.word	0xe000ed88

08004658 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b08a      	sub	sp, #40	@ 0x28
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004660:	2300      	movs	r3, #0
 8004662:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004664:	f7ff fada 	bl	8003c1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004668:	4b5c      	ldr	r3, [pc, #368]	@ (80047dc <pvPortMalloc+0x184>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d101      	bne.n	8004674 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004670:	f000 f924 	bl	80048bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004674:	4b5a      	ldr	r3, [pc, #360]	@ (80047e0 <pvPortMalloc+0x188>)
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4013      	ands	r3, r2
 800467c:	2b00      	cmp	r3, #0
 800467e:	f040 8095 	bne.w	80047ac <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d01e      	beq.n	80046c6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004688:	2208      	movs	r2, #8
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4413      	add	r3, r2
 800468e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f003 0307 	and.w	r3, r3, #7
 8004696:	2b00      	cmp	r3, #0
 8004698:	d015      	beq.n	80046c6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f023 0307 	bic.w	r3, r3, #7
 80046a0:	3308      	adds	r3, #8
 80046a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f003 0307 	and.w	r3, r3, #7
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00b      	beq.n	80046c6 <pvPortMalloc+0x6e>
	__asm volatile
 80046ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046b2:	f383 8811 	msr	BASEPRI, r3
 80046b6:	f3bf 8f6f 	isb	sy
 80046ba:	f3bf 8f4f 	dsb	sy
 80046be:	617b      	str	r3, [r7, #20]
}
 80046c0:	bf00      	nop
 80046c2:	bf00      	nop
 80046c4:	e7fd      	b.n	80046c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d06f      	beq.n	80047ac <pvPortMalloc+0x154>
 80046cc:	4b45      	ldr	r3, [pc, #276]	@ (80047e4 <pvPortMalloc+0x18c>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d86a      	bhi.n	80047ac <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80046d6:	4b44      	ldr	r3, [pc, #272]	@ (80047e8 <pvPortMalloc+0x190>)
 80046d8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80046da:	4b43      	ldr	r3, [pc, #268]	@ (80047e8 <pvPortMalloc+0x190>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046e0:	e004      	b.n	80046ec <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80046e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80046e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d903      	bls.n	80046fe <pvPortMalloc+0xa6>
 80046f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1f1      	bne.n	80046e2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80046fe:	4b37      	ldr	r3, [pc, #220]	@ (80047dc <pvPortMalloc+0x184>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004704:	429a      	cmp	r2, r3
 8004706:	d051      	beq.n	80047ac <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004708:	6a3b      	ldr	r3, [r7, #32]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2208      	movs	r2, #8
 800470e:	4413      	add	r3, r2
 8004710:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	6a3b      	ldr	r3, [r7, #32]
 8004718:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800471a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800471c:	685a      	ldr	r2, [r3, #4]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	1ad2      	subs	r2, r2, r3
 8004722:	2308      	movs	r3, #8
 8004724:	005b      	lsls	r3, r3, #1
 8004726:	429a      	cmp	r2, r3
 8004728:	d920      	bls.n	800476c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800472a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4413      	add	r3, r2
 8004730:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	f003 0307 	and.w	r3, r3, #7
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00b      	beq.n	8004754 <pvPortMalloc+0xfc>
	__asm volatile
 800473c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004740:	f383 8811 	msr	BASEPRI, r3
 8004744:	f3bf 8f6f 	isb	sy
 8004748:	f3bf 8f4f 	dsb	sy
 800474c:	613b      	str	r3, [r7, #16]
}
 800474e:	bf00      	nop
 8004750:	bf00      	nop
 8004752:	e7fd      	b.n	8004750 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004756:	685a      	ldr	r2, [r3, #4]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	1ad2      	subs	r2, r2, r3
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004766:	69b8      	ldr	r0, [r7, #24]
 8004768:	f000 f90a 	bl	8004980 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800476c:	4b1d      	ldr	r3, [pc, #116]	@ (80047e4 <pvPortMalloc+0x18c>)
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	4a1b      	ldr	r2, [pc, #108]	@ (80047e4 <pvPortMalloc+0x18c>)
 8004778:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800477a:	4b1a      	ldr	r3, [pc, #104]	@ (80047e4 <pvPortMalloc+0x18c>)
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	4b1b      	ldr	r3, [pc, #108]	@ (80047ec <pvPortMalloc+0x194>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	429a      	cmp	r2, r3
 8004784:	d203      	bcs.n	800478e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004786:	4b17      	ldr	r3, [pc, #92]	@ (80047e4 <pvPortMalloc+0x18c>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a18      	ldr	r2, [pc, #96]	@ (80047ec <pvPortMalloc+0x194>)
 800478c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800478e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004790:	685a      	ldr	r2, [r3, #4]
 8004792:	4b13      	ldr	r3, [pc, #76]	@ (80047e0 <pvPortMalloc+0x188>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	431a      	orrs	r2, r3
 8004798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800479c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479e:	2200      	movs	r2, #0
 80047a0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80047a2:	4b13      	ldr	r3, [pc, #76]	@ (80047f0 <pvPortMalloc+0x198>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	3301      	adds	r3, #1
 80047a8:	4a11      	ldr	r2, [pc, #68]	@ (80047f0 <pvPortMalloc+0x198>)
 80047aa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80047ac:	f7ff fa44 	bl	8003c38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	f003 0307 	and.w	r3, r3, #7
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00b      	beq.n	80047d2 <pvPortMalloc+0x17a>
	__asm volatile
 80047ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047be:	f383 8811 	msr	BASEPRI, r3
 80047c2:	f3bf 8f6f 	isb	sy
 80047c6:	f3bf 8f4f 	dsb	sy
 80047ca:	60fb      	str	r3, [r7, #12]
}
 80047cc:	bf00      	nop
 80047ce:	bf00      	nop
 80047d0:	e7fd      	b.n	80047ce <pvPortMalloc+0x176>
	return pvReturn;
 80047d2:	69fb      	ldr	r3, [r7, #28]
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3728      	adds	r7, #40	@ 0x28
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	20004238 	.word	0x20004238
 80047e0:	2000424c 	.word	0x2000424c
 80047e4:	2000423c 	.word	0x2000423c
 80047e8:	20004230 	.word	0x20004230
 80047ec:	20004240 	.word	0x20004240
 80047f0:	20004244 	.word	0x20004244

080047f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b086      	sub	sp, #24
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d04f      	beq.n	80048a6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004806:	2308      	movs	r3, #8
 8004808:	425b      	negs	r3, r3
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	4413      	add	r3, r2
 800480e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	4b25      	ldr	r3, [pc, #148]	@ (80048b0 <vPortFree+0xbc>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4013      	ands	r3, r2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10b      	bne.n	800483a <vPortFree+0x46>
	__asm volatile
 8004822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004826:	f383 8811 	msr	BASEPRI, r3
 800482a:	f3bf 8f6f 	isb	sy
 800482e:	f3bf 8f4f 	dsb	sy
 8004832:	60fb      	str	r3, [r7, #12]
}
 8004834:	bf00      	nop
 8004836:	bf00      	nop
 8004838:	e7fd      	b.n	8004836 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00b      	beq.n	800485a <vPortFree+0x66>
	__asm volatile
 8004842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004846:	f383 8811 	msr	BASEPRI, r3
 800484a:	f3bf 8f6f 	isb	sy
 800484e:	f3bf 8f4f 	dsb	sy
 8004852:	60bb      	str	r3, [r7, #8]
}
 8004854:	bf00      	nop
 8004856:	bf00      	nop
 8004858:	e7fd      	b.n	8004856 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	685a      	ldr	r2, [r3, #4]
 800485e:	4b14      	ldr	r3, [pc, #80]	@ (80048b0 <vPortFree+0xbc>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4013      	ands	r3, r2
 8004864:	2b00      	cmp	r3, #0
 8004866:	d01e      	beq.n	80048a6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d11a      	bne.n	80048a6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	685a      	ldr	r2, [r3, #4]
 8004874:	4b0e      	ldr	r3, [pc, #56]	@ (80048b0 <vPortFree+0xbc>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	43db      	mvns	r3, r3
 800487a:	401a      	ands	r2, r3
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004880:	f7ff f9cc 	bl	8003c1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	4b0a      	ldr	r3, [pc, #40]	@ (80048b4 <vPortFree+0xc0>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4413      	add	r3, r2
 800488e:	4a09      	ldr	r2, [pc, #36]	@ (80048b4 <vPortFree+0xc0>)
 8004890:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004892:	6938      	ldr	r0, [r7, #16]
 8004894:	f000 f874 	bl	8004980 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004898:	4b07      	ldr	r3, [pc, #28]	@ (80048b8 <vPortFree+0xc4>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	3301      	adds	r3, #1
 800489e:	4a06      	ldr	r2, [pc, #24]	@ (80048b8 <vPortFree+0xc4>)
 80048a0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80048a2:	f7ff f9c9 	bl	8003c38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80048a6:	bf00      	nop
 80048a8:	3718      	adds	r7, #24
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	2000424c 	.word	0x2000424c
 80048b4:	2000423c 	.word	0x2000423c
 80048b8:	20004248 	.word	0x20004248

080048bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80048c2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80048c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80048c8:	4b27      	ldr	r3, [pc, #156]	@ (8004968 <prvHeapInit+0xac>)
 80048ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f003 0307 	and.w	r3, r3, #7
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00c      	beq.n	80048f0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	3307      	adds	r3, #7
 80048da:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f023 0307 	bic.w	r3, r3, #7
 80048e2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	4a1f      	ldr	r2, [pc, #124]	@ (8004968 <prvHeapInit+0xac>)
 80048ec:	4413      	add	r3, r2
 80048ee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80048f4:	4a1d      	ldr	r2, [pc, #116]	@ (800496c <prvHeapInit+0xb0>)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80048fa:	4b1c      	ldr	r3, [pc, #112]	@ (800496c <prvHeapInit+0xb0>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	4413      	add	r3, r2
 8004906:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004908:	2208      	movs	r2, #8
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	1a9b      	subs	r3, r3, r2
 800490e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f023 0307 	bic.w	r3, r3, #7
 8004916:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	4a15      	ldr	r2, [pc, #84]	@ (8004970 <prvHeapInit+0xb4>)
 800491c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800491e:	4b14      	ldr	r3, [pc, #80]	@ (8004970 <prvHeapInit+0xb4>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2200      	movs	r2, #0
 8004924:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004926:	4b12      	ldr	r3, [pc, #72]	@ (8004970 <prvHeapInit+0xb4>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2200      	movs	r2, #0
 800492c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	1ad2      	subs	r2, r2, r3
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800493c:	4b0c      	ldr	r3, [pc, #48]	@ (8004970 <prvHeapInit+0xb4>)
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	4a0a      	ldr	r2, [pc, #40]	@ (8004974 <prvHeapInit+0xb8>)
 800494a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	4a09      	ldr	r2, [pc, #36]	@ (8004978 <prvHeapInit+0xbc>)
 8004952:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004954:	4b09      	ldr	r3, [pc, #36]	@ (800497c <prvHeapInit+0xc0>)
 8004956:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800495a:	601a      	str	r2, [r3, #0]
}
 800495c:	bf00      	nop
 800495e:	3714      	adds	r7, #20
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr
 8004968:	20000630 	.word	0x20000630
 800496c:	20004230 	.word	0x20004230
 8004970:	20004238 	.word	0x20004238
 8004974:	20004240 	.word	0x20004240
 8004978:	2000423c 	.word	0x2000423c
 800497c:	2000424c 	.word	0x2000424c

08004980 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004988:	4b28      	ldr	r3, [pc, #160]	@ (8004a2c <prvInsertBlockIntoFreeList+0xac>)
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	e002      	b.n	8004994 <prvInsertBlockIntoFreeList+0x14>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	60fb      	str	r3, [r7, #12]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	429a      	cmp	r2, r3
 800499c:	d8f7      	bhi.n	800498e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	68ba      	ldr	r2, [r7, #8]
 80049a8:	4413      	add	r3, r2
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d108      	bne.n	80049c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	685a      	ldr	r2, [r3, #4]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	441a      	add	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	441a      	add	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d118      	bne.n	8004a08 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	4b15      	ldr	r3, [pc, #84]	@ (8004a30 <prvInsertBlockIntoFreeList+0xb0>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d00d      	beq.n	80049fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685a      	ldr	r2, [r3, #4]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	441a      	add	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	601a      	str	r2, [r3, #0]
 80049fc:	e008      	b.n	8004a10 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80049fe:	4b0c      	ldr	r3, [pc, #48]	@ (8004a30 <prvInsertBlockIntoFreeList+0xb0>)
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	601a      	str	r2, [r3, #0]
 8004a06:	e003      	b.n	8004a10 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d002      	beq.n	8004a1e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a1e:	bf00      	nop
 8004a20:	3714      	adds	r7, #20
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	20004230 	.word	0x20004230
 8004a30:	20004238 	.word	0x20004238

08004a34 <memset>:
 8004a34:	4402      	add	r2, r0
 8004a36:	4603      	mov	r3, r0
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d100      	bne.n	8004a3e <memset+0xa>
 8004a3c:	4770      	bx	lr
 8004a3e:	f803 1b01 	strb.w	r1, [r3], #1
 8004a42:	e7f9      	b.n	8004a38 <memset+0x4>

08004a44 <_reclaim_reent>:
 8004a44:	4b29      	ldr	r3, [pc, #164]	@ (8004aec <_reclaim_reent+0xa8>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4283      	cmp	r3, r0
 8004a4a:	b570      	push	{r4, r5, r6, lr}
 8004a4c:	4604      	mov	r4, r0
 8004a4e:	d04b      	beq.n	8004ae8 <_reclaim_reent+0xa4>
 8004a50:	69c3      	ldr	r3, [r0, #28]
 8004a52:	b1ab      	cbz	r3, 8004a80 <_reclaim_reent+0x3c>
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	b16b      	cbz	r3, 8004a74 <_reclaim_reent+0x30>
 8004a58:	2500      	movs	r5, #0
 8004a5a:	69e3      	ldr	r3, [r4, #28]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	5959      	ldr	r1, [r3, r5]
 8004a60:	2900      	cmp	r1, #0
 8004a62:	d13b      	bne.n	8004adc <_reclaim_reent+0x98>
 8004a64:	3504      	adds	r5, #4
 8004a66:	2d80      	cmp	r5, #128	@ 0x80
 8004a68:	d1f7      	bne.n	8004a5a <_reclaim_reent+0x16>
 8004a6a:	69e3      	ldr	r3, [r4, #28]
 8004a6c:	4620      	mov	r0, r4
 8004a6e:	68d9      	ldr	r1, [r3, #12]
 8004a70:	f000 f864 	bl	8004b3c <_free_r>
 8004a74:	69e3      	ldr	r3, [r4, #28]
 8004a76:	6819      	ldr	r1, [r3, #0]
 8004a78:	b111      	cbz	r1, 8004a80 <_reclaim_reent+0x3c>
 8004a7a:	4620      	mov	r0, r4
 8004a7c:	f000 f85e 	bl	8004b3c <_free_r>
 8004a80:	6961      	ldr	r1, [r4, #20]
 8004a82:	b111      	cbz	r1, 8004a8a <_reclaim_reent+0x46>
 8004a84:	4620      	mov	r0, r4
 8004a86:	f000 f859 	bl	8004b3c <_free_r>
 8004a8a:	69e1      	ldr	r1, [r4, #28]
 8004a8c:	b111      	cbz	r1, 8004a94 <_reclaim_reent+0x50>
 8004a8e:	4620      	mov	r0, r4
 8004a90:	f000 f854 	bl	8004b3c <_free_r>
 8004a94:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004a96:	b111      	cbz	r1, 8004a9e <_reclaim_reent+0x5a>
 8004a98:	4620      	mov	r0, r4
 8004a9a:	f000 f84f 	bl	8004b3c <_free_r>
 8004a9e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004aa0:	b111      	cbz	r1, 8004aa8 <_reclaim_reent+0x64>
 8004aa2:	4620      	mov	r0, r4
 8004aa4:	f000 f84a 	bl	8004b3c <_free_r>
 8004aa8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004aaa:	b111      	cbz	r1, 8004ab2 <_reclaim_reent+0x6e>
 8004aac:	4620      	mov	r0, r4
 8004aae:	f000 f845 	bl	8004b3c <_free_r>
 8004ab2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004ab4:	b111      	cbz	r1, 8004abc <_reclaim_reent+0x78>
 8004ab6:	4620      	mov	r0, r4
 8004ab8:	f000 f840 	bl	8004b3c <_free_r>
 8004abc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004abe:	b111      	cbz	r1, 8004ac6 <_reclaim_reent+0x82>
 8004ac0:	4620      	mov	r0, r4
 8004ac2:	f000 f83b 	bl	8004b3c <_free_r>
 8004ac6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004ac8:	b111      	cbz	r1, 8004ad0 <_reclaim_reent+0x8c>
 8004aca:	4620      	mov	r0, r4
 8004acc:	f000 f836 	bl	8004b3c <_free_r>
 8004ad0:	6a23      	ldr	r3, [r4, #32]
 8004ad2:	b14b      	cbz	r3, 8004ae8 <_reclaim_reent+0xa4>
 8004ad4:	4620      	mov	r0, r4
 8004ad6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004ada:	4718      	bx	r3
 8004adc:	680e      	ldr	r6, [r1, #0]
 8004ade:	4620      	mov	r0, r4
 8004ae0:	f000 f82c 	bl	8004b3c <_free_r>
 8004ae4:	4631      	mov	r1, r6
 8004ae6:	e7bb      	b.n	8004a60 <_reclaim_reent+0x1c>
 8004ae8:	bd70      	pop	{r4, r5, r6, pc}
 8004aea:	bf00      	nop
 8004aec:	20000010 	.word	0x20000010

08004af0 <__libc_init_array>:
 8004af0:	b570      	push	{r4, r5, r6, lr}
 8004af2:	4d0d      	ldr	r5, [pc, #52]	@ (8004b28 <__libc_init_array+0x38>)
 8004af4:	4c0d      	ldr	r4, [pc, #52]	@ (8004b2c <__libc_init_array+0x3c>)
 8004af6:	1b64      	subs	r4, r4, r5
 8004af8:	10a4      	asrs	r4, r4, #2
 8004afa:	2600      	movs	r6, #0
 8004afc:	42a6      	cmp	r6, r4
 8004afe:	d109      	bne.n	8004b14 <__libc_init_array+0x24>
 8004b00:	4d0b      	ldr	r5, [pc, #44]	@ (8004b30 <__libc_init_array+0x40>)
 8004b02:	4c0c      	ldr	r4, [pc, #48]	@ (8004b34 <__libc_init_array+0x44>)
 8004b04:	f000 f870 	bl	8004be8 <_init>
 8004b08:	1b64      	subs	r4, r4, r5
 8004b0a:	10a4      	asrs	r4, r4, #2
 8004b0c:	2600      	movs	r6, #0
 8004b0e:	42a6      	cmp	r6, r4
 8004b10:	d105      	bne.n	8004b1e <__libc_init_array+0x2e>
 8004b12:	bd70      	pop	{r4, r5, r6, pc}
 8004b14:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b18:	4798      	blx	r3
 8004b1a:	3601      	adds	r6, #1
 8004b1c:	e7ee      	b.n	8004afc <__libc_init_array+0xc>
 8004b1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b22:	4798      	blx	r3
 8004b24:	3601      	adds	r6, #1
 8004b26:	e7f2      	b.n	8004b0e <__libc_init_array+0x1e>
 8004b28:	08004cf4 	.word	0x08004cf4
 8004b2c:	08004cf4 	.word	0x08004cf4
 8004b30:	08004cf4 	.word	0x08004cf4
 8004b34:	08004cf8 	.word	0x08004cf8

08004b38 <__retarget_lock_acquire_recursive>:
 8004b38:	4770      	bx	lr

08004b3a <__retarget_lock_release_recursive>:
 8004b3a:	4770      	bx	lr

08004b3c <_free_r>:
 8004b3c:	b538      	push	{r3, r4, r5, lr}
 8004b3e:	4605      	mov	r5, r0
 8004b40:	2900      	cmp	r1, #0
 8004b42:	d041      	beq.n	8004bc8 <_free_r+0x8c>
 8004b44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b48:	1f0c      	subs	r4, r1, #4
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	bfb8      	it	lt
 8004b4e:	18e4      	addlt	r4, r4, r3
 8004b50:	f000 f83e 	bl	8004bd0 <__malloc_lock>
 8004b54:	4a1d      	ldr	r2, [pc, #116]	@ (8004bcc <_free_r+0x90>)
 8004b56:	6813      	ldr	r3, [r2, #0]
 8004b58:	b933      	cbnz	r3, 8004b68 <_free_r+0x2c>
 8004b5a:	6063      	str	r3, [r4, #4]
 8004b5c:	6014      	str	r4, [r2, #0]
 8004b5e:	4628      	mov	r0, r5
 8004b60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b64:	f000 b83a 	b.w	8004bdc <__malloc_unlock>
 8004b68:	42a3      	cmp	r3, r4
 8004b6a:	d908      	bls.n	8004b7e <_free_r+0x42>
 8004b6c:	6820      	ldr	r0, [r4, #0]
 8004b6e:	1821      	adds	r1, r4, r0
 8004b70:	428b      	cmp	r3, r1
 8004b72:	bf01      	itttt	eq
 8004b74:	6819      	ldreq	r1, [r3, #0]
 8004b76:	685b      	ldreq	r3, [r3, #4]
 8004b78:	1809      	addeq	r1, r1, r0
 8004b7a:	6021      	streq	r1, [r4, #0]
 8004b7c:	e7ed      	b.n	8004b5a <_free_r+0x1e>
 8004b7e:	461a      	mov	r2, r3
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	b10b      	cbz	r3, 8004b88 <_free_r+0x4c>
 8004b84:	42a3      	cmp	r3, r4
 8004b86:	d9fa      	bls.n	8004b7e <_free_r+0x42>
 8004b88:	6811      	ldr	r1, [r2, #0]
 8004b8a:	1850      	adds	r0, r2, r1
 8004b8c:	42a0      	cmp	r0, r4
 8004b8e:	d10b      	bne.n	8004ba8 <_free_r+0x6c>
 8004b90:	6820      	ldr	r0, [r4, #0]
 8004b92:	4401      	add	r1, r0
 8004b94:	1850      	adds	r0, r2, r1
 8004b96:	4283      	cmp	r3, r0
 8004b98:	6011      	str	r1, [r2, #0]
 8004b9a:	d1e0      	bne.n	8004b5e <_free_r+0x22>
 8004b9c:	6818      	ldr	r0, [r3, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	6053      	str	r3, [r2, #4]
 8004ba2:	4408      	add	r0, r1
 8004ba4:	6010      	str	r0, [r2, #0]
 8004ba6:	e7da      	b.n	8004b5e <_free_r+0x22>
 8004ba8:	d902      	bls.n	8004bb0 <_free_r+0x74>
 8004baa:	230c      	movs	r3, #12
 8004bac:	602b      	str	r3, [r5, #0]
 8004bae:	e7d6      	b.n	8004b5e <_free_r+0x22>
 8004bb0:	6820      	ldr	r0, [r4, #0]
 8004bb2:	1821      	adds	r1, r4, r0
 8004bb4:	428b      	cmp	r3, r1
 8004bb6:	bf04      	itt	eq
 8004bb8:	6819      	ldreq	r1, [r3, #0]
 8004bba:	685b      	ldreq	r3, [r3, #4]
 8004bbc:	6063      	str	r3, [r4, #4]
 8004bbe:	bf04      	itt	eq
 8004bc0:	1809      	addeq	r1, r1, r0
 8004bc2:	6021      	streq	r1, [r4, #0]
 8004bc4:	6054      	str	r4, [r2, #4]
 8004bc6:	e7ca      	b.n	8004b5e <_free_r+0x22>
 8004bc8:	bd38      	pop	{r3, r4, r5, pc}
 8004bca:	bf00      	nop
 8004bcc:	2000438c 	.word	0x2000438c

08004bd0 <__malloc_lock>:
 8004bd0:	4801      	ldr	r0, [pc, #4]	@ (8004bd8 <__malloc_lock+0x8>)
 8004bd2:	f7ff bfb1 	b.w	8004b38 <__retarget_lock_acquire_recursive>
 8004bd6:	bf00      	nop
 8004bd8:	20004388 	.word	0x20004388

08004bdc <__malloc_unlock>:
 8004bdc:	4801      	ldr	r0, [pc, #4]	@ (8004be4 <__malloc_unlock+0x8>)
 8004bde:	f7ff bfac 	b.w	8004b3a <__retarget_lock_release_recursive>
 8004be2:	bf00      	nop
 8004be4:	20004388 	.word	0x20004388

08004be8 <_init>:
 8004be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bea:	bf00      	nop
 8004bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bee:	bc08      	pop	{r3}
 8004bf0:	469e      	mov	lr, r3
 8004bf2:	4770      	bx	lr

08004bf4 <_fini>:
 8004bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bf6:	bf00      	nop
 8004bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bfa:	bc08      	pop	{r3}
 8004bfc:	469e      	mov	lr, r3
 8004bfe:	4770      	bx	lr
