
Sonya Tech Tests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007084  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08007194  08007194  00008194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800724c  0800724c  00009064  2**0
                  CONTENTS
  4 .ARM          00000000  0800724c  0800724c  00009064  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800724c  0800724c  00009064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800724c  0800724c  0000824c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007250  08007250  00008250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08007254  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001330  20000064  080072b8  00009064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001394  080072b8  00009394  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000145bc  00000000  00000000  0000908d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031a1  00000000  00000000  0001d649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001280  00000000  00000000  000207f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e60  00000000  00000000  00021a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a016  00000000  00000000  000228d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015b38  00000000  00000000  0003c8e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095efd  00000000  00000000  0005241e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e831b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053e0  00000000  00000000  000e8360  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000ed740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000064 	.word	0x20000064
 800012c:	00000000 	.word	0x00000000
 8000130:	0800717c 	.word	0x0800717c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000068 	.word	0x20000068
 800014c:	0800717c 	.word	0x0800717c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2f>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a70:	bf24      	itt	cs
 8000a72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a7a:	d90d      	bls.n	8000a98 <__aeabi_d2f+0x30>
 8000a7c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a88:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a90:	bf08      	it	eq
 8000a92:	f020 0001 	biceq.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a9c:	d121      	bne.n	8000ae2 <__aeabi_d2f+0x7a>
 8000a9e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aa2:	bfbc      	itt	lt
 8000aa4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000aa8:	4770      	bxlt	lr
 8000aaa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab2:	f1c2 0218 	rsb	r2, r2, #24
 8000ab6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000abe:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac2:	bf18      	it	ne
 8000ac4:	f040 0001 	orrne.w	r0, r0, #1
 8000ac8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000acc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad4:	ea40 000c 	orr.w	r0, r0, ip
 8000ad8:	fa23 f302 	lsr.w	r3, r3, r2
 8000adc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae0:	e7cc      	b.n	8000a7c <__aeabi_d2f+0x14>
 8000ae2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ae6:	d107      	bne.n	8000af8 <__aeabi_d2f+0x90>
 8000ae8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aec:	bf1e      	ittt	ne
 8000aee:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000af2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000af6:	4770      	bxne	lr
 8000af8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000afc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b00:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_frsub>:
 8000b08:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b0c:	e002      	b.n	8000b14 <__addsf3>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_fsub>:
 8000b10:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b14 <__addsf3>:
 8000b14:	0042      	lsls	r2, r0, #1
 8000b16:	bf1f      	itttt	ne
 8000b18:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b1c:	ea92 0f03 	teqne	r2, r3
 8000b20:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b24:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b28:	d06a      	beq.n	8000c00 <__addsf3+0xec>
 8000b2a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b2e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b32:	bfc1      	itttt	gt
 8000b34:	18d2      	addgt	r2, r2, r3
 8000b36:	4041      	eorgt	r1, r0
 8000b38:	4048      	eorgt	r0, r1
 8000b3a:	4041      	eorgt	r1, r0
 8000b3c:	bfb8      	it	lt
 8000b3e:	425b      	neglt	r3, r3
 8000b40:	2b19      	cmp	r3, #25
 8000b42:	bf88      	it	hi
 8000b44:	4770      	bxhi	lr
 8000b46:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b4a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b4e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b5a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b5e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4249      	negne	r1, r1
 8000b66:	ea92 0f03 	teq	r2, r3
 8000b6a:	d03f      	beq.n	8000bec <__addsf3+0xd8>
 8000b6c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b70:	fa41 fc03 	asr.w	ip, r1, r3
 8000b74:	eb10 000c 	adds.w	r0, r0, ip
 8000b78:	f1c3 0320 	rsb	r3, r3, #32
 8000b7c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b80:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b84:	d502      	bpl.n	8000b8c <__addsf3+0x78>
 8000b86:	4249      	negs	r1, r1
 8000b88:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b8c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b90:	d313      	bcc.n	8000bba <__addsf3+0xa6>
 8000b92:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b96:	d306      	bcc.n	8000ba6 <__addsf3+0x92>
 8000b98:	0840      	lsrs	r0, r0, #1
 8000b9a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b9e:	f102 0201 	add.w	r2, r2, #1
 8000ba2:	2afe      	cmp	r2, #254	@ 0xfe
 8000ba4:	d251      	bcs.n	8000c4a <__addsf3+0x136>
 8000ba6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000baa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bae:	bf08      	it	eq
 8000bb0:	f020 0001 	biceq.w	r0, r0, #1
 8000bb4:	ea40 0003 	orr.w	r0, r0, r3
 8000bb8:	4770      	bx	lr
 8000bba:	0049      	lsls	r1, r1, #1
 8000bbc:	eb40 0000 	adc.w	r0, r0, r0
 8000bc0:	3a01      	subs	r2, #1
 8000bc2:	bf28      	it	cs
 8000bc4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bc8:	d2ed      	bcs.n	8000ba6 <__addsf3+0x92>
 8000bca:	fab0 fc80 	clz	ip, r0
 8000bce:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bd2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bd6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bda:	bfaa      	itet	ge
 8000bdc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000be0:	4252      	neglt	r2, r2
 8000be2:	4318      	orrge	r0, r3
 8000be4:	bfbc      	itt	lt
 8000be6:	40d0      	lsrlt	r0, r2
 8000be8:	4318      	orrlt	r0, r3
 8000bea:	4770      	bx	lr
 8000bec:	f092 0f00 	teq	r2, #0
 8000bf0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bf4:	bf06      	itte	eq
 8000bf6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bfa:	3201      	addeq	r2, #1
 8000bfc:	3b01      	subne	r3, #1
 8000bfe:	e7b5      	b.n	8000b6c <__addsf3+0x58>
 8000c00:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c08:	bf18      	it	ne
 8000c0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c0e:	d021      	beq.n	8000c54 <__addsf3+0x140>
 8000c10:	ea92 0f03 	teq	r2, r3
 8000c14:	d004      	beq.n	8000c20 <__addsf3+0x10c>
 8000c16:	f092 0f00 	teq	r2, #0
 8000c1a:	bf08      	it	eq
 8000c1c:	4608      	moveq	r0, r1
 8000c1e:	4770      	bx	lr
 8000c20:	ea90 0f01 	teq	r0, r1
 8000c24:	bf1c      	itt	ne
 8000c26:	2000      	movne	r0, #0
 8000c28:	4770      	bxne	lr
 8000c2a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c2e:	d104      	bne.n	8000c3a <__addsf3+0x126>
 8000c30:	0040      	lsls	r0, r0, #1
 8000c32:	bf28      	it	cs
 8000c34:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c38:	4770      	bx	lr
 8000c3a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c3e:	bf3c      	itt	cc
 8000c40:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bxcc	lr
 8000c46:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c4a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c4e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c52:	4770      	bx	lr
 8000c54:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c58:	bf16      	itet	ne
 8000c5a:	4608      	movne	r0, r1
 8000c5c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c60:	4601      	movne	r1, r0
 8000c62:	0242      	lsls	r2, r0, #9
 8000c64:	bf06      	itte	eq
 8000c66:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c6a:	ea90 0f01 	teqeq	r0, r1
 8000c6e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c72:	4770      	bx	lr

08000c74 <__aeabi_ui2f>:
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	e004      	b.n	8000c84 <__aeabi_i2f+0x8>
 8000c7a:	bf00      	nop

08000c7c <__aeabi_i2f>:
 8000c7c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c80:	bf48      	it	mi
 8000c82:	4240      	negmi	r0, r0
 8000c84:	ea5f 0c00 	movs.w	ip, r0
 8000c88:	bf08      	it	eq
 8000c8a:	4770      	bxeq	lr
 8000c8c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c90:	4601      	mov	r1, r0
 8000c92:	f04f 0000 	mov.w	r0, #0
 8000c96:	e01c      	b.n	8000cd2 <__aeabi_l2f+0x2a>

08000c98 <__aeabi_ul2f>:
 8000c98:	ea50 0201 	orrs.w	r2, r0, r1
 8000c9c:	bf08      	it	eq
 8000c9e:	4770      	bxeq	lr
 8000ca0:	f04f 0300 	mov.w	r3, #0
 8000ca4:	e00a      	b.n	8000cbc <__aeabi_l2f+0x14>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_l2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cb4:	d502      	bpl.n	8000cbc <__aeabi_l2f+0x14>
 8000cb6:	4240      	negs	r0, r0
 8000cb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cbc:	ea5f 0c01 	movs.w	ip, r1
 8000cc0:	bf02      	ittt	eq
 8000cc2:	4684      	moveq	ip, r0
 8000cc4:	4601      	moveq	r1, r0
 8000cc6:	2000      	moveq	r0, #0
 8000cc8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000ccc:	bf08      	it	eq
 8000cce:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cd2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cd6:	fabc f28c 	clz	r2, ip
 8000cda:	3a08      	subs	r2, #8
 8000cdc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ce0:	db10      	blt.n	8000d04 <__aeabi_l2f+0x5c>
 8000ce2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cec:	f1c2 0220 	rsb	r2, r2, #32
 8000cf0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cf4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf8:	eb43 0002 	adc.w	r0, r3, r2
 8000cfc:	bf08      	it	eq
 8000cfe:	f020 0001 	biceq.w	r0, r0, #1
 8000d02:	4770      	bx	lr
 8000d04:	f102 0220 	add.w	r2, r2, #32
 8000d08:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d14:	fa21 f202 	lsr.w	r2, r1, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d22:	4770      	bx	lr

08000d24 <__aeabi_fmul>:
 8000d24:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d2c:	bf1e      	ittt	ne
 8000d2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d32:	ea92 0f0c 	teqne	r2, ip
 8000d36:	ea93 0f0c 	teqne	r3, ip
 8000d3a:	d06f      	beq.n	8000e1c <__aeabi_fmul+0xf8>
 8000d3c:	441a      	add	r2, r3
 8000d3e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d42:	0240      	lsls	r0, r0, #9
 8000d44:	bf18      	it	ne
 8000d46:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d4a:	d01e      	beq.n	8000d8a <__aeabi_fmul+0x66>
 8000d4c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d50:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d54:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d58:	fba0 3101 	umull	r3, r1, r0, r1
 8000d5c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d60:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d64:	bf3e      	ittt	cc
 8000d66:	0049      	lslcc	r1, r1, #1
 8000d68:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d6c:	005b      	lslcc	r3, r3, #1
 8000d6e:	ea40 0001 	orr.w	r0, r0, r1
 8000d72:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d76:	2afd      	cmp	r2, #253	@ 0xfd
 8000d78:	d81d      	bhi.n	8000db6 <__aeabi_fmul+0x92>
 8000d7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d82:	bf08      	it	eq
 8000d84:	f020 0001 	biceq.w	r0, r0, #1
 8000d88:	4770      	bx	lr
 8000d8a:	f090 0f00 	teq	r0, #0
 8000d8e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d92:	bf08      	it	eq
 8000d94:	0249      	lsleq	r1, r1, #9
 8000d96:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d9a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d9e:	3a7f      	subs	r2, #127	@ 0x7f
 8000da0:	bfc2      	ittt	gt
 8000da2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000da6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000daa:	4770      	bxgt	lr
 8000dac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000db0:	f04f 0300 	mov.w	r3, #0
 8000db4:	3a01      	subs	r2, #1
 8000db6:	dc5d      	bgt.n	8000e74 <__aeabi_fmul+0x150>
 8000db8:	f112 0f19 	cmn.w	r2, #25
 8000dbc:	bfdc      	itt	le
 8000dbe:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000dc2:	4770      	bxle	lr
 8000dc4:	f1c2 0200 	rsb	r2, r2, #0
 8000dc8:	0041      	lsls	r1, r0, #1
 8000dca:	fa21 f102 	lsr.w	r1, r1, r2
 8000dce:	f1c2 0220 	rsb	r2, r2, #32
 8000dd2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dda:	f140 0000 	adc.w	r0, r0, #0
 8000dde:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000de2:	bf08      	it	eq
 8000de4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000de8:	4770      	bx	lr
 8000dea:	f092 0f00 	teq	r2, #0
 8000dee:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000df2:	bf02      	ittt	eq
 8000df4:	0040      	lsleq	r0, r0, #1
 8000df6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dfa:	3a01      	subeq	r2, #1
 8000dfc:	d0f9      	beq.n	8000df2 <__aeabi_fmul+0xce>
 8000dfe:	ea40 000c 	orr.w	r0, r0, ip
 8000e02:	f093 0f00 	teq	r3, #0
 8000e06:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e0a:	bf02      	ittt	eq
 8000e0c:	0049      	lsleq	r1, r1, #1
 8000e0e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e12:	3b01      	subeq	r3, #1
 8000e14:	d0f9      	beq.n	8000e0a <__aeabi_fmul+0xe6>
 8000e16:	ea41 010c 	orr.w	r1, r1, ip
 8000e1a:	e78f      	b.n	8000d3c <__aeabi_fmul+0x18>
 8000e1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e20:	ea92 0f0c 	teq	r2, ip
 8000e24:	bf18      	it	ne
 8000e26:	ea93 0f0c 	teqne	r3, ip
 8000e2a:	d00a      	beq.n	8000e42 <__aeabi_fmul+0x11e>
 8000e2c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e30:	bf18      	it	ne
 8000e32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e36:	d1d8      	bne.n	8000dea <__aeabi_fmul+0xc6>
 8000e38:	ea80 0001 	eor.w	r0, r0, r1
 8000e3c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e40:	4770      	bx	lr
 8000e42:	f090 0f00 	teq	r0, #0
 8000e46:	bf17      	itett	ne
 8000e48:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e4c:	4608      	moveq	r0, r1
 8000e4e:	f091 0f00 	teqne	r1, #0
 8000e52:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e56:	d014      	beq.n	8000e82 <__aeabi_fmul+0x15e>
 8000e58:	ea92 0f0c 	teq	r2, ip
 8000e5c:	d101      	bne.n	8000e62 <__aeabi_fmul+0x13e>
 8000e5e:	0242      	lsls	r2, r0, #9
 8000e60:	d10f      	bne.n	8000e82 <__aeabi_fmul+0x15e>
 8000e62:	ea93 0f0c 	teq	r3, ip
 8000e66:	d103      	bne.n	8000e70 <__aeabi_fmul+0x14c>
 8000e68:	024b      	lsls	r3, r1, #9
 8000e6a:	bf18      	it	ne
 8000e6c:	4608      	movne	r0, r1
 8000e6e:	d108      	bne.n	8000e82 <__aeabi_fmul+0x15e>
 8000e70:	ea80 0001 	eor.w	r0, r0, r1
 8000e74:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e78:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e7c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e80:	4770      	bx	lr
 8000e82:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e86:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e8a:	4770      	bx	lr

08000e8c <__aeabi_fdiv>:
 8000e8c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e90:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e94:	bf1e      	ittt	ne
 8000e96:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e9a:	ea92 0f0c 	teqne	r2, ip
 8000e9e:	ea93 0f0c 	teqne	r3, ip
 8000ea2:	d069      	beq.n	8000f78 <__aeabi_fdiv+0xec>
 8000ea4:	eba2 0203 	sub.w	r2, r2, r3
 8000ea8:	ea80 0c01 	eor.w	ip, r0, r1
 8000eac:	0249      	lsls	r1, r1, #9
 8000eae:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eb2:	d037      	beq.n	8000f24 <__aeabi_fdiv+0x98>
 8000eb4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000eb8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ebc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ec0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ec4:	428b      	cmp	r3, r1
 8000ec6:	bf38      	it	cc
 8000ec8:	005b      	lslcc	r3, r3, #1
 8000eca:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000ece:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	bf24      	itt	cs
 8000ed6:	1a5b      	subcs	r3, r3, r1
 8000ed8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000edc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ee6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eee:	bf24      	itt	cs
 8000ef0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ef4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ef8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000efc:	bf24      	itt	cs
 8000efe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f02:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f06:	011b      	lsls	r3, r3, #4
 8000f08:	bf18      	it	ne
 8000f0a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f0e:	d1e0      	bne.n	8000ed2 <__aeabi_fdiv+0x46>
 8000f10:	2afd      	cmp	r2, #253	@ 0xfd
 8000f12:	f63f af50 	bhi.w	8000db6 <__aeabi_fmul+0x92>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f1c:	bf08      	it	eq
 8000f1e:	f020 0001 	biceq.w	r0, r0, #1
 8000f22:	4770      	bx	lr
 8000f24:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f28:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f2c:	327f      	adds	r2, #127	@ 0x7f
 8000f2e:	bfc2      	ittt	gt
 8000f30:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f34:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f38:	4770      	bxgt	lr
 8000f3a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f3e:	f04f 0300 	mov.w	r3, #0
 8000f42:	3a01      	subs	r2, #1
 8000f44:	e737      	b.n	8000db6 <__aeabi_fmul+0x92>
 8000f46:	f092 0f00 	teq	r2, #0
 8000f4a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f4e:	bf02      	ittt	eq
 8000f50:	0040      	lsleq	r0, r0, #1
 8000f52:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f56:	3a01      	subeq	r2, #1
 8000f58:	d0f9      	beq.n	8000f4e <__aeabi_fdiv+0xc2>
 8000f5a:	ea40 000c 	orr.w	r0, r0, ip
 8000f5e:	f093 0f00 	teq	r3, #0
 8000f62:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f66:	bf02      	ittt	eq
 8000f68:	0049      	lsleq	r1, r1, #1
 8000f6a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f6e:	3b01      	subeq	r3, #1
 8000f70:	d0f9      	beq.n	8000f66 <__aeabi_fdiv+0xda>
 8000f72:	ea41 010c 	orr.w	r1, r1, ip
 8000f76:	e795      	b.n	8000ea4 <__aeabi_fdiv+0x18>
 8000f78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f7c:	ea92 0f0c 	teq	r2, ip
 8000f80:	d108      	bne.n	8000f94 <__aeabi_fdiv+0x108>
 8000f82:	0242      	lsls	r2, r0, #9
 8000f84:	f47f af7d 	bne.w	8000e82 <__aeabi_fmul+0x15e>
 8000f88:	ea93 0f0c 	teq	r3, ip
 8000f8c:	f47f af70 	bne.w	8000e70 <__aeabi_fmul+0x14c>
 8000f90:	4608      	mov	r0, r1
 8000f92:	e776      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000f94:	ea93 0f0c 	teq	r3, ip
 8000f98:	d104      	bne.n	8000fa4 <__aeabi_fdiv+0x118>
 8000f9a:	024b      	lsls	r3, r1, #9
 8000f9c:	f43f af4c 	beq.w	8000e38 <__aeabi_fmul+0x114>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e76e      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000fa4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fa8:	bf18      	it	ne
 8000faa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fae:	d1ca      	bne.n	8000f46 <__aeabi_fdiv+0xba>
 8000fb0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fb4:	f47f af5c 	bne.w	8000e70 <__aeabi_fmul+0x14c>
 8000fb8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fbc:	f47f af3c 	bne.w	8000e38 <__aeabi_fmul+0x114>
 8000fc0:	e75f      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000fc2:	bf00      	nop

08000fc4 <__gesf2>:
 8000fc4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000fc8:	e006      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fca:	bf00      	nop

08000fcc <__lesf2>:
 8000fcc:	f04f 0c01 	mov.w	ip, #1
 8000fd0:	e002      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fd2:	bf00      	nop

08000fd4 <__cmpsf2>:
 8000fd4:	f04f 0c01 	mov.w	ip, #1
 8000fd8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fdc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fe4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe8:	bf18      	it	ne
 8000fea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fee:	d011      	beq.n	8001014 <__cmpsf2+0x40>
 8000ff0:	b001      	add	sp, #4
 8000ff2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ff6:	bf18      	it	ne
 8000ff8:	ea90 0f01 	teqne	r0, r1
 8000ffc:	bf58      	it	pl
 8000ffe:	ebb2 0003 	subspl.w	r0, r2, r3
 8001002:	bf88      	it	hi
 8001004:	17c8      	asrhi	r0, r1, #31
 8001006:	bf38      	it	cc
 8001008:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800100c:	bf18      	it	ne
 800100e:	f040 0001 	orrne.w	r0, r0, #1
 8001012:	4770      	bx	lr
 8001014:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001018:	d102      	bne.n	8001020 <__cmpsf2+0x4c>
 800101a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800101e:	d105      	bne.n	800102c <__cmpsf2+0x58>
 8001020:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001024:	d1e4      	bne.n	8000ff0 <__cmpsf2+0x1c>
 8001026:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800102a:	d0e1      	beq.n	8000ff0 <__cmpsf2+0x1c>
 800102c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <__aeabi_cfrcmple>:
 8001034:	4684      	mov	ip, r0
 8001036:	4608      	mov	r0, r1
 8001038:	4661      	mov	r1, ip
 800103a:	e7ff      	b.n	800103c <__aeabi_cfcmpeq>

0800103c <__aeabi_cfcmpeq>:
 800103c:	b50f      	push	{r0, r1, r2, r3, lr}
 800103e:	f7ff ffc9 	bl	8000fd4 <__cmpsf2>
 8001042:	2800      	cmp	r0, #0
 8001044:	bf48      	it	mi
 8001046:	f110 0f00 	cmnmi.w	r0, #0
 800104a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800104c <__aeabi_fcmpeq>:
 800104c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001050:	f7ff fff4 	bl	800103c <__aeabi_cfcmpeq>
 8001054:	bf0c      	ite	eq
 8001056:	2001      	moveq	r0, #1
 8001058:	2000      	movne	r0, #0
 800105a:	f85d fb08 	ldr.w	pc, [sp], #8
 800105e:	bf00      	nop

08001060 <__aeabi_fcmplt>:
 8001060:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001064:	f7ff ffea 	bl	800103c <__aeabi_cfcmpeq>
 8001068:	bf34      	ite	cc
 800106a:	2001      	movcc	r0, #1
 800106c:	2000      	movcs	r0, #0
 800106e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001072:	bf00      	nop

08001074 <__aeabi_fcmple>:
 8001074:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001078:	f7ff ffe0 	bl	800103c <__aeabi_cfcmpeq>
 800107c:	bf94      	ite	ls
 800107e:	2001      	movls	r0, #1
 8001080:	2000      	movhi	r0, #0
 8001082:	f85d fb08 	ldr.w	pc, [sp], #8
 8001086:	bf00      	nop

08001088 <__aeabi_fcmpge>:
 8001088:	f84d ed08 	str.w	lr, [sp, #-8]!
 800108c:	f7ff ffd2 	bl	8001034 <__aeabi_cfrcmple>
 8001090:	bf94      	ite	ls
 8001092:	2001      	movls	r0, #1
 8001094:	2000      	movhi	r0, #0
 8001096:	f85d fb08 	ldr.w	pc, [sp], #8
 800109a:	bf00      	nop

0800109c <__aeabi_fcmpgt>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff ffc8 	bl	8001034 <__aeabi_cfrcmple>
 80010a4:	bf34      	ite	cc
 80010a6:	2001      	movcc	r0, #1
 80010a8:	2000      	movcs	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_f2uiz>:
 80010b0:	0042      	lsls	r2, r0, #1
 80010b2:	d20e      	bcs.n	80010d2 <__aeabi_f2uiz+0x22>
 80010b4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010b8:	d30b      	bcc.n	80010d2 <__aeabi_f2uiz+0x22>
 80010ba:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010be:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010c2:	d409      	bmi.n	80010d8 <__aeabi_f2uiz+0x28>
 80010c4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010cc:	fa23 f002 	lsr.w	r0, r3, r2
 80010d0:	4770      	bx	lr
 80010d2:	f04f 0000 	mov.w	r0, #0
 80010d6:	4770      	bx	lr
 80010d8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010dc:	d101      	bne.n	80010e2 <__aeabi_f2uiz+0x32>
 80010de:	0242      	lsls	r2, r0, #9
 80010e0:	d102      	bne.n	80010e8 <__aeabi_f2uiz+0x38>
 80010e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010e6:	4770      	bx	lr
 80010e8:	f04f 0000 	mov.w	r0, #0
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop

080010f0 <coolerOn>:

    return (uint16_t)output;
}

void coolerOn(TIM_HandleTypeDef *htim2, ADC_HandleTypeDef *hadc1)
{
 80010f0:	b590      	push	{r4, r7, lr}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
	float average = 0;               //Variable to store the average of ADC samples
 80010fa:	f04f 0300 	mov.w	r3, #0
 80010fe:	60fb      	str	r3, [r7, #12]
	float cooler_temperature;                   //Variable to store the calculated temperature in Celsius

	for (i = 0; i < NUMSAMPLES; i++)
 8001100:	4b71      	ldr	r3, [pc, #452]	@ (80012c8 <coolerOn+0x1d8>)
 8001102:	2200      	movs	r2, #0
 8001104:	701a      	strb	r2, [r3, #0]
 8001106:	e01e      	b.n	8001146 <coolerOn+0x56>
	{
		  HAL_ADC_Start(hadc1);                              //Start the ADC conversion
 8001108:	6838      	ldr	r0, [r7, #0]
 800110a:	f001 f88b 	bl	8002224 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(hadc1, HAL_MAX_DELAY);   //Wait for the conversion to complete
 800110e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001112:	6838      	ldr	r0, [r7, #0]
 8001114:	f001 f934 	bl	8002380 <HAL_ADC_PollForConversion>
		  samples[i] = HAL_ADC_GetValue(hadc1);              //Read the ADC conversion result
 8001118:	6838      	ldr	r0, [r7, #0]
 800111a:	f001 fa37 	bl	800258c <HAL_ADC_GetValue>
 800111e:	4603      	mov	r3, r0
 8001120:	4a69      	ldr	r2, [pc, #420]	@ (80012c8 <coolerOn+0x1d8>)
 8001122:	7812      	ldrb	r2, [r2, #0]
 8001124:	4614      	mov	r4, r2
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff fda4 	bl	8000c74 <__aeabi_ui2f>
 800112c:	4603      	mov	r3, r0
 800112e:	4a67      	ldr	r2, [pc, #412]	@ (80012cc <coolerOn+0x1dc>)
 8001130:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		  osDelay(10);                                      //Delay between samples to stabilize the ADC readings
 8001134:	200a      	movs	r0, #10
 8001136:	f004 fb9e 	bl	8005876 <osDelay>
	for (i = 0; i < NUMSAMPLES; i++)
 800113a:	4b63      	ldr	r3, [pc, #396]	@ (80012c8 <coolerOn+0x1d8>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	3301      	adds	r3, #1
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4b61      	ldr	r3, [pc, #388]	@ (80012c8 <coolerOn+0x1d8>)
 8001144:	701a      	strb	r2, [r3, #0]
 8001146:	4b60      	ldr	r3, [pc, #384]	@ (80012c8 <coolerOn+0x1d8>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b13      	cmp	r3, #19
 800114c:	d9dc      	bls.n	8001108 <coolerOn+0x18>
	}

	for (i = 0; i < NUMSAMPLES; i++)
 800114e:	4b5e      	ldr	r3, [pc, #376]	@ (80012c8 <coolerOn+0x1d8>)
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]
 8001154:	e011      	b.n	800117a <coolerOn+0x8a>
	{
		average += samples[i];  //Sum up all the ADC sample values
 8001156:	4b5c      	ldr	r3, [pc, #368]	@ (80012c8 <coolerOn+0x1d8>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	461a      	mov	r2, r3
 800115c:	4b5b      	ldr	r3, [pc, #364]	@ (80012cc <coolerOn+0x1dc>)
 800115e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001162:	4619      	mov	r1, r3
 8001164:	68f8      	ldr	r0, [r7, #12]
 8001166:	f7ff fcd5 	bl	8000b14 <__addsf3>
 800116a:	4603      	mov	r3, r0
 800116c:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < NUMSAMPLES; i++)
 800116e:	4b56      	ldr	r3, [pc, #344]	@ (80012c8 <coolerOn+0x1d8>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	3301      	adds	r3, #1
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4b54      	ldr	r3, [pc, #336]	@ (80012c8 <coolerOn+0x1d8>)
 8001178:	701a      	strb	r2, [r3, #0]
 800117a:	4b53      	ldr	r3, [pc, #332]	@ (80012c8 <coolerOn+0x1d8>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b13      	cmp	r3, #19
 8001180:	d9e9      	bls.n	8001156 <coolerOn+0x66>
	}

    average /= NUMSAMPLES;  //Calculate the average of the ADC samples
 8001182:	4953      	ldr	r1, [pc, #332]	@ (80012d0 <coolerOn+0x1e0>)
 8001184:	68f8      	ldr	r0, [r7, #12]
 8001186:	f7ff fe81 	bl	8000e8c <__aeabi_fdiv>
 800118a:	4603      	mov	r3, r0
 800118c:	60fb      	str	r3, [r7, #12]

    if (average > 0)
 800118e:	f04f 0100 	mov.w	r1, #0
 8001192:	68f8      	ldr	r0, [r7, #12]
 8001194:	f7ff ff82 	bl	800109c <__aeabi_fcmpgt>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d055      	beq.n	800124a <coolerOn+0x15a>
    {  // Ensure the average is not zero to avoid division errors
        average = 4094 / average - 1;  // Convert ADC reading to resistance using 12-bit ADC resolution
 800119e:	68f9      	ldr	r1, [r7, #12]
 80011a0:	484c      	ldr	r0, [pc, #304]	@ (80012d4 <coolerOn+0x1e4>)
 80011a2:	f7ff fe73 	bl	8000e8c <__aeabi_fdiv>
 80011a6:	4603      	mov	r3, r0
 80011a8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff fcaf 	bl	8000b10 <__aeabi_fsub>
 80011b2:	4603      	mov	r3, r0
 80011b4:	60fb      	str	r3, [r7, #12]
        average = SERIESRESISTOR / average;  // Calculate the thermistor resistance
 80011b6:	68f9      	ldr	r1, [r7, #12]
 80011b8:	4847      	ldr	r0, [pc, #284]	@ (80012d8 <coolerOn+0x1e8>)
 80011ba:	f7ff fe67 	bl	8000e8c <__aeabi_fdiv>
 80011be:	4603      	mov	r3, r0
 80011c0:	60fb      	str	r3, [r7, #12]

        // Apply the cooler_temperature-Hart equation to convert resistance to temperature
        cooler_temperature = average / THERMISTORNOMINAL;  //Compute the ratio of thermistor resistance to nominal resistance
 80011c2:	4945      	ldr	r1, [pc, #276]	@ (80012d8 <coolerOn+0x1e8>)
 80011c4:	68f8      	ldr	r0, [r7, #12]
 80011c6:	f7ff fe61 	bl	8000e8c <__aeabi_fdiv>
 80011ca:	4603      	mov	r3, r0
 80011cc:	60bb      	str	r3, [r7, #8]
        cooler_temperature = log(cooler_temperature);  //Compute the natural logarithm of the resistance ratio
 80011ce:	68b8      	ldr	r0, [r7, #8]
 80011d0:	f7ff f922 	bl	8000418 <__aeabi_f2d>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4610      	mov	r0, r2
 80011da:	4619      	mov	r1, r3
 80011dc:	f005 fde2 	bl	8006da4 <log>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	4610      	mov	r0, r2
 80011e6:	4619      	mov	r1, r3
 80011e8:	f7ff fc3e 	bl	8000a68 <__aeabi_d2f>
 80011ec:	4603      	mov	r3, r0
 80011ee:	60bb      	str	r3, [r7, #8]
        cooler_temperature /= BCOEFFICIENT;  //Divide by the thermistor's Beta coefficient
 80011f0:	493a      	ldr	r1, [pc, #232]	@ (80012dc <coolerOn+0x1ec>)
 80011f2:	68b8      	ldr	r0, [r7, #8]
 80011f4:	f7ff fe4a 	bl	8000e8c <__aeabi_fdiv>
 80011f8:	4603      	mov	r3, r0
 80011fa:	60bb      	str	r3, [r7, #8]
        cooler_temperature += 1.0 / (TEMPERATURENOMINAL + 273.15);  //Add the reciprocal of the nominal temperature in Kelvin
 80011fc:	68b8      	ldr	r0, [r7, #8]
 80011fe:	f7ff f90b 	bl	8000418 <__aeabi_f2d>
 8001202:	a32d      	add	r3, pc, #180	@ (adr r3, 80012b8 <coolerOn+0x1c8>)
 8001204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001208:	f7fe ffa8 	bl	800015c <__adddf3>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4610      	mov	r0, r2
 8001212:	4619      	mov	r1, r3
 8001214:	f7ff fc28 	bl	8000a68 <__aeabi_d2f>
 8001218:	4603      	mov	r3, r0
 800121a:	60bb      	str	r3, [r7, #8]
        cooler_temperature = 1.0 / cooler_temperature;  //Compute the reciprocal to get the temperature in Kelvin
 800121c:	68b9      	ldr	r1, [r7, #8]
 800121e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001222:	f7ff fe33 	bl	8000e8c <__aeabi_fdiv>
 8001226:	4603      	mov	r3, r0
 8001228:	60bb      	str	r3, [r7, #8]
        cooler_temperature -= 273.15;  //Convert the temperature from Kelvin to Celsius
 800122a:	68b8      	ldr	r0, [r7, #8]
 800122c:	f7ff f8f4 	bl	8000418 <__aeabi_f2d>
 8001230:	a323      	add	r3, pc, #140	@ (adr r3, 80012c0 <coolerOn+0x1d0>)
 8001232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001236:	f7fe ff8f 	bl	8000158 <__aeabi_dsub>
 800123a:	4602      	mov	r2, r0
 800123c:	460b      	mov	r3, r1
 800123e:	4610      	mov	r0, r2
 8001240:	4619      	mov	r1, r3
 8001242:	f7ff fc11 	bl	8000a68 <__aeabi_d2f>
 8001246:	4603      	mov	r3, r0
 8001248:	60bb      	str	r3, [r7, #8]
    else
    {
        //HANDLE THE ERROR
    }

    osDelay(5000);
 800124a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800124e:	f004 fb12 	bl	8005876 <osDelay>


    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,1);   //PWM pin for cooler
 8001252:	2201      	movs	r2, #1
 8001254:	2108      	movs	r1, #8
 8001256:	4822      	ldr	r0, [pc, #136]	@ (80012e0 <coolerOn+0x1f0>)
 8001258:	f001 fd94 	bl	8002d84 <HAL_GPIO_WritePin>
    //TIM2->CCR2 = calculatePIDCooler(cooler_temperature, -18);
    //HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_2);  //Select the write channel for pin

    if(cooler_temperature > (SET_COOLER_TEMP+5))
 800125c:	f04f 0100 	mov.w	r1, #0
 8001260:	68b8      	ldr	r0, [r7, #8]
 8001262:	f7ff ff1b 	bl	800109c <__aeabi_fcmpgt>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d008      	beq.n	800127e <coolerOn+0x18e>
    {
    	TIM2->CCR2 = 100;
 800126c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001270:	2264      	movs	r2, #100	@ 0x64
 8001272:	639a      	str	r2, [r3, #56]	@ 0x38
    	HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_2);
 8001274:	2104      	movs	r1, #4
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f003 fbf8 	bl	8004a6c <HAL_TIM_PWM_Start>
    else
	{
		TIM2->CCR2 = 60;
		HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_2);
	}
}
 800127c:	e017      	b.n	80012ae <coolerOn+0x1be>
    else if (cooler_temperature > (SET_COOLER_TEMP+2))
 800127e:	4919      	ldr	r1, [pc, #100]	@ (80012e4 <coolerOn+0x1f4>)
 8001280:	68b8      	ldr	r0, [r7, #8]
 8001282:	f7ff ff0b 	bl	800109c <__aeabi_fcmpgt>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d008      	beq.n	800129e <coolerOn+0x1ae>
    	TIM2->CCR2 = 80;
 800128c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001290:	2250      	movs	r2, #80	@ 0x50
 8001292:	639a      	str	r2, [r3, #56]	@ 0x38
    	HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_2);
 8001294:	2104      	movs	r1, #4
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f003 fbe8 	bl	8004a6c <HAL_TIM_PWM_Start>
}
 800129c:	e007      	b.n	80012ae <coolerOn+0x1be>
		TIM2->CCR2 = 60;
 800129e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012a2:	223c      	movs	r2, #60	@ 0x3c
 80012a4:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_2);
 80012a6:	2104      	movs	r1, #4
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f003 fbdf 	bl	8004a6c <HAL_TIM_PWM_Start>
}
 80012ae:	bf00      	nop
 80012b0:	3714      	adds	r7, #20
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd90      	pop	{r4, r7, pc}
 80012b6:	bf00      	nop
 80012b8:	dcb5db83 	.word	0xdcb5db83
 80012bc:	3f6b79e1 	.word	0x3f6b79e1
 80012c0:	66666666 	.word	0x66666666
 80012c4:	40711266 	.word	0x40711266
 80012c8:	200000d0 	.word	0x200000d0
 80012cc:	20000080 	.word	0x20000080
 80012d0:	41a00000 	.word	0x41a00000
 80012d4:	457fe000 	.word	0x457fe000
 80012d8:	461c4000 	.word	0x461c4000
 80012dc:	4576e000 	.word	0x4576e000
 80012e0:	40010c00 	.word	0x40010c00
 80012e4:	c0400000 	.word	0xc0400000

080012e8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4a06      	ldr	r2, [pc, #24]	@ (8001310 <vApplicationGetIdleTaskMemory+0x28>)
 80012f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	4a05      	ldr	r2, [pc, #20]	@ (8001314 <vApplicationGetIdleTaskMemory+0x2c>)
 80012fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2280      	movs	r2, #128	@ 0x80
 8001304:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001306:	bf00      	nop
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr
 8001310:	200000d4 	.word	0x200000d4
 8001314:	20000174 	.word	0x20000174

08001318 <calculatePIDHeater>:
float integral = 0.0f;
float previous_error = 0.0f;
static uint32_t last_time;
uint16_t pidOutput;

uint16_t calculatePIDHeater() {
 8001318:	b590      	push	{r4, r7, lr}
 800131a:	b087      	sub	sp, #28
 800131c:	af00      	add	r7, sp, #0

    uint32_t current_time = HAL_GetTick(); // Get current time in milliseconds
 800131e:	f000 fe9f 	bl	8002060 <HAL_GetTick>
 8001322:	60f8      	str	r0, [r7, #12]
    float delta_time = (current_time - last_time) / 1000.0f; // Convert to seconds
 8001324:	4b4c      	ldr	r3, [pc, #304]	@ (8001458 <calculatePIDHeater+0x140>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	68fa      	ldr	r2, [r7, #12]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff fca1 	bl	8000c74 <__aeabi_ui2f>
 8001332:	4603      	mov	r3, r0
 8001334:	4949      	ldr	r1, [pc, #292]	@ (800145c <calculatePIDHeater+0x144>)
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff fda8 	bl	8000e8c <__aeabi_fdiv>
 800133c:	4603      	mov	r3, r0
 800133e:	617b      	str	r3, [r7, #20]
    if (delta_time <= 0) delta_time = 0.001; // Avoid division by zero
 8001340:	f04f 0100 	mov.w	r1, #0
 8001344:	6978      	ldr	r0, [r7, #20]
 8001346:	f7ff fe95 	bl	8001074 <__aeabi_fcmple>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <calculatePIDHeater+0x3c>
 8001350:	4b43      	ldr	r3, [pc, #268]	@ (8001460 <calculatePIDHeater+0x148>)
 8001352:	617b      	str	r3, [r7, #20]
    last_time = current_time;
 8001354:	4a40      	ldr	r2, [pc, #256]	@ (8001458 <calculatePIDHeater+0x140>)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6013      	str	r3, [r2, #0]

    // Calculate error
    float error = target_temperature - temperature;
 800135a:	4b42      	ldr	r3, [pc, #264]	@ (8001464 <calculatePIDHeater+0x14c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4619      	mov	r1, r3
 8001360:	4841      	ldr	r0, [pc, #260]	@ (8001468 <calculatePIDHeater+0x150>)
 8001362:	f7ff fbd5 	bl	8000b10 <__aeabi_fsub>
 8001366:	4603      	mov	r3, r0
 8001368:	60bb      	str	r3, [r7, #8]

    // Calculate integral (with anti-windup)
    integral += error * delta_time;
 800136a:	6979      	ldr	r1, [r7, #20]
 800136c:	68b8      	ldr	r0, [r7, #8]
 800136e:	f7ff fcd9 	bl	8000d24 <__aeabi_fmul>
 8001372:	4603      	mov	r3, r0
 8001374:	461a      	mov	r2, r3
 8001376:	4b3d      	ldr	r3, [pc, #244]	@ (800146c <calculatePIDHeater+0x154>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4619      	mov	r1, r3
 800137c:	4610      	mov	r0, r2
 800137e:	f7ff fbc9 	bl	8000b14 <__addsf3>
 8001382:	4603      	mov	r3, r0
 8001384:	461a      	mov	r2, r3
 8001386:	4b39      	ldr	r3, [pc, #228]	@ (800146c <calculatePIDHeater+0x154>)
 8001388:	601a      	str	r2, [r3, #0]
    if (integral > PWM_MAX / KI) integral = PWM_MAX / KI;
 800138a:	4b38      	ldr	r3, [pc, #224]	@ (800146c <calculatePIDHeater+0x154>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4938      	ldr	r1, [pc, #224]	@ (8001470 <calculatePIDHeater+0x158>)
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff fe83 	bl	800109c <__aeabi_fcmpgt>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d002      	beq.n	80013a2 <calculatePIDHeater+0x8a>
 800139c:	4b33      	ldr	r3, [pc, #204]	@ (800146c <calculatePIDHeater+0x154>)
 800139e:	4a34      	ldr	r2, [pc, #208]	@ (8001470 <calculatePIDHeater+0x158>)
 80013a0:	601a      	str	r2, [r3, #0]
    if (integral < PWM_MIN / KI) integral = PWM_MIN / KI;
 80013a2:	4b32      	ldr	r3, [pc, #200]	@ (800146c <calculatePIDHeater+0x154>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f04f 0100 	mov.w	r1, #0
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff fe58 	bl	8001060 <__aeabi_fcmplt>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <calculatePIDHeater+0xa6>
 80013b6:	4b2d      	ldr	r3, [pc, #180]	@ (800146c <calculatePIDHeater+0x154>)
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]

    // Calculate derivative
    float derivative = (error - previous_error) / delta_time;
 80013be:	4b2d      	ldr	r3, [pc, #180]	@ (8001474 <calculatePIDHeater+0x15c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4619      	mov	r1, r3
 80013c4:	68b8      	ldr	r0, [r7, #8]
 80013c6:	f7ff fba3 	bl	8000b10 <__aeabi_fsub>
 80013ca:	4603      	mov	r3, r0
 80013cc:	6979      	ldr	r1, [r7, #20]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff fd5c 	bl	8000e8c <__aeabi_fdiv>
 80013d4:	4603      	mov	r3, r0
 80013d6:	607b      	str	r3, [r7, #4]

    // PID formula
    float output = (KP * error) + (KI * integral) + (KD * derivative);
 80013d8:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80013dc:	68b8      	ldr	r0, [r7, #8]
 80013de:	f7ff fca1 	bl	8000d24 <__aeabi_fmul>
 80013e2:	4603      	mov	r3, r0
 80013e4:	461c      	mov	r4, r3
 80013e6:	4b21      	ldr	r3, [pc, #132]	@ (800146c <calculatePIDHeater+0x154>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4923      	ldr	r1, [pc, #140]	@ (8001478 <calculatePIDHeater+0x160>)
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fc99 	bl	8000d24 <__aeabi_fmul>
 80013f2:	4603      	mov	r3, r0
 80013f4:	4619      	mov	r1, r3
 80013f6:	4620      	mov	r0, r4
 80013f8:	f7ff fb8c 	bl	8000b14 <__addsf3>
 80013fc:	4603      	mov	r3, r0
 80013fe:	461c      	mov	r4, r3
 8001400:	491e      	ldr	r1, [pc, #120]	@ (800147c <calculatePIDHeater+0x164>)
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff fc8e 	bl	8000d24 <__aeabi_fmul>
 8001408:	4603      	mov	r3, r0
 800140a:	4619      	mov	r1, r3
 800140c:	4620      	mov	r0, r4
 800140e:	f7ff fb81 	bl	8000b14 <__addsf3>
 8001412:	4603      	mov	r3, r0
 8001414:	613b      	str	r3, [r7, #16]

    // Clamp output to PWM limits
    if (output > PWM_MAX) output = PWM_MAX;
 8001416:	491a      	ldr	r1, [pc, #104]	@ (8001480 <calculatePIDHeater+0x168>)
 8001418:	6938      	ldr	r0, [r7, #16]
 800141a:	f7ff fe3f 	bl	800109c <__aeabi_fcmpgt>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <calculatePIDHeater+0x110>
 8001424:	4b16      	ldr	r3, [pc, #88]	@ (8001480 <calculatePIDHeater+0x168>)
 8001426:	613b      	str	r3, [r7, #16]
    if (output < PWM_MIN) output = PWM_MIN;
 8001428:	f04f 0100 	mov.w	r1, #0
 800142c:	6938      	ldr	r0, [r7, #16]
 800142e:	f7ff fe17 	bl	8001060 <__aeabi_fcmplt>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d002      	beq.n	800143e <calculatePIDHeater+0x126>
 8001438:	f04f 0300 	mov.w	r3, #0
 800143c:	613b      	str	r3, [r7, #16]

    // Update previous error
    previous_error = error;
 800143e:	4a0d      	ldr	r2, [pc, #52]	@ (8001474 <calculatePIDHeater+0x15c>)
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	6013      	str	r3, [r2, #0]

    return (uint16_t)output;
 8001444:	6938      	ldr	r0, [r7, #16]
 8001446:	f7ff fe33 	bl	80010b0 <__aeabi_f2uiz>
 800144a:	4603      	mov	r3, r0
 800144c:	b29b      	uxth	r3, r3
}
 800144e:	4618      	mov	r0, r3
 8001450:	371c      	adds	r7, #28
 8001452:	46bd      	mov	sp, r7
 8001454:	bd90      	pop	{r4, r7, pc}
 8001456:	bf00      	nop
 8001458:	2000038c 	.word	0x2000038c
 800145c:	447a0000 	.word	0x447a0000
 8001460:	3a83126f 	.word	0x3a83126f
 8001464:	2000037c 	.word	0x2000037c
 8001468:	432a0000 	.word	0x432a0000
 800146c:	20000384 	.word	0x20000384
 8001470:	44fa0000 	.word	0x44fa0000
 8001474:	20000388 	.word	0x20000388
 8001478:	3d4ccccd 	.word	0x3d4ccccd
 800147c:	3ecccccd 	.word	0x3ecccccd
 8001480:	42c80000 	.word	0x42c80000
 8001484:	00000000 	.word	0x00000000

08001488 <heaterOn>:


void heaterOn(I2C_HandleTypeDef *hi2c1, TIM_HandleTypeDef *htim1)
{
 8001488:	b590      	push	{r4, r7, lr}
 800148a:	b089      	sub	sp, #36	@ 0x24
 800148c:	af04      	add	r7, sp, #16
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
	if(notConnected && (HAL_I2C_IsDeviceReady(hi2c1, (0x5A << 1), 1, 100) == HAL_OK))
 8001492:	4b5d      	ldr	r3, [pc, #372]	@ (8001608 <heaterOn+0x180>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d011      	beq.n	80014be <heaterOn+0x36>
 800149a:	2364      	movs	r3, #100	@ 0x64
 800149c:	2201      	movs	r2, #1
 800149e:	21b4      	movs	r1, #180	@ 0xb4
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f002 f83f 	bl	8003524 <HAL_I2C_IsDeviceReady>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d108      	bne.n	80014be <heaterOn+0x36>
		  {
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,1);
 80014ac:	2201      	movs	r2, #1
 80014ae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014b2:	4856      	ldr	r0, [pc, #344]	@ (800160c <heaterOn+0x184>)
 80014b4:	f001 fc66 	bl	8002d84 <HAL_GPIO_WritePin>
			  notConnected = 0;
 80014b8:	4b53      	ldr	r3, [pc, #332]	@ (8001608 <heaterOn+0x180>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	701a      	strb	r2, [r3, #0]

		  }
	uint32_t current_time = HAL_GetTick();
 80014be:	f000 fdcf 	bl	8002060 <HAL_GetTick>
 80014c2:	60f8      	str	r0, [r7, #12]

	if(turnedOn || temperature > target_temperature - 5)
 80014c4:	4b52      	ldr	r3, [pc, #328]	@ (8001610 <heaterOn+0x188>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d108      	bne.n	80014de <heaterOn+0x56>
 80014cc:	4b51      	ldr	r3, [pc, #324]	@ (8001614 <heaterOn+0x18c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4951      	ldr	r1, [pc, #324]	@ (8001618 <heaterOn+0x190>)
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff fde2 	bl	800109c <__aeabi_fcmpgt>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d005      	beq.n	80014ea <heaterOn+0x62>
	{
		timeSinceOn = current_time;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	4a4e      	ldr	r2, [pc, #312]	@ (800161c <heaterOn+0x194>)
 80014e2:	6013      	str	r3, [r2, #0]
		turnedOn = false;
 80014e4:	4b4a      	ldr	r3, [pc, #296]	@ (8001610 <heaterOn+0x188>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	701a      	strb	r2, [r3, #0]
	}

	  HAL_I2C_Mem_Read(hi2c1, (0x5A << 1), 0x07, 1, (uint8_t*)i2cdata, 2, 100);
 80014ea:	2364      	movs	r3, #100	@ 0x64
 80014ec:	9302      	str	r3, [sp, #8]
 80014ee:	2302      	movs	r3, #2
 80014f0:	9301      	str	r3, [sp, #4]
 80014f2:	4b4b      	ldr	r3, [pc, #300]	@ (8001620 <heaterOn+0x198>)
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	2301      	movs	r3, #1
 80014f8:	2207      	movs	r2, #7
 80014fa:	21b4      	movs	r1, #180	@ 0xb4
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f001 fd9d 	bl	800303c <HAL_I2C_Mem_Read>
	  raw_temp = ((i2cdata[1] << 8) | (i2cdata[0]));
 8001502:	4b47      	ldr	r3, [pc, #284]	@ (8001620 <heaterOn+0x198>)
 8001504:	785b      	ldrb	r3, [r3, #1]
 8001506:	021b      	lsls	r3, r3, #8
 8001508:	4a45      	ldr	r2, [pc, #276]	@ (8001620 <heaterOn+0x198>)
 800150a:	7812      	ldrb	r2, [r2, #0]
 800150c:	4313      	orrs	r3, r2
 800150e:	4a45      	ldr	r2, [pc, #276]	@ (8001624 <heaterOn+0x19c>)
 8001510:	6013      	str	r3, [r2, #0]
	  temperature = raw_temp*0.02 - 273.15;
 8001512:	4b44      	ldr	r3, [pc, #272]	@ (8001624 <heaterOn+0x19c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f7fe ff6c 	bl	80003f4 <__aeabi_i2d>
 800151c:	a334      	add	r3, pc, #208	@ (adr r3, 80015f0 <heaterOn+0x168>)
 800151e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001522:	f7fe ffd1 	bl	80004c8 <__aeabi_dmul>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4610      	mov	r0, r2
 800152c:	4619      	mov	r1, r3
 800152e:	a332      	add	r3, pc, #200	@ (adr r3, 80015f8 <heaterOn+0x170>)
 8001530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001534:	f7fe fe10 	bl	8000158 <__aeabi_dsub>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	4610      	mov	r0, r2
 800153e:	4619      	mov	r1, r3
 8001540:	f7ff fa92 	bl	8000a68 <__aeabi_d2f>
 8001544:	4603      	mov	r3, r0
 8001546:	4a33      	ldr	r2, [pc, #204]	@ (8001614 <heaterOn+0x18c>)
 8001548:	6013      	str	r3, [r2, #0]


	  osDelay(200);
 800154a:	20c8      	movs	r0, #200	@ 0xc8
 800154c:	f004 f993 	bl	8005876 <osDelay>

	  if(temperature < -20 || temperature > 250)  //|| current_time > (timeSinceOn + 150000)
 8001550:	4b30      	ldr	r3, [pc, #192]	@ (8001614 <heaterOn+0x18c>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4934      	ldr	r1, [pc, #208]	@ (8001628 <heaterOn+0x1a0>)
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fd82 	bl	8001060 <__aeabi_fcmplt>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d108      	bne.n	8001574 <heaterOn+0xec>
 8001562:	4b2c      	ldr	r3, [pc, #176]	@ (8001614 <heaterOn+0x18c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4931      	ldr	r1, [pc, #196]	@ (800162c <heaterOn+0x1a4>)
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff fd97 	bl	800109c <__aeabi_fcmpgt>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d007      	beq.n	8001584 <heaterOn+0xfc>
	  {
		  TIM1->CCR1 = 0;				//Select the write channel for pin
 8001574:	4b2e      	ldr	r3, [pc, #184]	@ (8001630 <heaterOn+0x1a8>)
 8001576:	2200      	movs	r2, #0
 8001578:	635a      	str	r2, [r3, #52]	@ 0x34
		  HAL_TIM_PWM_Start(htim1, TIM_CHANNEL_1);
 800157a:	2100      	movs	r1, #0
 800157c:	6838      	ldr	r0, [r7, #0]
 800157e:	f003 fa75 	bl	8004a6c <HAL_TIM_PWM_Start>
 8001582:	e031      	b.n	80015e8 <heaterOn+0x160>
	  }

	  else{

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,1);   //PWM pin for heater
 8001584:	2201      	movs	r2, #1
 8001586:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800158a:	4820      	ldr	r0, [pc, #128]	@ (800160c <heaterOn+0x184>)
 800158c:	f001 fbfa 	bl	8002d84 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8001590:	2201      	movs	r2, #1
 8001592:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001596:	481d      	ldr	r0, [pc, #116]	@ (800160c <heaterOn+0x184>)
 8001598:	f001 fbf4 	bl	8002d84 <HAL_GPIO_WritePin>
	  pidOutput = calculatePIDHeater();
 800159c:	f7ff febc 	bl	8001318 <calculatePIDHeater>
 80015a0:	4603      	mov	r3, r0
 80015a2:	461a      	mov	r2, r3
 80015a4:	4b23      	ldr	r3, [pc, #140]	@ (8001634 <heaterOn+0x1ac>)
 80015a6:	801a      	strh	r2, [r3, #0]
	  TIM1->CCR1 = pidOutput*1.4;				//Select the write channel for pin
 80015a8:	4b22      	ldr	r3, [pc, #136]	@ (8001634 <heaterOn+0x1ac>)
 80015aa:	881b      	ldrh	r3, [r3, #0]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7fe ff21 	bl	80003f4 <__aeabi_i2d>
 80015b2:	a313      	add	r3, pc, #76	@ (adr r3, 8001600 <heaterOn+0x178>)
 80015b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b8:	f7fe ff86 	bl	80004c8 <__aeabi_dmul>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4c1b      	ldr	r4, [pc, #108]	@ (8001630 <heaterOn+0x1a8>)
 80015c2:	4610      	mov	r0, r2
 80015c4:	4619      	mov	r1, r3
 80015c6:	f7ff fa2f 	bl	8000a28 <__aeabi_d2uiz>
 80015ca:	4603      	mov	r3, r0
 80015cc:	6363      	str	r3, [r4, #52]	@ 0x34
	  TIM1->CCR2 = pidOutput;
 80015ce:	4b19      	ldr	r3, [pc, #100]	@ (8001634 <heaterOn+0x1ac>)
 80015d0:	881a      	ldrh	r2, [r3, #0]
 80015d2:	4b17      	ldr	r3, [pc, #92]	@ (8001630 <heaterOn+0x1a8>)
 80015d4:	639a      	str	r2, [r3, #56]	@ 0x38
	  //TIM1->CCR1 = 0;
	  HAL_TIM_PWM_Start(htim1, TIM_CHANNEL_1);  //Select the write channel for pin
 80015d6:	2100      	movs	r1, #0
 80015d8:	6838      	ldr	r0, [r7, #0]
 80015da:	f003 fa47 	bl	8004a6c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(htim1, TIM_CHANNEL_2);
 80015de:	2104      	movs	r1, #4
 80015e0:	6838      	ldr	r0, [r7, #0]
 80015e2:	f003 fa43 	bl	8004a6c <HAL_TIM_PWM_Start>
	  }
}
 80015e6:	bf00      	nop
 80015e8:	bf00      	nop
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd90      	pop	{r4, r7, pc}
 80015f0:	47ae147b 	.word	0x47ae147b
 80015f4:	3f947ae1 	.word	0x3f947ae1
 80015f8:	66666666 	.word	0x66666666
 80015fc:	40711266 	.word	0x40711266
 8001600:	66666666 	.word	0x66666666
 8001604:	3ff66666 	.word	0x3ff66666
 8001608:	20000000 	.word	0x20000000
 800160c:	40010800 	.word	0x40010800
 8001610:	20000001 	.word	0x20000001
 8001614:	2000037c 	.word	0x2000037c
 8001618:	43250000 	.word	0x43250000
 800161c:	20000380 	.word	0x20000380
 8001620:	20000374 	.word	0x20000374
 8001624:	20000378 	.word	0x20000378
 8001628:	c1a00000 	.word	0xc1a00000
 800162c:	437a0000 	.word	0x437a0000
 8001630:	40012c00 	.word	0x40012c00
 8001634:	20000390 	.word	0x20000390

08001638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001638:	b5b0      	push	{r4, r5, r7, lr}
 800163a:	b096      	sub	sp, #88	@ 0x58
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800163e:	f000 fce7 	bl	8002010 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001642:	f000 f851 	bl	80016e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001646:	f000 fa37 	bl	8001ab8 <MX_GPIO_Init>
  MX_TIM1_Init();
 800164a:	f000 f915 	bl	8001878 <MX_TIM1_Init>
  MX_TIM2_Init();
 800164e:	f000 f9bf 	bl	80019d0 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001652:	f000 f8e3 	bl	800181c <MX_I2C1_Init>
  MX_ADC1_Init();
 8001656:	f000 f8a3 	bl	80017a0 <MX_ADC1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of GreenLed */
  osThreadDef(GreenLed, StartGreenLed, osPriorityIdle, 0, 128);
 800165a:	4b1d      	ldr	r3, [pc, #116]	@ (80016d0 <main+0x98>)
 800165c:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8001660:	461d      	mov	r5, r3
 8001662:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001664:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001666:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800166a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GreenLedHandle = osThreadCreate(osThread(GreenLed), NULL);
 800166e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001672:	2100      	movs	r1, #0
 8001674:	4618      	mov	r0, r3
 8001676:	f004 f8b2 	bl	80057de <osThreadCreate>
 800167a:	4603      	mov	r3, r0
 800167c:	4a15      	ldr	r2, [pc, #84]	@ (80016d4 <main+0x9c>)
 800167e:	6013      	str	r3, [r2, #0]

  /* definition and creation of Heater */
  osThreadDef(Heater, HeaterFunction, osPriorityHigh, 0, 128);
 8001680:	4b15      	ldr	r3, [pc, #84]	@ (80016d8 <main+0xa0>)
 8001682:	f107 0420 	add.w	r4, r7, #32
 8001686:	461d      	mov	r5, r3
 8001688:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800168a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800168c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001690:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HeaterHandle = osThreadCreate(osThread(Heater), NULL);
 8001694:	f107 0320 	add.w	r3, r7, #32
 8001698:	2100      	movs	r1, #0
 800169a:	4618      	mov	r0, r3
 800169c:	f004 f89f 	bl	80057de <osThreadCreate>
 80016a0:	4603      	mov	r3, r0
 80016a2:	4a0e      	ldr	r2, [pc, #56]	@ (80016dc <main+0xa4>)
 80016a4:	6013      	str	r3, [r2, #0]

  /* definition and creation of Cooler */
  osThreadDef(Cooler, CoolerFunction, osPriorityNormal, 0, 128);
 80016a6:	4b0e      	ldr	r3, [pc, #56]	@ (80016e0 <main+0xa8>)
 80016a8:	1d3c      	adds	r4, r7, #4
 80016aa:	461d      	mov	r5, r3
 80016ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CoolerHandle = osThreadCreate(osThread(Cooler), NULL);
 80016b8:	1d3b      	adds	r3, r7, #4
 80016ba:	2100      	movs	r1, #0
 80016bc:	4618      	mov	r0, r3
 80016be:	f004 f88e 	bl	80057de <osThreadCreate>
 80016c2:	4603      	mov	r3, r0
 80016c4:	4a07      	ldr	r2, [pc, #28]	@ (80016e4 <main+0xac>)
 80016c6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80016c8:	f004 f882 	bl	80057d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016cc:	bf00      	nop
 80016ce:	e7fd      	b.n	80016cc <main+0x94>
 80016d0:	080071a0 	.word	0x080071a0
 80016d4:	200004a8 	.word	0x200004a8
 80016d8:	080071c4 	.word	0x080071c4
 80016dc:	200004ac 	.word	0x200004ac
 80016e0:	080071e8 	.word	0x080071e8
 80016e4:	200004b0 	.word	0x200004b0

080016e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b094      	sub	sp, #80	@ 0x50
 80016ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016f2:	2228      	movs	r2, #40	@ 0x28
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f005 fa76 	bl	8006be8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800170c:	1d3b      	adds	r3, r7, #4
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001718:	2301      	movs	r3, #1
 800171a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800171c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001720:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001722:	2300      	movs	r3, #0
 8001724:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001726:	2301      	movs	r3, #1
 8001728:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800172a:	2302      	movs	r3, #2
 800172c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800172e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001732:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001734:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001738:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800173a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800173e:	4618      	mov	r0, r3
 8001740:	f002 faf4 	bl	8003d2c <HAL_RCC_OscConfig>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800174a:	f000 fa41 	bl	8001bd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800174e:	230f      	movs	r3, #15
 8001750:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001752:	2302      	movs	r3, #2
 8001754:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800175a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800175e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001760:	2300      	movs	r3, #0
 8001762:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	2102      	movs	r1, #2
 800176a:	4618      	mov	r0, r3
 800176c:	f002 fd60 	bl	8004230 <HAL_RCC_ClockConfig>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001776:	f000 fa2b 	bl	8001bd0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800177a:	2302      	movs	r3, #2
 800177c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800177e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001782:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001784:	1d3b      	adds	r3, r7, #4
 8001786:	4618      	mov	r0, r3
 8001788:	f002 ff10 	bl	80045ac <HAL_RCCEx_PeriphCLKConfig>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001792:	f000 fa1d 	bl	8001bd0 <Error_Handler>
  }
}
 8001796:	bf00      	nop
 8001798:	3750      	adds	r7, #80	@ 0x50
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80017b0:	4b18      	ldr	r3, [pc, #96]	@ (8001814 <MX_ADC1_Init+0x74>)
 80017b2:	4a19      	ldr	r2, [pc, #100]	@ (8001818 <MX_ADC1_Init+0x78>)
 80017b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017b6:	4b17      	ldr	r3, [pc, #92]	@ (8001814 <MX_ADC1_Init+0x74>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017bc:	4b15      	ldr	r3, [pc, #84]	@ (8001814 <MX_ADC1_Init+0x74>)
 80017be:	2200      	movs	r2, #0
 80017c0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017c2:	4b14      	ldr	r3, [pc, #80]	@ (8001814 <MX_ADC1_Init+0x74>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017c8:	4b12      	ldr	r3, [pc, #72]	@ (8001814 <MX_ADC1_Init+0x74>)
 80017ca:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80017ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017d0:	4b10      	ldr	r3, [pc, #64]	@ (8001814 <MX_ADC1_Init+0x74>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80017d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001814 <MX_ADC1_Init+0x74>)
 80017d8:	2201      	movs	r2, #1
 80017da:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017dc:	480d      	ldr	r0, [pc, #52]	@ (8001814 <MX_ADC1_Init+0x74>)
 80017de:	f000 fc49 	bl	8002074 <HAL_ADC_Init>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80017e8:	f000 f9f2 	bl	8001bd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80017ec:	2301      	movs	r3, #1
 80017ee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017f0:	2301      	movs	r3, #1
 80017f2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80017f4:	2300      	movs	r3, #0
 80017f6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017f8:	1d3b      	adds	r3, r7, #4
 80017fa:	4619      	mov	r1, r3
 80017fc:	4805      	ldr	r0, [pc, #20]	@ (8001814 <MX_ADC1_Init+0x74>)
 80017fe:	f000 fed1 	bl	80025a4 <HAL_ADC_ConfigChannel>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001808:	f000 f9e2 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800180c:	bf00      	nop
 800180e:	3710      	adds	r7, #16
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20000394 	.word	0x20000394
 8001818:	40012400 	.word	0x40012400

0800181c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001820:	4b12      	ldr	r3, [pc, #72]	@ (800186c <MX_I2C1_Init+0x50>)
 8001822:	4a13      	ldr	r2, [pc, #76]	@ (8001870 <MX_I2C1_Init+0x54>)
 8001824:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001826:	4b11      	ldr	r3, [pc, #68]	@ (800186c <MX_I2C1_Init+0x50>)
 8001828:	4a12      	ldr	r2, [pc, #72]	@ (8001874 <MX_I2C1_Init+0x58>)
 800182a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800182c:	4b0f      	ldr	r3, [pc, #60]	@ (800186c <MX_I2C1_Init+0x50>)
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001832:	4b0e      	ldr	r3, [pc, #56]	@ (800186c <MX_I2C1_Init+0x50>)
 8001834:	2200      	movs	r2, #0
 8001836:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001838:	4b0c      	ldr	r3, [pc, #48]	@ (800186c <MX_I2C1_Init+0x50>)
 800183a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800183e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001840:	4b0a      	ldr	r3, [pc, #40]	@ (800186c <MX_I2C1_Init+0x50>)
 8001842:	2200      	movs	r2, #0
 8001844:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001846:	4b09      	ldr	r3, [pc, #36]	@ (800186c <MX_I2C1_Init+0x50>)
 8001848:	2200      	movs	r2, #0
 800184a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800184c:	4b07      	ldr	r3, [pc, #28]	@ (800186c <MX_I2C1_Init+0x50>)
 800184e:	2200      	movs	r2, #0
 8001850:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001852:	4b06      	ldr	r3, [pc, #24]	@ (800186c <MX_I2C1_Init+0x50>)
 8001854:	2200      	movs	r2, #0
 8001856:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001858:	4804      	ldr	r0, [pc, #16]	@ (800186c <MX_I2C1_Init+0x50>)
 800185a:	f001 faab 	bl	8002db4 <HAL_I2C_Init>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001864:	f000 f9b4 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}
 800186c:	200003c4 	.word	0x200003c4
 8001870:	40005400 	.word	0x40005400
 8001874:	000186a0 	.word	0x000186a0

08001878 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b096      	sub	sp, #88	@ 0x58
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800187e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	605a      	str	r2, [r3, #4]
 8001888:	609a      	str	r2, [r3, #8]
 800188a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800188c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001896:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	609a      	str	r2, [r3, #8]
 80018a2:	60da      	str	r2, [r3, #12]
 80018a4:	611a      	str	r2, [r3, #16]
 80018a6:	615a      	str	r2, [r3, #20]
 80018a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	2220      	movs	r2, #32
 80018ae:	2100      	movs	r1, #0
 80018b0:	4618      	mov	r0, r3
 80018b2:	f005 f999 	bl	8006be8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018b6:	4b44      	ldr	r3, [pc, #272]	@ (80019c8 <MX_TIM1_Init+0x150>)
 80018b8:	4a44      	ldr	r2, [pc, #272]	@ (80019cc <MX_TIM1_Init+0x154>)
 80018ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80018bc:	4b42      	ldr	r3, [pc, #264]	@ (80019c8 <MX_TIM1_Init+0x150>)
 80018be:	2247      	movs	r2, #71	@ 0x47
 80018c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c2:	4b41      	ldr	r3, [pc, #260]	@ (80019c8 <MX_TIM1_Init+0x150>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80018c8:	4b3f      	ldr	r3, [pc, #252]	@ (80019c8 <MX_TIM1_Init+0x150>)
 80018ca:	2263      	movs	r2, #99	@ 0x63
 80018cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ce:	4b3e      	ldr	r3, [pc, #248]	@ (80019c8 <MX_TIM1_Init+0x150>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018d4:	4b3c      	ldr	r3, [pc, #240]	@ (80019c8 <MX_TIM1_Init+0x150>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018da:	4b3b      	ldr	r3, [pc, #236]	@ (80019c8 <MX_TIM1_Init+0x150>)
 80018dc:	2200      	movs	r2, #0
 80018de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018e0:	4839      	ldr	r0, [pc, #228]	@ (80019c8 <MX_TIM1_Init+0x150>)
 80018e2:	f002 ffcf 	bl	8004884 <HAL_TIM_Base_Init>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80018ec:	f000 f970 	bl	8001bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018f6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80018fa:	4619      	mov	r1, r3
 80018fc:	4832      	ldr	r0, [pc, #200]	@ (80019c8 <MX_TIM1_Init+0x150>)
 80018fe:	f003 fb03 	bl	8004f08 <HAL_TIM_ConfigClockSource>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001908:	f000 f962 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800190c:	482e      	ldr	r0, [pc, #184]	@ (80019c8 <MX_TIM1_Init+0x150>)
 800190e:	f003 f855 	bl	80049bc <HAL_TIM_PWM_Init>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001918:	f000 f95a 	bl	8001bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800191c:	2300      	movs	r3, #0
 800191e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001920:	2300      	movs	r3, #0
 8001922:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001924:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001928:	4619      	mov	r1, r3
 800192a:	4827      	ldr	r0, [pc, #156]	@ (80019c8 <MX_TIM1_Init+0x150>)
 800192c:	f003 fe7e 	bl	800562c <HAL_TIMEx_MasterConfigSynchronization>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001936:	f000 f94b 	bl	8001bd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800193a:	2360      	movs	r3, #96	@ 0x60
 800193c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800193e:	2300      	movs	r3, #0
 8001940:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001942:	2300      	movs	r3, #0
 8001944:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001946:	2300      	movs	r3, #0
 8001948:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800194a:	2300      	movs	r3, #0
 800194c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800194e:	2300      	movs	r3, #0
 8001950:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001952:	2300      	movs	r3, #0
 8001954:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001956:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800195a:	2200      	movs	r2, #0
 800195c:	4619      	mov	r1, r3
 800195e:	481a      	ldr	r0, [pc, #104]	@ (80019c8 <MX_TIM1_Init+0x150>)
 8001960:	f003 fa10 	bl	8004d84 <HAL_TIM_PWM_ConfigChannel>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800196a:	f000 f931 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800196e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001972:	2204      	movs	r2, #4
 8001974:	4619      	mov	r1, r3
 8001976:	4814      	ldr	r0, [pc, #80]	@ (80019c8 <MX_TIM1_Init+0x150>)
 8001978:	f003 fa04 	bl	8004d84 <HAL_TIM_PWM_ConfigChannel>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8001982:	f000 f925 	bl	8001bd0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001986:	2300      	movs	r3, #0
 8001988:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800198a:	2300      	movs	r3, #0
 800198c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001996:	2300      	movs	r3, #0
 8001998:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800199a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800199e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019a0:	2300      	movs	r3, #0
 80019a2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019a4:	1d3b      	adds	r3, r7, #4
 80019a6:	4619      	mov	r1, r3
 80019a8:	4807      	ldr	r0, [pc, #28]	@ (80019c8 <MX_TIM1_Init+0x150>)
 80019aa:	f003 fe97 	bl	80056dc <HAL_TIMEx_ConfigBreakDeadTime>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80019b4:	f000 f90c 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019b8:	4803      	ldr	r0, [pc, #12]	@ (80019c8 <MX_TIM1_Init+0x150>)
 80019ba:	f000 f9f3 	bl	8001da4 <HAL_TIM_MspPostInit>

}
 80019be:	bf00      	nop
 80019c0:	3758      	adds	r7, #88	@ 0x58
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000418 	.word	0x20000418
 80019cc:	40012c00 	.word	0x40012c00

080019d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08e      	sub	sp, #56	@ 0x38
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]
 80019e0:	609a      	str	r2, [r3, #8]
 80019e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e4:	f107 0320 	add.w	r3, r7, #32
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019ee:	1d3b      	adds	r3, r7, #4
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]
 80019fc:	615a      	str	r2, [r3, #20]
 80019fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a00:	4b2c      	ldr	r3, [pc, #176]	@ (8001ab4 <MX_TIM2_Init+0xe4>)
 8001a02:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001a08:	4b2a      	ldr	r3, [pc, #168]	@ (8001ab4 <MX_TIM2_Init+0xe4>)
 8001a0a:	2247      	movs	r2, #71	@ 0x47
 8001a0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a0e:	4b29      	ldr	r3, [pc, #164]	@ (8001ab4 <MX_TIM2_Init+0xe4>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8001a14:	4b27      	ldr	r3, [pc, #156]	@ (8001ab4 <MX_TIM2_Init+0xe4>)
 8001a16:	2263      	movs	r2, #99	@ 0x63
 8001a18:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a1a:	4b26      	ldr	r3, [pc, #152]	@ (8001ab4 <MX_TIM2_Init+0xe4>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a20:	4b24      	ldr	r3, [pc, #144]	@ (8001ab4 <MX_TIM2_Init+0xe4>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a26:	4823      	ldr	r0, [pc, #140]	@ (8001ab4 <MX_TIM2_Init+0xe4>)
 8001a28:	f002 ff2c 	bl	8004884 <HAL_TIM_Base_Init>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001a32:	f000 f8cd 	bl	8001bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a3c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a40:	4619      	mov	r1, r3
 8001a42:	481c      	ldr	r0, [pc, #112]	@ (8001ab4 <MX_TIM2_Init+0xe4>)
 8001a44:	f003 fa60 	bl	8004f08 <HAL_TIM_ConfigClockSource>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001a4e:	f000 f8bf 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a52:	4818      	ldr	r0, [pc, #96]	@ (8001ab4 <MX_TIM2_Init+0xe4>)
 8001a54:	f002 ffb2 	bl	80049bc <HAL_TIM_PWM_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001a5e:	f000 f8b7 	bl	8001bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a62:	2300      	movs	r3, #0
 8001a64:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a66:	2300      	movs	r3, #0
 8001a68:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a6a:	f107 0320 	add.w	r3, r7, #32
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4810      	ldr	r0, [pc, #64]	@ (8001ab4 <MX_TIM2_Init+0xe4>)
 8001a72:	f003 fddb 	bl	800562c <HAL_TIMEx_MasterConfigSynchronization>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001a7c:	f000 f8a8 	bl	8001bd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a80:	2360      	movs	r3, #96	@ 0x60
 8001a82:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a90:	1d3b      	adds	r3, r7, #4
 8001a92:	2204      	movs	r2, #4
 8001a94:	4619      	mov	r1, r3
 8001a96:	4807      	ldr	r0, [pc, #28]	@ (8001ab4 <MX_TIM2_Init+0xe4>)
 8001a98:	f003 f974 	bl	8004d84 <HAL_TIM_PWM_ConfigChannel>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001aa2:	f000 f895 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001aa6:	4803      	ldr	r0, [pc, #12]	@ (8001ab4 <MX_TIM2_Init+0xe4>)
 8001aa8:	f000 f97c 	bl	8001da4 <HAL_TIM_MspPostInit>

}
 8001aac:	bf00      	nop
 8001aae:	3738      	adds	r7, #56	@ 0x38
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	20000460 	.word	0x20000460

08001ab8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b088      	sub	sp, #32
 8001abc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abe:	f107 0310 	add.w	r3, r7, #16
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
 8001aca:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001acc:	4b24      	ldr	r3, [pc, #144]	@ (8001b60 <MX_GPIO_Init+0xa8>)
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	4a23      	ldr	r2, [pc, #140]	@ (8001b60 <MX_GPIO_Init+0xa8>)
 8001ad2:	f043 0310 	orr.w	r3, r3, #16
 8001ad6:	6193      	str	r3, [r2, #24]
 8001ad8:	4b21      	ldr	r3, [pc, #132]	@ (8001b60 <MX_GPIO_Init+0xa8>)
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	f003 0310 	and.w	r3, r3, #16
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ae4:	4b1e      	ldr	r3, [pc, #120]	@ (8001b60 <MX_GPIO_Init+0xa8>)
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	4a1d      	ldr	r2, [pc, #116]	@ (8001b60 <MX_GPIO_Init+0xa8>)
 8001aea:	f043 0320 	orr.w	r3, r3, #32
 8001aee:	6193      	str	r3, [r2, #24]
 8001af0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b60 <MX_GPIO_Init+0xa8>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	f003 0320 	and.w	r3, r3, #32
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afc:	4b18      	ldr	r3, [pc, #96]	@ (8001b60 <MX_GPIO_Init+0xa8>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	4a17      	ldr	r2, [pc, #92]	@ (8001b60 <MX_GPIO_Init+0xa8>)
 8001b02:	f043 0304 	orr.w	r3, r3, #4
 8001b06:	6193      	str	r3, [r2, #24]
 8001b08:	4b15      	ldr	r3, [pc, #84]	@ (8001b60 <MX_GPIO_Init+0xa8>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	607b      	str	r3, [r7, #4]
 8001b12:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b14:	4b12      	ldr	r3, [pc, #72]	@ (8001b60 <MX_GPIO_Init+0xa8>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	4a11      	ldr	r2, [pc, #68]	@ (8001b60 <MX_GPIO_Init+0xa8>)
 8001b1a:	f043 0308 	orr.w	r3, r3, #8
 8001b1e:	6193      	str	r3, [r2, #24]
 8001b20:	4b0f      	ldr	r3, [pc, #60]	@ (8001b60 <MX_GPIO_Init+0xa8>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	f003 0308 	and.w	r3, r3, #8
 8001b28:	603b      	str	r3, [r7, #0]
 8001b2a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001b32:	480c      	ldr	r0, [pc, #48]	@ (8001b64 <MX_GPIO_Init+0xac>)
 8001b34:	f001 f926 	bl	8002d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b46:	2302      	movs	r3, #2
 8001b48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4a:	f107 0310 	add.w	r3, r7, #16
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4804      	ldr	r0, [pc, #16]	@ (8001b64 <MX_GPIO_Init+0xac>)
 8001b52:	f000 ff9b 	bl	8002a8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b56:	bf00      	nop
 8001b58:	3720      	adds	r7, #32
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40021000 	.word	0x40021000
 8001b64:	40010800 	.word	0x40010800

08001b68 <StartGreenLed>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartGreenLed */
void StartGreenLed(void const * argument)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
 8001b70:	bf00      	nop
 8001b72:	e7fd      	b.n	8001b70 <StartGreenLed+0x8>

08001b74 <HeaterFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HeaterFunction */
void HeaterFunction(void const * argument)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HeaterFunction */
  /* Infinite loop */
  for(;;)
  {
	  heaterOn(&hi2c1, &htim1);  //uses temp sensor
 8001b7c:	4902      	ldr	r1, [pc, #8]	@ (8001b88 <HeaterFunction+0x14>)
 8001b7e:	4803      	ldr	r0, [pc, #12]	@ (8001b8c <HeaterFunction+0x18>)
 8001b80:	f7ff fc82 	bl	8001488 <heaterOn>
 8001b84:	e7fa      	b.n	8001b7c <HeaterFunction+0x8>
 8001b86:	bf00      	nop
 8001b88:	20000418 	.word	0x20000418
 8001b8c:	200003c4 	.word	0x200003c4

08001b90 <CoolerFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CoolerFunction */
void CoolerFunction(void const * argument)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CoolerFunction */
  /* Infinite loop */
  for(;;)
  {
	  coolerOn(&htim2, &hadc1);
 8001b98:	4902      	ldr	r1, [pc, #8]	@ (8001ba4 <CoolerFunction+0x14>)
 8001b9a:	4803      	ldr	r0, [pc, #12]	@ (8001ba8 <CoolerFunction+0x18>)
 8001b9c:	f7ff faa8 	bl	80010f0 <coolerOn>
 8001ba0:	e7fa      	b.n	8001b98 <CoolerFunction+0x8>
 8001ba2:	bf00      	nop
 8001ba4:	20000394 	.word	0x20000394
 8001ba8:	20000460 	.word	0x20000460

08001bac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a04      	ldr	r2, [pc, #16]	@ (8001bcc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d101      	bne.n	8001bc2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001bbe:	f000 fa3d 	bl	800203c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40000400 	.word	0x40000400

08001bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd4:	b672      	cpsid	i
}
 8001bd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bd8:	bf00      	nop
 8001bda:	e7fd      	b.n	8001bd8 <Error_Handler+0x8>

08001bdc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001be2:	4b18      	ldr	r3, [pc, #96]	@ (8001c44 <HAL_MspInit+0x68>)
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	4a17      	ldr	r2, [pc, #92]	@ (8001c44 <HAL_MspInit+0x68>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	6193      	str	r3, [r2, #24]
 8001bee:	4b15      	ldr	r3, [pc, #84]	@ (8001c44 <HAL_MspInit+0x68>)
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	60bb      	str	r3, [r7, #8]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bfa:	4b12      	ldr	r3, [pc, #72]	@ (8001c44 <HAL_MspInit+0x68>)
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	4a11      	ldr	r2, [pc, #68]	@ (8001c44 <HAL_MspInit+0x68>)
 8001c00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c04:	61d3      	str	r3, [r2, #28]
 8001c06:	4b0f      	ldr	r3, [pc, #60]	@ (8001c44 <HAL_MspInit+0x68>)
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c0e:	607b      	str	r3, [r7, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c12:	2200      	movs	r2, #0
 8001c14:	210f      	movs	r1, #15
 8001c16:	f06f 0001 	mvn.w	r0, #1
 8001c1a:	f000 ff0c 	bl	8002a36 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c48 <HAL_MspInit+0x6c>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	4a04      	ldr	r2, [pc, #16]	@ (8001c48 <HAL_MspInit+0x6c>)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40021000 	.word	0x40021000
 8001c48:	40010000 	.word	0x40010000

08001c4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b088      	sub	sp, #32
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c54:	f107 0310 	add.w	r3, r7, #16
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a14      	ldr	r2, [pc, #80]	@ (8001cb8 <HAL_ADC_MspInit+0x6c>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d121      	bne.n	8001cb0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c6c:	4b13      	ldr	r3, [pc, #76]	@ (8001cbc <HAL_ADC_MspInit+0x70>)
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	4a12      	ldr	r2, [pc, #72]	@ (8001cbc <HAL_ADC_MspInit+0x70>)
 8001c72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c76:	6193      	str	r3, [r2, #24]
 8001c78:	4b10      	ldr	r3, [pc, #64]	@ (8001cbc <HAL_ADC_MspInit+0x70>)
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c84:	4b0d      	ldr	r3, [pc, #52]	@ (8001cbc <HAL_ADC_MspInit+0x70>)
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	4a0c      	ldr	r2, [pc, #48]	@ (8001cbc <HAL_ADC_MspInit+0x70>)
 8001c8a:	f043 0304 	orr.w	r3, r3, #4
 8001c8e:	6193      	str	r3, [r2, #24]
 8001c90:	4b0a      	ldr	r3, [pc, #40]	@ (8001cbc <HAL_ADC_MspInit+0x70>)
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca4:	f107 0310 	add.w	r3, r7, #16
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4805      	ldr	r0, [pc, #20]	@ (8001cc0 <HAL_ADC_MspInit+0x74>)
 8001cac:	f000 feee 	bl	8002a8c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001cb0:	bf00      	nop
 8001cb2:	3720      	adds	r7, #32
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40012400 	.word	0x40012400
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	40010800 	.word	0x40010800

08001cc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b088      	sub	sp, #32
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ccc:	f107 0310 	add.w	r3, r7, #16
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a16      	ldr	r2, [pc, #88]	@ (8001d38 <HAL_I2C_MspInit+0x74>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d125      	bne.n	8001d30 <HAL_I2C_MspInit+0x6c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce4:	4b15      	ldr	r3, [pc, #84]	@ (8001d3c <HAL_I2C_MspInit+0x78>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	4a14      	ldr	r2, [pc, #80]	@ (8001d3c <HAL_I2C_MspInit+0x78>)
 8001cea:	f043 0308 	orr.w	r3, r3, #8
 8001cee:	6193      	str	r3, [r2, #24]
 8001cf0:	4b12      	ldr	r3, [pc, #72]	@ (8001d3c <HAL_I2C_MspInit+0x78>)
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	f003 0308 	and.w	r3, r3, #8
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cfc:	23c0      	movs	r3, #192	@ 0xc0
 8001cfe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d00:	2312      	movs	r3, #18
 8001d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d0c:	f107 0310 	add.w	r3, r7, #16
 8001d10:	4619      	mov	r1, r3
 8001d12:	480b      	ldr	r0, [pc, #44]	@ (8001d40 <HAL_I2C_MspInit+0x7c>)
 8001d14:	f000 feba 	bl	8002a8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d18:	4b08      	ldr	r3, [pc, #32]	@ (8001d3c <HAL_I2C_MspInit+0x78>)
 8001d1a:	69db      	ldr	r3, [r3, #28]
 8001d1c:	4a07      	ldr	r2, [pc, #28]	@ (8001d3c <HAL_I2C_MspInit+0x78>)
 8001d1e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d22:	61d3      	str	r3, [r2, #28]
 8001d24:	4b05      	ldr	r3, [pc, #20]	@ (8001d3c <HAL_I2C_MspInit+0x78>)
 8001d26:	69db      	ldr	r3, [r3, #28]
 8001d28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d2c:	60bb      	str	r3, [r7, #8]
 8001d2e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001d30:	bf00      	nop
 8001d32:	3720      	adds	r7, #32
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40005400 	.word	0x40005400
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	40010c00 	.word	0x40010c00

08001d44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a12      	ldr	r2, [pc, #72]	@ (8001d9c <HAL_TIM_Base_MspInit+0x58>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d10c      	bne.n	8001d70 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d56:	4b12      	ldr	r3, [pc, #72]	@ (8001da0 <HAL_TIM_Base_MspInit+0x5c>)
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	4a11      	ldr	r2, [pc, #68]	@ (8001da0 <HAL_TIM_Base_MspInit+0x5c>)
 8001d5c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d60:	6193      	str	r3, [r2, #24]
 8001d62:	4b0f      	ldr	r3, [pc, #60]	@ (8001da0 <HAL_TIM_Base_MspInit+0x5c>)
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d6e:	e010      	b.n	8001d92 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d78:	d10b      	bne.n	8001d92 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d7a:	4b09      	ldr	r3, [pc, #36]	@ (8001da0 <HAL_TIM_Base_MspInit+0x5c>)
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	4a08      	ldr	r2, [pc, #32]	@ (8001da0 <HAL_TIM_Base_MspInit+0x5c>)
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	61d3      	str	r3, [r2, #28]
 8001d86:	4b06      	ldr	r3, [pc, #24]	@ (8001da0 <HAL_TIM_Base_MspInit+0x5c>)
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	60bb      	str	r3, [r7, #8]
 8001d90:	68bb      	ldr	r3, [r7, #8]
}
 8001d92:	bf00      	nop
 8001d94:	3714      	adds	r7, #20
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr
 8001d9c:	40012c00 	.word	0x40012c00
 8001da0:	40021000 	.word	0x40021000

08001da4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08a      	sub	sp, #40	@ 0x28
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dac:	f107 0314 	add.w	r3, r7, #20
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a28      	ldr	r2, [pc, #160]	@ (8001e60 <HAL_TIM_MspPostInit+0xbc>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d119      	bne.n	8001df8 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc4:	4b27      	ldr	r3, [pc, #156]	@ (8001e64 <HAL_TIM_MspPostInit+0xc0>)
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	4a26      	ldr	r2, [pc, #152]	@ (8001e64 <HAL_TIM_MspPostInit+0xc0>)
 8001dca:	f043 0304 	orr.w	r3, r3, #4
 8001dce:	6193      	str	r3, [r2, #24]
 8001dd0:	4b24      	ldr	r3, [pc, #144]	@ (8001e64 <HAL_TIM_MspPostInit+0xc0>)
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	f003 0304 	and.w	r3, r3, #4
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ddc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de2:	2302      	movs	r3, #2
 8001de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de6:	2302      	movs	r3, #2
 8001de8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dea:	f107 0314 	add.w	r3, r7, #20
 8001dee:	4619      	mov	r1, r3
 8001df0:	481d      	ldr	r0, [pc, #116]	@ (8001e68 <HAL_TIM_MspPostInit+0xc4>)
 8001df2:	f000 fe4b 	bl	8002a8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001df6:	e02e      	b.n	8001e56 <HAL_TIM_MspPostInit+0xb2>
  else if(htim->Instance==TIM2)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e00:	d129      	bne.n	8001e56 <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e02:	4b18      	ldr	r3, [pc, #96]	@ (8001e64 <HAL_TIM_MspPostInit+0xc0>)
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	4a17      	ldr	r2, [pc, #92]	@ (8001e64 <HAL_TIM_MspPostInit+0xc0>)
 8001e08:	f043 0308 	orr.w	r3, r3, #8
 8001e0c:	6193      	str	r3, [r2, #24]
 8001e0e:	4b15      	ldr	r3, [pc, #84]	@ (8001e64 <HAL_TIM_MspPostInit+0xc0>)
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	f003 0308 	and.w	r3, r3, #8
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e1a:	2308      	movs	r3, #8
 8001e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e22:	2302      	movs	r3, #2
 8001e24:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e26:	f107 0314 	add.w	r3, r7, #20
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	480f      	ldr	r0, [pc, #60]	@ (8001e6c <HAL_TIM_MspPostInit+0xc8>)
 8001e2e:	f000 fe2d 	bl	8002a8c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001e32:	4b0f      	ldr	r3, [pc, #60]	@ (8001e70 <HAL_TIM_MspPostInit+0xcc>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e42:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001e46:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e50:	4a07      	ldr	r2, [pc, #28]	@ (8001e70 <HAL_TIM_MspPostInit+0xcc>)
 8001e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e54:	6053      	str	r3, [r2, #4]
}
 8001e56:	bf00      	nop
 8001e58:	3728      	adds	r7, #40	@ 0x28
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40012c00 	.word	0x40012c00
 8001e64:	40021000 	.word	0x40021000
 8001e68:	40010800 	.word	0x40010800
 8001e6c:	40010c00 	.word	0x40010c00
 8001e70:	40010000 	.word	0x40010000

08001e74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08e      	sub	sp, #56	@ 0x38
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001e80:	2300      	movs	r3, #0
 8001e82:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001e84:	2300      	movs	r3, #0
 8001e86:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001e8a:	4b34      	ldr	r3, [pc, #208]	@ (8001f5c <HAL_InitTick+0xe8>)
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	4a33      	ldr	r2, [pc, #204]	@ (8001f5c <HAL_InitTick+0xe8>)
 8001e90:	f043 0302 	orr.w	r3, r3, #2
 8001e94:	61d3      	str	r3, [r2, #28]
 8001e96:	4b31      	ldr	r3, [pc, #196]	@ (8001f5c <HAL_InitTick+0xe8>)
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ea2:	f107 0210 	add.w	r2, r7, #16
 8001ea6:	f107 0314 	add.w	r3, r7, #20
 8001eaa:	4611      	mov	r1, r2
 8001eac:	4618      	mov	r0, r3
 8001eae:	f002 fb2f 	bl	8004510 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001eb2:	6a3b      	ldr	r3, [r7, #32]
 8001eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d103      	bne.n	8001ec4 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001ebc:	f002 fb00 	bl	80044c0 <HAL_RCC_GetPCLK1Freq>
 8001ec0:	6378      	str	r0, [r7, #52]	@ 0x34
 8001ec2:	e004      	b.n	8001ece <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001ec4:	f002 fafc 	bl	80044c0 <HAL_RCC_GetPCLK1Freq>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ed0:	4a23      	ldr	r2, [pc, #140]	@ (8001f60 <HAL_InitTick+0xec>)
 8001ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed6:	0c9b      	lsrs	r3, r3, #18
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001edc:	4b21      	ldr	r3, [pc, #132]	@ (8001f64 <HAL_InitTick+0xf0>)
 8001ede:	4a22      	ldr	r2, [pc, #136]	@ (8001f68 <HAL_InitTick+0xf4>)
 8001ee0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8001ee2:	4b20      	ldr	r3, [pc, #128]	@ (8001f64 <HAL_InitTick+0xf0>)
 8001ee4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ee8:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8001eea:	4a1e      	ldr	r2, [pc, #120]	@ (8001f64 <HAL_InitTick+0xf0>)
 8001eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eee:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001ef0:	4b1c      	ldr	r3, [pc, #112]	@ (8001f64 <HAL_InitTick+0xf0>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef6:	4b1b      	ldr	r3, [pc, #108]	@ (8001f64 <HAL_InitTick+0xf0>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001efc:	4b19      	ldr	r3, [pc, #100]	@ (8001f64 <HAL_InitTick+0xf0>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8001f02:	4818      	ldr	r0, [pc, #96]	@ (8001f64 <HAL_InitTick+0xf0>)
 8001f04:	f002 fcbe 	bl	8004884 <HAL_TIM_Base_Init>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001f0e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d11b      	bne.n	8001f4e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8001f16:	4813      	ldr	r0, [pc, #76]	@ (8001f64 <HAL_InitTick+0xf0>)
 8001f18:	f002 fd04 	bl	8004924 <HAL_TIM_Base_Start_IT>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001f22:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d111      	bne.n	8001f4e <HAL_InitTick+0xda>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f2a:	201d      	movs	r0, #29
 8001f2c:	f000 fd9f 	bl	8002a6e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b0f      	cmp	r3, #15
 8001f34:	d808      	bhi.n	8001f48 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8001f36:	2200      	movs	r2, #0
 8001f38:	6879      	ldr	r1, [r7, #4]
 8001f3a:	201d      	movs	r0, #29
 8001f3c:	f000 fd7b 	bl	8002a36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f40:	4a0a      	ldr	r2, [pc, #40]	@ (8001f6c <HAL_InitTick+0xf8>)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6013      	str	r3, [r2, #0]
 8001f46:	e002      	b.n	8001f4e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001f4e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3738      	adds	r7, #56	@ 0x38
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	431bde83 	.word	0x431bde83
 8001f64:	200004b4 	.word	0x200004b4
 8001f68:	40000400 	.word	0x40000400
 8001f6c:	20000008 	.word	0x20000008

08001f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f74:	bf00      	nop
 8001f76:	e7fd      	b.n	8001f74 <NMI_Handler+0x4>

08001f78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f7c:	bf00      	nop
 8001f7e:	e7fd      	b.n	8001f7c <HardFault_Handler+0x4>

08001f80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f84:	bf00      	nop
 8001f86:	e7fd      	b.n	8001f84 <MemManage_Handler+0x4>

08001f88 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f8c:	bf00      	nop
 8001f8e:	e7fd      	b.n	8001f8c <BusFault_Handler+0x4>

08001f90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f94:	bf00      	nop
 8001f96:	e7fd      	b.n	8001f94 <UsageFault_Handler+0x4>

08001f98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr

08001fa4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001fa8:	4802      	ldr	r0, [pc, #8]	@ (8001fb4 <TIM3_IRQHandler+0x10>)
 8001faa:	f002 fdfb 	bl	8004ba4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	200004b4 	.word	0x200004b4

08001fb8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr

08001fc4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fc4:	f7ff fff8 	bl	8001fb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fc8:	480b      	ldr	r0, [pc, #44]	@ (8001ff8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001fca:	490c      	ldr	r1, [pc, #48]	@ (8001ffc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001fcc:	4a0c      	ldr	r2, [pc, #48]	@ (8002000 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001fce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fd0:	e002      	b.n	8001fd8 <LoopCopyDataInit>

08001fd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fd6:	3304      	adds	r3, #4

08001fd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fdc:	d3f9      	bcc.n	8001fd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fde:	4a09      	ldr	r2, [pc, #36]	@ (8002004 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001fe0:	4c09      	ldr	r4, [pc, #36]	@ (8002008 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fe2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fe4:	e001      	b.n	8001fea <LoopFillZerobss>

08001fe6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fe6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fe8:	3204      	adds	r2, #4

08001fea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fec:	d3fb      	bcc.n	8001fe6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fee:	f004 fe5f 	bl	8006cb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ff2:	f7ff fb21 	bl	8001638 <main>
  bx lr
 8001ff6:	4770      	bx	lr
  ldr r0, =_sdata
 8001ff8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ffc:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8002000:	08007254 	.word	0x08007254
  ldr r2, =_sbss
 8002004:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8002008:	20001394 	.word	0x20001394

0800200c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800200c:	e7fe      	b.n	800200c <ADC1_2_IRQHandler>
	...

08002010 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002014:	4b08      	ldr	r3, [pc, #32]	@ (8002038 <HAL_Init+0x28>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a07      	ldr	r2, [pc, #28]	@ (8002038 <HAL_Init+0x28>)
 800201a:	f043 0310 	orr.w	r3, r3, #16
 800201e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002020:	2003      	movs	r0, #3
 8002022:	f000 fcfd 	bl	8002a20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002026:	200f      	movs	r0, #15
 8002028:	f7ff ff24 	bl	8001e74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800202c:	f7ff fdd6 	bl	8001bdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40022000 	.word	0x40022000

0800203c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002040:	4b05      	ldr	r3, [pc, #20]	@ (8002058 <HAL_IncTick+0x1c>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	461a      	mov	r2, r3
 8002046:	4b05      	ldr	r3, [pc, #20]	@ (800205c <HAL_IncTick+0x20>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4413      	add	r3, r2
 800204c:	4a03      	ldr	r2, [pc, #12]	@ (800205c <HAL_IncTick+0x20>)
 800204e:	6013      	str	r3, [r2, #0]
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	bc80      	pop	{r7}
 8002056:	4770      	bx	lr
 8002058:	2000000c 	.word	0x2000000c
 800205c:	200004fc 	.word	0x200004fc

08002060 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return uwTick;
 8002064:	4b02      	ldr	r3, [pc, #8]	@ (8002070 <HAL_GetTick+0x10>)
 8002066:	681b      	ldr	r3, [r3, #0]
}
 8002068:	4618      	mov	r0, r3
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr
 8002070:	200004fc 	.word	0x200004fc

08002074 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800207c:	2300      	movs	r3, #0
 800207e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002080:	2300      	movs	r3, #0
 8002082:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002084:	2300      	movs	r3, #0
 8002086:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002088:	2300      	movs	r3, #0
 800208a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e0be      	b.n	8002214 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d109      	bne.n	80020b8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7ff fdca 	bl	8001c4c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 fbc5 	bl	8002848 <ADC_ConversionStop_Disable>
 80020be:	4603      	mov	r3, r0
 80020c0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c6:	f003 0310 	and.w	r3, r3, #16
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f040 8099 	bne.w	8002202 <HAL_ADC_Init+0x18e>
 80020d0:	7dfb      	ldrb	r3, [r7, #23]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f040 8095 	bne.w	8002202 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020dc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80020e0:	f023 0302 	bic.w	r3, r3, #2
 80020e4:	f043 0202 	orr.w	r2, r3, #2
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020f4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	7b1b      	ldrb	r3, [r3, #12]
 80020fa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80020fc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020fe:	68ba      	ldr	r2, [r7, #8]
 8002100:	4313      	orrs	r3, r2
 8002102:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800210c:	d003      	beq.n	8002116 <HAL_ADC_Init+0xa2>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d102      	bne.n	800211c <HAL_ADC_Init+0xa8>
 8002116:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800211a:	e000      	b.n	800211e <HAL_ADC_Init+0xaa>
 800211c:	2300      	movs	r3, #0
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	4313      	orrs	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	7d1b      	ldrb	r3, [r3, #20]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d119      	bne.n	8002160 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	7b1b      	ldrb	r3, [r3, #12]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d109      	bne.n	8002148 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	3b01      	subs	r3, #1
 800213a:	035a      	lsls	r2, r3, #13
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	4313      	orrs	r3, r2
 8002140:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	e00b      	b.n	8002160 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800214c:	f043 0220 	orr.w	r2, r3, #32
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002158:	f043 0201 	orr.w	r2, r3, #1
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	430a      	orrs	r2, r1
 8002172:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	4b28      	ldr	r3, [pc, #160]	@ (800221c <HAL_ADC_Init+0x1a8>)
 800217c:	4013      	ands	r3, r2
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	6812      	ldr	r2, [r2, #0]
 8002182:	68b9      	ldr	r1, [r7, #8]
 8002184:	430b      	orrs	r3, r1
 8002186:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002190:	d003      	beq.n	800219a <HAL_ADC_Init+0x126>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d104      	bne.n	80021a4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	3b01      	subs	r3, #1
 80021a0:	051b      	lsls	r3, r3, #20
 80021a2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021aa:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	430a      	orrs	r2, r1
 80021b6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	4b18      	ldr	r3, [pc, #96]	@ (8002220 <HAL_ADC_Init+0x1ac>)
 80021c0:	4013      	ands	r3, r2
 80021c2:	68ba      	ldr	r2, [r7, #8]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d10b      	bne.n	80021e0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d2:	f023 0303 	bic.w	r3, r3, #3
 80021d6:	f043 0201 	orr.w	r2, r3, #1
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021de:	e018      	b.n	8002212 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021e4:	f023 0312 	bic.w	r3, r3, #18
 80021e8:	f043 0210 	orr.w	r2, r3, #16
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f4:	f043 0201 	orr.w	r2, r3, #1
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002200:	e007      	b.n	8002212 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002206:	f043 0210 	orr.w	r2, r3, #16
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002212:	7dfb      	ldrb	r3, [r7, #23]
}
 8002214:	4618      	mov	r0, r3
 8002216:	3718      	adds	r7, #24
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	ffe1f7fd 	.word	0xffe1f7fd
 8002220:	ff1f0efe 	.word	0xff1f0efe

08002224 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800222c:	2300      	movs	r3, #0
 800222e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002236:	2b01      	cmp	r3, #1
 8002238:	d101      	bne.n	800223e <HAL_ADC_Start+0x1a>
 800223a:	2302      	movs	r3, #2
 800223c:	e098      	b.n	8002370 <HAL_ADC_Start+0x14c>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 faa4 	bl	8002794 <ADC_Enable>
 800224c:	4603      	mov	r3, r0
 800224e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	2b00      	cmp	r3, #0
 8002254:	f040 8087 	bne.w	8002366 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800225c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002260:	f023 0301 	bic.w	r3, r3, #1
 8002264:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a41      	ldr	r2, [pc, #260]	@ (8002378 <HAL_ADC_Start+0x154>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d105      	bne.n	8002282 <HAL_ADC_Start+0x5e>
 8002276:	4b41      	ldr	r3, [pc, #260]	@ (800237c <HAL_ADC_Start+0x158>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d115      	bne.n	80022ae <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002286:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002298:	2b00      	cmp	r3, #0
 800229a:	d026      	beq.n	80022ea <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80022a4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022ac:	e01d      	b.n	80022ea <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a2f      	ldr	r2, [pc, #188]	@ (800237c <HAL_ADC_Start+0x158>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d004      	beq.n	80022ce <HAL_ADC_Start+0xaa>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a2b      	ldr	r2, [pc, #172]	@ (8002378 <HAL_ADC_Start+0x154>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d10d      	bne.n	80022ea <HAL_ADC_Start+0xc6>
 80022ce:	4b2b      	ldr	r3, [pc, #172]	@ (800237c <HAL_ADC_Start+0x158>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d007      	beq.n	80022ea <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022de:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80022e2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d006      	beq.n	8002304 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022fa:	f023 0206 	bic.w	r2, r3, #6
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002302:	e002      	b.n	800230a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f06f 0202 	mvn.w	r2, #2
 800231a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002326:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800232a:	d113      	bne.n	8002354 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002330:	4a11      	ldr	r2, [pc, #68]	@ (8002378 <HAL_ADC_Start+0x154>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d105      	bne.n	8002342 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002336:	4b11      	ldr	r3, [pc, #68]	@ (800237c <HAL_ADC_Start+0x158>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800233e:	2b00      	cmp	r3, #0
 8002340:	d108      	bne.n	8002354 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002350:	609a      	str	r2, [r3, #8]
 8002352:	e00c      	b.n	800236e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	e003      	b.n	800236e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800236e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40012800 	.word	0x40012800
 800237c:	40012400 	.word	0x40012400

08002380 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002380:	b590      	push	{r4, r7, lr}
 8002382:	b087      	sub	sp, #28
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800238a:	2300      	movs	r3, #0
 800238c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800238e:	2300      	movs	r3, #0
 8002390:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002392:	2300      	movs	r3, #0
 8002394:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002396:	f7ff fe63 	bl	8002060 <HAL_GetTick>
 800239a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00b      	beq.n	80023c2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ae:	f043 0220 	orr.w	r2, r3, #32
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e0d3      	b.n	800256a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d131      	bne.n	8002434 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d12a      	bne.n	8002434 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80023de:	e021      	b.n	8002424 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80023e6:	d01d      	beq.n	8002424 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d007      	beq.n	80023fe <HAL_ADC_PollForConversion+0x7e>
 80023ee:	f7ff fe37 	bl	8002060 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d212      	bcs.n	8002424 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d10b      	bne.n	8002424 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002410:	f043 0204 	orr.w	r2, r3, #4
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e0a2      	b.n	800256a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0d6      	beq.n	80023e0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002432:	e070      	b.n	8002516 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002434:	4b4f      	ldr	r3, [pc, #316]	@ (8002574 <HAL_ADC_PollForConversion+0x1f4>)
 8002436:	681c      	ldr	r4, [r3, #0]
 8002438:	2002      	movs	r0, #2
 800243a:	f002 f96d 	bl	8004718 <HAL_RCCEx_GetPeriphCLKFreq>
 800243e:	4603      	mov	r3, r0
 8002440:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6919      	ldr	r1, [r3, #16]
 800244a:	4b4b      	ldr	r3, [pc, #300]	@ (8002578 <HAL_ADC_PollForConversion+0x1f8>)
 800244c:	400b      	ands	r3, r1
 800244e:	2b00      	cmp	r3, #0
 8002450:	d118      	bne.n	8002484 <HAL_ADC_PollForConversion+0x104>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68d9      	ldr	r1, [r3, #12]
 8002458:	4b48      	ldr	r3, [pc, #288]	@ (800257c <HAL_ADC_PollForConversion+0x1fc>)
 800245a:	400b      	ands	r3, r1
 800245c:	2b00      	cmp	r3, #0
 800245e:	d111      	bne.n	8002484 <HAL_ADC_PollForConversion+0x104>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6919      	ldr	r1, [r3, #16]
 8002466:	4b46      	ldr	r3, [pc, #280]	@ (8002580 <HAL_ADC_PollForConversion+0x200>)
 8002468:	400b      	ands	r3, r1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d108      	bne.n	8002480 <HAL_ADC_PollForConversion+0x100>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68d9      	ldr	r1, [r3, #12]
 8002474:	4b43      	ldr	r3, [pc, #268]	@ (8002584 <HAL_ADC_PollForConversion+0x204>)
 8002476:	400b      	ands	r3, r1
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <HAL_ADC_PollForConversion+0x100>
 800247c:	2314      	movs	r3, #20
 800247e:	e020      	b.n	80024c2 <HAL_ADC_PollForConversion+0x142>
 8002480:	2329      	movs	r3, #41	@ 0x29
 8002482:	e01e      	b.n	80024c2 <HAL_ADC_PollForConversion+0x142>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6919      	ldr	r1, [r3, #16]
 800248a:	4b3d      	ldr	r3, [pc, #244]	@ (8002580 <HAL_ADC_PollForConversion+0x200>)
 800248c:	400b      	ands	r3, r1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d106      	bne.n	80024a0 <HAL_ADC_PollForConversion+0x120>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68d9      	ldr	r1, [r3, #12]
 8002498:	4b3a      	ldr	r3, [pc, #232]	@ (8002584 <HAL_ADC_PollForConversion+0x204>)
 800249a:	400b      	ands	r3, r1
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00d      	beq.n	80024bc <HAL_ADC_PollForConversion+0x13c>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6919      	ldr	r1, [r3, #16]
 80024a6:	4b38      	ldr	r3, [pc, #224]	@ (8002588 <HAL_ADC_PollForConversion+0x208>)
 80024a8:	400b      	ands	r3, r1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d108      	bne.n	80024c0 <HAL_ADC_PollForConversion+0x140>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68d9      	ldr	r1, [r3, #12]
 80024b4:	4b34      	ldr	r3, [pc, #208]	@ (8002588 <HAL_ADC_PollForConversion+0x208>)
 80024b6:	400b      	ands	r3, r1
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <HAL_ADC_PollForConversion+0x140>
 80024bc:	2354      	movs	r3, #84	@ 0x54
 80024be:	e000      	b.n	80024c2 <HAL_ADC_PollForConversion+0x142>
 80024c0:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80024c2:	fb02 f303 	mul.w	r3, r2, r3
 80024c6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80024c8:	e021      	b.n	800250e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80024d0:	d01a      	beq.n	8002508 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d007      	beq.n	80024e8 <HAL_ADC_PollForConversion+0x168>
 80024d8:	f7ff fdc2 	bl	8002060 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d20f      	bcs.n	8002508 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d90b      	bls.n	8002508 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f4:	f043 0204 	orr.w	r2, r3, #4
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e030      	b.n	800256a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	3301      	adds	r3, #1
 800250c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	429a      	cmp	r2, r3
 8002514:	d8d9      	bhi.n	80024ca <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f06f 0212 	mvn.w	r2, #18
 800251e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002524:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002536:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800253a:	d115      	bne.n	8002568 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002540:	2b00      	cmp	r3, #0
 8002542:	d111      	bne.n	8002568 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002548:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002554:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d105      	bne.n	8002568 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002560:	f043 0201 	orr.w	r2, r3, #1
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	371c      	adds	r7, #28
 800256e:	46bd      	mov	sp, r7
 8002570:	bd90      	pop	{r4, r7, pc}
 8002572:	bf00      	nop
 8002574:	20000004 	.word	0x20000004
 8002578:	24924924 	.word	0x24924924
 800257c:	00924924 	.word	0x00924924
 8002580:	12492492 	.word	0x12492492
 8002584:	00492492 	.word	0x00492492
 8002588:	00249249 	.word	0x00249249

0800258c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800259a:	4618      	mov	r0, r3
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr

080025a4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ae:	2300      	movs	r3, #0
 80025b0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80025b2:	2300      	movs	r3, #0
 80025b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d101      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x20>
 80025c0:	2302      	movs	r3, #2
 80025c2:	e0dc      	b.n	800277e <HAL_ADC_ConfigChannel+0x1da>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	2b06      	cmp	r3, #6
 80025d2:	d81c      	bhi.n	800260e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685a      	ldr	r2, [r3, #4]
 80025de:	4613      	mov	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	3b05      	subs	r3, #5
 80025e6:	221f      	movs	r2, #31
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	43db      	mvns	r3, r3
 80025ee:	4019      	ands	r1, r3
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	6818      	ldr	r0, [r3, #0]
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	4613      	mov	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4413      	add	r3, r2
 80025fe:	3b05      	subs	r3, #5
 8002600:	fa00 f203 	lsl.w	r2, r0, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	430a      	orrs	r2, r1
 800260a:	635a      	str	r2, [r3, #52]	@ 0x34
 800260c:	e03c      	b.n	8002688 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	2b0c      	cmp	r3, #12
 8002614:	d81c      	bhi.n	8002650 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	4613      	mov	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	3b23      	subs	r3, #35	@ 0x23
 8002628:	221f      	movs	r2, #31
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	43db      	mvns	r3, r3
 8002630:	4019      	ands	r1, r3
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	6818      	ldr	r0, [r3, #0]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	4613      	mov	r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	4413      	add	r3, r2
 8002640:	3b23      	subs	r3, #35	@ 0x23
 8002642:	fa00 f203 	lsl.w	r2, r0, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	430a      	orrs	r2, r1
 800264c:	631a      	str	r2, [r3, #48]	@ 0x30
 800264e:	e01b      	b.n	8002688 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	4613      	mov	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	3b41      	subs	r3, #65	@ 0x41
 8002662:	221f      	movs	r2, #31
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	43db      	mvns	r3, r3
 800266a:	4019      	ands	r1, r3
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	6818      	ldr	r0, [r3, #0]
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	4613      	mov	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	4413      	add	r3, r2
 800267a:	3b41      	subs	r3, #65	@ 0x41
 800267c:	fa00 f203 	lsl.w	r2, r0, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2b09      	cmp	r3, #9
 800268e:	d91c      	bls.n	80026ca <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68d9      	ldr	r1, [r3, #12]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	4613      	mov	r3, r2
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	4413      	add	r3, r2
 80026a0:	3b1e      	subs	r3, #30
 80026a2:	2207      	movs	r2, #7
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	43db      	mvns	r3, r3
 80026aa:	4019      	ands	r1, r3
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	6898      	ldr	r0, [r3, #8]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	4613      	mov	r3, r2
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	4413      	add	r3, r2
 80026ba:	3b1e      	subs	r3, #30
 80026bc:	fa00 f203 	lsl.w	r2, r0, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	60da      	str	r2, [r3, #12]
 80026c8:	e019      	b.n	80026fe <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	6919      	ldr	r1, [r3, #16]
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	4613      	mov	r3, r2
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	4413      	add	r3, r2
 80026da:	2207      	movs	r2, #7
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	4019      	ands	r1, r3
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	6898      	ldr	r0, [r3, #8]
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	4613      	mov	r3, r2
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	4413      	add	r3, r2
 80026f2:	fa00 f203 	lsl.w	r2, r0, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2b10      	cmp	r3, #16
 8002704:	d003      	beq.n	800270e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800270a:	2b11      	cmp	r3, #17
 800270c:	d132      	bne.n	8002774 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a1d      	ldr	r2, [pc, #116]	@ (8002788 <HAL_ADC_ConfigChannel+0x1e4>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d125      	bne.n	8002764 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d126      	bne.n	8002774 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002734:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2b10      	cmp	r3, #16
 800273c:	d11a      	bne.n	8002774 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800273e:	4b13      	ldr	r3, [pc, #76]	@ (800278c <HAL_ADC_ConfigChannel+0x1e8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a13      	ldr	r2, [pc, #76]	@ (8002790 <HAL_ADC_ConfigChannel+0x1ec>)
 8002744:	fba2 2303 	umull	r2, r3, r2, r3
 8002748:	0c9a      	lsrs	r2, r3, #18
 800274a:	4613      	mov	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002754:	e002      	b.n	800275c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	3b01      	subs	r3, #1
 800275a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1f9      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x1b2>
 8002762:	e007      	b.n	8002774 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002768:	f043 0220 	orr.w	r2, r3, #32
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800277c:	7bfb      	ldrb	r3, [r7, #15]
}
 800277e:	4618      	mov	r0, r3
 8002780:	3714      	adds	r7, #20
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr
 8002788:	40012400 	.word	0x40012400
 800278c:	20000004 	.word	0x20000004
 8002790:	431bde83 	.word	0x431bde83

08002794 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800279c:	2300      	movs	r3, #0
 800279e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80027a0:	2300      	movs	r3, #0
 80027a2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d040      	beq.n	8002834 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	689a      	ldr	r2, [r3, #8]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f042 0201 	orr.w	r2, r2, #1
 80027c0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80027c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002840 <ADC_Enable+0xac>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a1f      	ldr	r2, [pc, #124]	@ (8002844 <ADC_Enable+0xb0>)
 80027c8:	fba2 2303 	umull	r2, r3, r2, r3
 80027cc:	0c9b      	lsrs	r3, r3, #18
 80027ce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80027d0:	e002      	b.n	80027d8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	3b01      	subs	r3, #1
 80027d6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1f9      	bne.n	80027d2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80027de:	f7ff fc3f 	bl	8002060 <HAL_GetTick>
 80027e2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80027e4:	e01f      	b.n	8002826 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80027e6:	f7ff fc3b 	bl	8002060 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d918      	bls.n	8002826 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d011      	beq.n	8002826 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002806:	f043 0210 	orr.w	r2, r3, #16
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002812:	f043 0201 	orr.w	r2, r3, #1
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e007      	b.n	8002836 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b01      	cmp	r3, #1
 8002832:	d1d8      	bne.n	80027e6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	20000004 	.word	0x20000004
 8002844:	431bde83 	.word	0x431bde83

08002848 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002850:	2300      	movs	r3, #0
 8002852:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b01      	cmp	r3, #1
 8002860:	d12e      	bne.n	80028c0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 0201 	bic.w	r2, r2, #1
 8002870:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002872:	f7ff fbf5 	bl	8002060 <HAL_GetTick>
 8002876:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002878:	e01b      	b.n	80028b2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800287a:	f7ff fbf1 	bl	8002060 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d914      	bls.n	80028b2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b01      	cmp	r3, #1
 8002894:	d10d      	bne.n	80028b2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800289a:	f043 0210 	orr.w	r2, r3, #16
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a6:	f043 0201 	orr.w	r2, r3, #1
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e007      	b.n	80028c2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d0dc      	beq.n	800287a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
	...

080028cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002910 <__NVIC_SetPriorityGrouping+0x44>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028e2:	68ba      	ldr	r2, [r7, #8]
 80028e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028e8:	4013      	ands	r3, r2
 80028ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028fe:	4a04      	ldr	r2, [pc, #16]	@ (8002910 <__NVIC_SetPriorityGrouping+0x44>)
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	60d3      	str	r3, [r2, #12]
}
 8002904:	bf00      	nop
 8002906:	3714      	adds	r7, #20
 8002908:	46bd      	mov	sp, r7
 800290a:	bc80      	pop	{r7}
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	e000ed00 	.word	0xe000ed00

08002914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002918:	4b04      	ldr	r3, [pc, #16]	@ (800292c <__NVIC_GetPriorityGrouping+0x18>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	0a1b      	lsrs	r3, r3, #8
 800291e:	f003 0307 	and.w	r3, r3, #7
}
 8002922:	4618      	mov	r0, r3
 8002924:	46bd      	mov	sp, r7
 8002926:	bc80      	pop	{r7}
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	e000ed00 	.word	0xe000ed00

08002930 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800293a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293e:	2b00      	cmp	r3, #0
 8002940:	db0b      	blt.n	800295a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002942:	79fb      	ldrb	r3, [r7, #7]
 8002944:	f003 021f 	and.w	r2, r3, #31
 8002948:	4906      	ldr	r1, [pc, #24]	@ (8002964 <__NVIC_EnableIRQ+0x34>)
 800294a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294e:	095b      	lsrs	r3, r3, #5
 8002950:	2001      	movs	r0, #1
 8002952:	fa00 f202 	lsl.w	r2, r0, r2
 8002956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800295a:	bf00      	nop
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	bc80      	pop	{r7}
 8002962:	4770      	bx	lr
 8002964:	e000e100 	.word	0xe000e100

08002968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	6039      	str	r1, [r7, #0]
 8002972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002978:	2b00      	cmp	r3, #0
 800297a:	db0a      	blt.n	8002992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	b2da      	uxtb	r2, r3
 8002980:	490c      	ldr	r1, [pc, #48]	@ (80029b4 <__NVIC_SetPriority+0x4c>)
 8002982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002986:	0112      	lsls	r2, r2, #4
 8002988:	b2d2      	uxtb	r2, r2
 800298a:	440b      	add	r3, r1
 800298c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002990:	e00a      	b.n	80029a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	b2da      	uxtb	r2, r3
 8002996:	4908      	ldr	r1, [pc, #32]	@ (80029b8 <__NVIC_SetPriority+0x50>)
 8002998:	79fb      	ldrb	r3, [r7, #7]
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	3b04      	subs	r3, #4
 80029a0:	0112      	lsls	r2, r2, #4
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	440b      	add	r3, r1
 80029a6:	761a      	strb	r2, [r3, #24]
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	e000e100 	.word	0xe000e100
 80029b8:	e000ed00 	.word	0xe000ed00

080029bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029bc:	b480      	push	{r7}
 80029be:	b089      	sub	sp, #36	@ 0x24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f003 0307 	and.w	r3, r3, #7
 80029ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	f1c3 0307 	rsb	r3, r3, #7
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	bf28      	it	cs
 80029da:	2304      	movcs	r3, #4
 80029dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	3304      	adds	r3, #4
 80029e2:	2b06      	cmp	r3, #6
 80029e4:	d902      	bls.n	80029ec <NVIC_EncodePriority+0x30>
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	3b03      	subs	r3, #3
 80029ea:	e000      	b.n	80029ee <NVIC_EncodePriority+0x32>
 80029ec:	2300      	movs	r3, #0
 80029ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	43da      	mvns	r2, r3
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	401a      	ands	r2, r3
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a04:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0e:	43d9      	mvns	r1, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a14:	4313      	orrs	r3, r2
         );
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3724      	adds	r7, #36	@ 0x24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr

08002a20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f7ff ff4f 	bl	80028cc <__NVIC_SetPriorityGrouping>
}
 8002a2e:	bf00      	nop
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b086      	sub	sp, #24
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	60b9      	str	r1, [r7, #8]
 8002a40:	607a      	str	r2, [r7, #4]
 8002a42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a44:	2300      	movs	r3, #0
 8002a46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a48:	f7ff ff64 	bl	8002914 <__NVIC_GetPriorityGrouping>
 8002a4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	68b9      	ldr	r1, [r7, #8]
 8002a52:	6978      	ldr	r0, [r7, #20]
 8002a54:	f7ff ffb2 	bl	80029bc <NVIC_EncodePriority>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a5e:	4611      	mov	r1, r2
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff ff81 	bl	8002968 <__NVIC_SetPriority>
}
 8002a66:	bf00      	nop
 8002a68:	3718      	adds	r7, #24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b082      	sub	sp, #8
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	4603      	mov	r3, r0
 8002a76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff ff57 	bl	8002930 <__NVIC_EnableIRQ>
}
 8002a82:	bf00      	nop
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
	...

08002a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b08b      	sub	sp, #44	@ 0x2c
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a96:	2300      	movs	r3, #0
 8002a98:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a9e:	e161      	b.n	8002d64 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	69fa      	ldr	r2, [r7, #28]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	f040 8150 	bne.w	8002d5e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	4a97      	ldr	r2, [pc, #604]	@ (8002d20 <HAL_GPIO_Init+0x294>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d05e      	beq.n	8002b86 <HAL_GPIO_Init+0xfa>
 8002ac8:	4a95      	ldr	r2, [pc, #596]	@ (8002d20 <HAL_GPIO_Init+0x294>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d875      	bhi.n	8002bba <HAL_GPIO_Init+0x12e>
 8002ace:	4a95      	ldr	r2, [pc, #596]	@ (8002d24 <HAL_GPIO_Init+0x298>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d058      	beq.n	8002b86 <HAL_GPIO_Init+0xfa>
 8002ad4:	4a93      	ldr	r2, [pc, #588]	@ (8002d24 <HAL_GPIO_Init+0x298>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d86f      	bhi.n	8002bba <HAL_GPIO_Init+0x12e>
 8002ada:	4a93      	ldr	r2, [pc, #588]	@ (8002d28 <HAL_GPIO_Init+0x29c>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d052      	beq.n	8002b86 <HAL_GPIO_Init+0xfa>
 8002ae0:	4a91      	ldr	r2, [pc, #580]	@ (8002d28 <HAL_GPIO_Init+0x29c>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d869      	bhi.n	8002bba <HAL_GPIO_Init+0x12e>
 8002ae6:	4a91      	ldr	r2, [pc, #580]	@ (8002d2c <HAL_GPIO_Init+0x2a0>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d04c      	beq.n	8002b86 <HAL_GPIO_Init+0xfa>
 8002aec:	4a8f      	ldr	r2, [pc, #572]	@ (8002d2c <HAL_GPIO_Init+0x2a0>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d863      	bhi.n	8002bba <HAL_GPIO_Init+0x12e>
 8002af2:	4a8f      	ldr	r2, [pc, #572]	@ (8002d30 <HAL_GPIO_Init+0x2a4>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d046      	beq.n	8002b86 <HAL_GPIO_Init+0xfa>
 8002af8:	4a8d      	ldr	r2, [pc, #564]	@ (8002d30 <HAL_GPIO_Init+0x2a4>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d85d      	bhi.n	8002bba <HAL_GPIO_Init+0x12e>
 8002afe:	2b12      	cmp	r3, #18
 8002b00:	d82a      	bhi.n	8002b58 <HAL_GPIO_Init+0xcc>
 8002b02:	2b12      	cmp	r3, #18
 8002b04:	d859      	bhi.n	8002bba <HAL_GPIO_Init+0x12e>
 8002b06:	a201      	add	r2, pc, #4	@ (adr r2, 8002b0c <HAL_GPIO_Init+0x80>)
 8002b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b0c:	08002b87 	.word	0x08002b87
 8002b10:	08002b61 	.word	0x08002b61
 8002b14:	08002b73 	.word	0x08002b73
 8002b18:	08002bb5 	.word	0x08002bb5
 8002b1c:	08002bbb 	.word	0x08002bbb
 8002b20:	08002bbb 	.word	0x08002bbb
 8002b24:	08002bbb 	.word	0x08002bbb
 8002b28:	08002bbb 	.word	0x08002bbb
 8002b2c:	08002bbb 	.word	0x08002bbb
 8002b30:	08002bbb 	.word	0x08002bbb
 8002b34:	08002bbb 	.word	0x08002bbb
 8002b38:	08002bbb 	.word	0x08002bbb
 8002b3c:	08002bbb 	.word	0x08002bbb
 8002b40:	08002bbb 	.word	0x08002bbb
 8002b44:	08002bbb 	.word	0x08002bbb
 8002b48:	08002bbb 	.word	0x08002bbb
 8002b4c:	08002bbb 	.word	0x08002bbb
 8002b50:	08002b69 	.word	0x08002b69
 8002b54:	08002b7d 	.word	0x08002b7d
 8002b58:	4a76      	ldr	r2, [pc, #472]	@ (8002d34 <HAL_GPIO_Init+0x2a8>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d013      	beq.n	8002b86 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b5e:	e02c      	b.n	8002bba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	623b      	str	r3, [r7, #32]
          break;
 8002b66:	e029      	b.n	8002bbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	623b      	str	r3, [r7, #32]
          break;
 8002b70:	e024      	b.n	8002bbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	3308      	adds	r3, #8
 8002b78:	623b      	str	r3, [r7, #32]
          break;
 8002b7a:	e01f      	b.n	8002bbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	330c      	adds	r3, #12
 8002b82:	623b      	str	r3, [r7, #32]
          break;
 8002b84:	e01a      	b.n	8002bbc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d102      	bne.n	8002b94 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b8e:	2304      	movs	r3, #4
 8002b90:	623b      	str	r3, [r7, #32]
          break;
 8002b92:	e013      	b.n	8002bbc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d105      	bne.n	8002ba8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b9c:	2308      	movs	r3, #8
 8002b9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	69fa      	ldr	r2, [r7, #28]
 8002ba4:	611a      	str	r2, [r3, #16]
          break;
 8002ba6:	e009      	b.n	8002bbc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ba8:	2308      	movs	r3, #8
 8002baa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	69fa      	ldr	r2, [r7, #28]
 8002bb0:	615a      	str	r2, [r3, #20]
          break;
 8002bb2:	e003      	b.n	8002bbc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	623b      	str	r3, [r7, #32]
          break;
 8002bb8:	e000      	b.n	8002bbc <HAL_GPIO_Init+0x130>
          break;
 8002bba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	2bff      	cmp	r3, #255	@ 0xff
 8002bc0:	d801      	bhi.n	8002bc6 <HAL_GPIO_Init+0x13a>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	e001      	b.n	8002bca <HAL_GPIO_Init+0x13e>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	3304      	adds	r3, #4
 8002bca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	2bff      	cmp	r3, #255	@ 0xff
 8002bd0:	d802      	bhi.n	8002bd8 <HAL_GPIO_Init+0x14c>
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	e002      	b.n	8002bde <HAL_GPIO_Init+0x152>
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bda:	3b08      	subs	r3, #8
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	210f      	movs	r1, #15
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bec:	43db      	mvns	r3, r3
 8002bee:	401a      	ands	r2, r3
 8002bf0:	6a39      	ldr	r1, [r7, #32]
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f000 80a9 	beq.w	8002d5e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c0c:	4b4a      	ldr	r3, [pc, #296]	@ (8002d38 <HAL_GPIO_Init+0x2ac>)
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	4a49      	ldr	r2, [pc, #292]	@ (8002d38 <HAL_GPIO_Init+0x2ac>)
 8002c12:	f043 0301 	orr.w	r3, r3, #1
 8002c16:	6193      	str	r3, [r2, #24]
 8002c18:	4b47      	ldr	r3, [pc, #284]	@ (8002d38 <HAL_GPIO_Init+0x2ac>)
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	60bb      	str	r3, [r7, #8]
 8002c22:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c24:	4a45      	ldr	r2, [pc, #276]	@ (8002d3c <HAL_GPIO_Init+0x2b0>)
 8002c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c28:	089b      	lsrs	r3, r3, #2
 8002c2a:	3302      	adds	r3, #2
 8002c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c30:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c34:	f003 0303 	and.w	r3, r3, #3
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	220f      	movs	r2, #15
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	43db      	mvns	r3, r3
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	4013      	ands	r3, r2
 8002c46:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a3d      	ldr	r2, [pc, #244]	@ (8002d40 <HAL_GPIO_Init+0x2b4>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d00d      	beq.n	8002c6c <HAL_GPIO_Init+0x1e0>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a3c      	ldr	r2, [pc, #240]	@ (8002d44 <HAL_GPIO_Init+0x2b8>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d007      	beq.n	8002c68 <HAL_GPIO_Init+0x1dc>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a3b      	ldr	r2, [pc, #236]	@ (8002d48 <HAL_GPIO_Init+0x2bc>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d101      	bne.n	8002c64 <HAL_GPIO_Init+0x1d8>
 8002c60:	2302      	movs	r3, #2
 8002c62:	e004      	b.n	8002c6e <HAL_GPIO_Init+0x1e2>
 8002c64:	2303      	movs	r3, #3
 8002c66:	e002      	b.n	8002c6e <HAL_GPIO_Init+0x1e2>
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e000      	b.n	8002c6e <HAL_GPIO_Init+0x1e2>
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c70:	f002 0203 	and.w	r2, r2, #3
 8002c74:	0092      	lsls	r2, r2, #2
 8002c76:	4093      	lsls	r3, r2
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c7e:	492f      	ldr	r1, [pc, #188]	@ (8002d3c <HAL_GPIO_Init+0x2b0>)
 8002c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c82:	089b      	lsrs	r3, r3, #2
 8002c84:	3302      	adds	r3, #2
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d006      	beq.n	8002ca6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c98:	4b2c      	ldr	r3, [pc, #176]	@ (8002d4c <HAL_GPIO_Init+0x2c0>)
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	492b      	ldr	r1, [pc, #172]	@ (8002d4c <HAL_GPIO_Init+0x2c0>)
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	608b      	str	r3, [r1, #8]
 8002ca4:	e006      	b.n	8002cb4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ca6:	4b29      	ldr	r3, [pc, #164]	@ (8002d4c <HAL_GPIO_Init+0x2c0>)
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	43db      	mvns	r3, r3
 8002cae:	4927      	ldr	r1, [pc, #156]	@ (8002d4c <HAL_GPIO_Init+0x2c0>)
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d006      	beq.n	8002cce <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002cc0:	4b22      	ldr	r3, [pc, #136]	@ (8002d4c <HAL_GPIO_Init+0x2c0>)
 8002cc2:	68da      	ldr	r2, [r3, #12]
 8002cc4:	4921      	ldr	r1, [pc, #132]	@ (8002d4c <HAL_GPIO_Init+0x2c0>)
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	60cb      	str	r3, [r1, #12]
 8002ccc:	e006      	b.n	8002cdc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002cce:	4b1f      	ldr	r3, [pc, #124]	@ (8002d4c <HAL_GPIO_Init+0x2c0>)
 8002cd0:	68da      	ldr	r2, [r3, #12]
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	491d      	ldr	r1, [pc, #116]	@ (8002d4c <HAL_GPIO_Init+0x2c0>)
 8002cd8:	4013      	ands	r3, r2
 8002cda:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d006      	beq.n	8002cf6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ce8:	4b18      	ldr	r3, [pc, #96]	@ (8002d4c <HAL_GPIO_Init+0x2c0>)
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	4917      	ldr	r1, [pc, #92]	@ (8002d4c <HAL_GPIO_Init+0x2c0>)
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	604b      	str	r3, [r1, #4]
 8002cf4:	e006      	b.n	8002d04 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002cf6:	4b15      	ldr	r3, [pc, #84]	@ (8002d4c <HAL_GPIO_Init+0x2c0>)
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	4913      	ldr	r1, [pc, #76]	@ (8002d4c <HAL_GPIO_Init+0x2c0>)
 8002d00:	4013      	ands	r3, r2
 8002d02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d01f      	beq.n	8002d50 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d10:	4b0e      	ldr	r3, [pc, #56]	@ (8002d4c <HAL_GPIO_Init+0x2c0>)
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	490d      	ldr	r1, [pc, #52]	@ (8002d4c <HAL_GPIO_Init+0x2c0>)
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	600b      	str	r3, [r1, #0]
 8002d1c:	e01f      	b.n	8002d5e <HAL_GPIO_Init+0x2d2>
 8002d1e:	bf00      	nop
 8002d20:	10320000 	.word	0x10320000
 8002d24:	10310000 	.word	0x10310000
 8002d28:	10220000 	.word	0x10220000
 8002d2c:	10210000 	.word	0x10210000
 8002d30:	10120000 	.word	0x10120000
 8002d34:	10110000 	.word	0x10110000
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	40010000 	.word	0x40010000
 8002d40:	40010800 	.word	0x40010800
 8002d44:	40010c00 	.word	0x40010c00
 8002d48:	40011000 	.word	0x40011000
 8002d4c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d50:	4b0b      	ldr	r3, [pc, #44]	@ (8002d80 <HAL_GPIO_Init+0x2f4>)
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	43db      	mvns	r3, r3
 8002d58:	4909      	ldr	r1, [pc, #36]	@ (8002d80 <HAL_GPIO_Init+0x2f4>)
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d60:	3301      	adds	r3, #1
 8002d62:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f47f ae96 	bne.w	8002aa0 <HAL_GPIO_Init+0x14>
  }
}
 8002d74:	bf00      	nop
 8002d76:	bf00      	nop
 8002d78:	372c      	adds	r7, #44	@ 0x2c
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bc80      	pop	{r7}
 8002d7e:	4770      	bx	lr
 8002d80:	40010400 	.word	0x40010400

08002d84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	807b      	strh	r3, [r7, #2]
 8002d90:	4613      	mov	r3, r2
 8002d92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d94:	787b      	ldrb	r3, [r7, #1]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d9a:	887a      	ldrh	r2, [r7, #2]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002da0:	e003      	b.n	8002daa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002da2:	887b      	ldrh	r3, [r7, #2]
 8002da4:	041a      	lsls	r2, r3, #16
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	611a      	str	r2, [r3, #16]
}
 8002daa:	bf00      	nop
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bc80      	pop	{r7}
 8002db2:	4770      	bx	lr

08002db4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e12b      	b.n	800301e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d106      	bne.n	8002de0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7fe ff72 	bl	8001cc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2224      	movs	r2, #36	@ 0x24
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 0201 	bic.w	r2, r2, #1
 8002df6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e18:	f001 fb52 	bl	80044c0 <HAL_RCC_GetPCLK1Freq>
 8002e1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	4a81      	ldr	r2, [pc, #516]	@ (8003028 <HAL_I2C_Init+0x274>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d807      	bhi.n	8002e38 <HAL_I2C_Init+0x84>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4a80      	ldr	r2, [pc, #512]	@ (800302c <HAL_I2C_Init+0x278>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	bf94      	ite	ls
 8002e30:	2301      	movls	r3, #1
 8002e32:	2300      	movhi	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	e006      	b.n	8002e46 <HAL_I2C_Init+0x92>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	4a7d      	ldr	r2, [pc, #500]	@ (8003030 <HAL_I2C_Init+0x27c>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	bf94      	ite	ls
 8002e40:	2301      	movls	r3, #1
 8002e42:	2300      	movhi	r3, #0
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e0e7      	b.n	800301e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4a78      	ldr	r2, [pc, #480]	@ (8003034 <HAL_I2C_Init+0x280>)
 8002e52:	fba2 2303 	umull	r2, r3, r2, r3
 8002e56:	0c9b      	lsrs	r3, r3, #18
 8002e58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68ba      	ldr	r2, [r7, #8]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	4a6a      	ldr	r2, [pc, #424]	@ (8003028 <HAL_I2C_Init+0x274>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d802      	bhi.n	8002e88 <HAL_I2C_Init+0xd4>
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	3301      	adds	r3, #1
 8002e86:	e009      	b.n	8002e9c <HAL_I2C_Init+0xe8>
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002e8e:	fb02 f303 	mul.w	r3, r2, r3
 8002e92:	4a69      	ldr	r2, [pc, #420]	@ (8003038 <HAL_I2C_Init+0x284>)
 8002e94:	fba2 2303 	umull	r2, r3, r2, r3
 8002e98:	099b      	lsrs	r3, r3, #6
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6812      	ldr	r2, [r2, #0]
 8002ea0:	430b      	orrs	r3, r1
 8002ea2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002eae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	495c      	ldr	r1, [pc, #368]	@ (8003028 <HAL_I2C_Init+0x274>)
 8002eb8:	428b      	cmp	r3, r1
 8002eba:	d819      	bhi.n	8002ef0 <HAL_I2C_Init+0x13c>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	1e59      	subs	r1, r3, #1
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002eca:	1c59      	adds	r1, r3, #1
 8002ecc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002ed0:	400b      	ands	r3, r1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00a      	beq.n	8002eec <HAL_I2C_Init+0x138>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	1e59      	subs	r1, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eea:	e051      	b.n	8002f90 <HAL_I2C_Init+0x1dc>
 8002eec:	2304      	movs	r3, #4
 8002eee:	e04f      	b.n	8002f90 <HAL_I2C_Init+0x1dc>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d111      	bne.n	8002f1c <HAL_I2C_Init+0x168>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	1e58      	subs	r0, r3, #1
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6859      	ldr	r1, [r3, #4]
 8002f00:	460b      	mov	r3, r1
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	440b      	add	r3, r1
 8002f06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	bf0c      	ite	eq
 8002f14:	2301      	moveq	r3, #1
 8002f16:	2300      	movne	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	e012      	b.n	8002f42 <HAL_I2C_Init+0x18e>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	1e58      	subs	r0, r3, #1
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6859      	ldr	r1, [r3, #4]
 8002f24:	460b      	mov	r3, r1
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	0099      	lsls	r1, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f32:	3301      	adds	r3, #1
 8002f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	bf0c      	ite	eq
 8002f3c:	2301      	moveq	r3, #1
 8002f3e:	2300      	movne	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <HAL_I2C_Init+0x196>
 8002f46:	2301      	movs	r3, #1
 8002f48:	e022      	b.n	8002f90 <HAL_I2C_Init+0x1dc>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10e      	bne.n	8002f70 <HAL_I2C_Init+0x1bc>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	1e58      	subs	r0, r3, #1
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6859      	ldr	r1, [r3, #4]
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	440b      	add	r3, r1
 8002f60:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f64:	3301      	adds	r3, #1
 8002f66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f6e:	e00f      	b.n	8002f90 <HAL_I2C_Init+0x1dc>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	1e58      	subs	r0, r3, #1
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6859      	ldr	r1, [r3, #4]
 8002f78:	460b      	mov	r3, r1
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	0099      	lsls	r1, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f86:	3301      	adds	r3, #1
 8002f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f90:	6879      	ldr	r1, [r7, #4]
 8002f92:	6809      	ldr	r1, [r1, #0]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69da      	ldr	r2, [r3, #28]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002fbe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6911      	ldr	r1, [r2, #16]
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	68d2      	ldr	r2, [r2, #12]
 8002fca:	4311      	orrs	r1, r2
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6812      	ldr	r2, [r2, #0]
 8002fd0:	430b      	orrs	r3, r1
 8002fd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	695a      	ldr	r2, [r3, #20]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	430a      	orrs	r2, r1
 8002fee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0201 	orr.w	r2, r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2220      	movs	r2, #32
 800300a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	000186a0 	.word	0x000186a0
 800302c:	001e847f 	.word	0x001e847f
 8003030:	003d08ff 	.word	0x003d08ff
 8003034:	431bde83 	.word	0x431bde83
 8003038:	10624dd3 	.word	0x10624dd3

0800303c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b08c      	sub	sp, #48	@ 0x30
 8003040:	af02      	add	r7, sp, #8
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	4608      	mov	r0, r1
 8003046:	4611      	mov	r1, r2
 8003048:	461a      	mov	r2, r3
 800304a:	4603      	mov	r3, r0
 800304c:	817b      	strh	r3, [r7, #10]
 800304e:	460b      	mov	r3, r1
 8003050:	813b      	strh	r3, [r7, #8]
 8003052:	4613      	mov	r3, r2
 8003054:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003056:	2300      	movs	r3, #0
 8003058:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800305a:	f7ff f801 	bl	8002060 <HAL_GetTick>
 800305e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b20      	cmp	r3, #32
 800306a:	f040 8250 	bne.w	800350e <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800306e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003070:	9300      	str	r3, [sp, #0]
 8003072:	2319      	movs	r3, #25
 8003074:	2201      	movs	r2, #1
 8003076:	4982      	ldr	r1, [pc, #520]	@ (8003280 <HAL_I2C_Mem_Read+0x244>)
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f000 fc69 	bl	8003950 <I2C_WaitOnFlagUntilTimeout>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003084:	2302      	movs	r3, #2
 8003086:	e243      	b.n	8003510 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800308e:	2b01      	cmp	r3, #1
 8003090:	d101      	bne.n	8003096 <HAL_I2C_Mem_Read+0x5a>
 8003092:	2302      	movs	r3, #2
 8003094:	e23c      	b.n	8003510 <HAL_I2C_Mem_Read+0x4d4>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d007      	beq.n	80030bc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f042 0201 	orr.w	r2, r2, #1
 80030ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2222      	movs	r2, #34	@ 0x22
 80030d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2240      	movs	r2, #64	@ 0x40
 80030d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80030ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	4a62      	ldr	r2, [pc, #392]	@ (8003284 <HAL_I2C_Mem_Read+0x248>)
 80030fc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030fe:	88f8      	ldrh	r0, [r7, #6]
 8003100:	893a      	ldrh	r2, [r7, #8]
 8003102:	8979      	ldrh	r1, [r7, #10]
 8003104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003106:	9301      	str	r3, [sp, #4]
 8003108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800310a:	9300      	str	r3, [sp, #0]
 800310c:	4603      	mov	r3, r0
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f000 fb36 	bl	8003780 <I2C_RequestMemoryRead>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e1f8      	b.n	8003510 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003122:	2b00      	cmp	r3, #0
 8003124:	d113      	bne.n	800314e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003126:	2300      	movs	r3, #0
 8003128:	61fb      	str	r3, [r7, #28]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	61fb      	str	r3, [r7, #28]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	61fb      	str	r3, [r7, #28]
 800313a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	e1cc      	b.n	80034e8 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003152:	2b01      	cmp	r3, #1
 8003154:	d11e      	bne.n	8003194 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003164:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003166:	b672      	cpsid	i
}
 8003168:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800316a:	2300      	movs	r3, #0
 800316c:	61bb      	str	r3, [r7, #24]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	61bb      	str	r3, [r7, #24]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	61bb      	str	r3, [r7, #24]
 800317e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800318e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003190:	b662      	cpsie	i
}
 8003192:	e035      	b.n	8003200 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003198:	2b02      	cmp	r3, #2
 800319a:	d11e      	bne.n	80031da <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031aa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80031ac:	b672      	cpsid	i
}
 80031ae:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031b0:	2300      	movs	r3, #0
 80031b2:	617b      	str	r3, [r7, #20]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	617b      	str	r3, [r7, #20]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	617b      	str	r3, [r7, #20]
 80031c4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80031d6:	b662      	cpsie	i
}
 80031d8:	e012      	b.n	8003200 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80031e8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ea:	2300      	movs	r3, #0
 80031ec:	613b      	str	r3, [r7, #16]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	613b      	str	r3, [r7, #16]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	613b      	str	r3, [r7, #16]
 80031fe:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003200:	e172      	b.n	80034e8 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003206:	2b03      	cmp	r3, #3
 8003208:	f200 811f 	bhi.w	800344a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003210:	2b01      	cmp	r3, #1
 8003212:	d123      	bne.n	800325c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003214:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003216:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f000 fcfb 	bl	8003c14 <I2C_WaitOnRXNEFlagUntilTimeout>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e173      	b.n	8003510 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	691a      	ldr	r2, [r3, #16]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003232:	b2d2      	uxtb	r2, r2
 8003234:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323a:	1c5a      	adds	r2, r3, #1
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003244:	3b01      	subs	r3, #1
 8003246:	b29a      	uxth	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003250:	b29b      	uxth	r3, r3
 8003252:	3b01      	subs	r3, #1
 8003254:	b29a      	uxth	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800325a:	e145      	b.n	80034e8 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003260:	2b02      	cmp	r3, #2
 8003262:	d152      	bne.n	800330a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800326a:	2200      	movs	r2, #0
 800326c:	4906      	ldr	r1, [pc, #24]	@ (8003288 <HAL_I2C_Mem_Read+0x24c>)
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f000 fb6e 	bl	8003950 <I2C_WaitOnFlagUntilTimeout>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d008      	beq.n	800328c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e148      	b.n	8003510 <HAL_I2C_Mem_Read+0x4d4>
 800327e:	bf00      	nop
 8003280:	00100002 	.word	0x00100002
 8003284:	ffff0000 	.word	0xffff0000
 8003288:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800328c:	b672      	cpsid	i
}
 800328e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800329e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	691a      	ldr	r2, [r3, #16]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032aa:	b2d2      	uxtb	r2, r2
 80032ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b2:	1c5a      	adds	r2, r3, #1
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032bc:	3b01      	subs	r3, #1
 80032be:	b29a      	uxth	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	3b01      	subs	r3, #1
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80032d2:	b662      	cpsie	i
}
 80032d4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	691a      	ldr	r2, [r3, #16]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e0:	b2d2      	uxtb	r2, r2
 80032e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e8:	1c5a      	adds	r2, r3, #1
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032f2:	3b01      	subs	r3, #1
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032fe:	b29b      	uxth	r3, r3
 8003300:	3b01      	subs	r3, #1
 8003302:	b29a      	uxth	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003308:	e0ee      	b.n	80034e8 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800330a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800330c:	9300      	str	r3, [sp, #0]
 800330e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003310:	2200      	movs	r2, #0
 8003312:	4981      	ldr	r1, [pc, #516]	@ (8003518 <HAL_I2C_Mem_Read+0x4dc>)
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f000 fb1b 	bl	8003950 <I2C_WaitOnFlagUntilTimeout>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e0f5      	b.n	8003510 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003332:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003334:	b672      	cpsid	i
}
 8003336:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	691a      	ldr	r2, [r3, #16]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003342:	b2d2      	uxtb	r2, r2
 8003344:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334a:	1c5a      	adds	r2, r3, #1
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003354:	3b01      	subs	r3, #1
 8003356:	b29a      	uxth	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003360:	b29b      	uxth	r3, r3
 8003362:	3b01      	subs	r3, #1
 8003364:	b29a      	uxth	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800336a:	4b6c      	ldr	r3, [pc, #432]	@ (800351c <HAL_I2C_Mem_Read+0x4e0>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	08db      	lsrs	r3, r3, #3
 8003370:	4a6b      	ldr	r2, [pc, #428]	@ (8003520 <HAL_I2C_Mem_Read+0x4e4>)
 8003372:	fba2 2303 	umull	r2, r3, r2, r3
 8003376:	0a1a      	lsrs	r2, r3, #8
 8003378:	4613      	mov	r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4413      	add	r3, r2
 800337e:	00da      	lsls	r2, r3, #3
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003384:	6a3b      	ldr	r3, [r7, #32]
 8003386:	3b01      	subs	r3, #1
 8003388:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800338a:	6a3b      	ldr	r3, [r7, #32]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d118      	bne.n	80033c2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2220      	movs	r2, #32
 800339a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033aa:	f043 0220 	orr.w	r2, r3, #32
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80033b2:	b662      	cpsie	i
}
 80033b4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e0a6      	b.n	8003510 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	f003 0304 	and.w	r3, r3, #4
 80033cc:	2b04      	cmp	r3, #4
 80033ce:	d1d9      	bne.n	8003384 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	691a      	ldr	r2, [r3, #16]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ea:	b2d2      	uxtb	r2, r2
 80033ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f2:	1c5a      	adds	r2, r3, #1
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033fc:	3b01      	subs	r3, #1
 80033fe:	b29a      	uxth	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003408:	b29b      	uxth	r3, r3
 800340a:	3b01      	subs	r3, #1
 800340c:	b29a      	uxth	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003412:	b662      	cpsie	i
}
 8003414:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	691a      	ldr	r2, [r3, #16]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003420:	b2d2      	uxtb	r2, r2
 8003422:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003428:	1c5a      	adds	r2, r3, #1
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003432:	3b01      	subs	r3, #1
 8003434:	b29a      	uxth	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800343e:	b29b      	uxth	r3, r3
 8003440:	3b01      	subs	r3, #1
 8003442:	b29a      	uxth	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003448:	e04e      	b.n	80034e8 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800344a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800344c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 fbe0 	bl	8003c14 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e058      	b.n	8003510 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	691a      	ldr	r2, [r3, #16]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003468:	b2d2      	uxtb	r2, r2
 800346a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003470:	1c5a      	adds	r2, r3, #1
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800347a:	3b01      	subs	r3, #1
 800347c:	b29a      	uxth	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003486:	b29b      	uxth	r3, r3
 8003488:	3b01      	subs	r3, #1
 800348a:	b29a      	uxth	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	f003 0304 	and.w	r3, r3, #4
 800349a:	2b04      	cmp	r3, #4
 800349c:	d124      	bne.n	80034e8 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034a2:	2b03      	cmp	r3, #3
 80034a4:	d107      	bne.n	80034b6 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034b4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	691a      	ldr	r2, [r3, #16]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c0:	b2d2      	uxtb	r2, r2
 80034c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c8:	1c5a      	adds	r2, r3, #1
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034d2:	3b01      	subs	r3, #1
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034de:	b29b      	uxth	r3, r3
 80034e0:	3b01      	subs	r3, #1
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f47f ae88 	bne.w	8003202 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2220      	movs	r2, #32
 80034f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800350a:	2300      	movs	r3, #0
 800350c:	e000      	b.n	8003510 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 800350e:	2302      	movs	r3, #2
  }
}
 8003510:	4618      	mov	r0, r3
 8003512:	3728      	adds	r7, #40	@ 0x28
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	00010004 	.word	0x00010004
 800351c:	20000004 	.word	0x20000004
 8003520:	14f8b589 	.word	0x14f8b589

08003524 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b08a      	sub	sp, #40	@ 0x28
 8003528:	af02      	add	r7, sp, #8
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	607a      	str	r2, [r7, #4]
 800352e:	603b      	str	r3, [r7, #0]
 8003530:	460b      	mov	r3, r1
 8003532:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003534:	f7fe fd94 	bl	8002060 <HAL_GetTick>
 8003538:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800353a:	2300      	movs	r3, #0
 800353c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b20      	cmp	r3, #32
 8003548:	f040 8111 	bne.w	800376e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	2319      	movs	r3, #25
 8003552:	2201      	movs	r2, #1
 8003554:	4988      	ldr	r1, [pc, #544]	@ (8003778 <HAL_I2C_IsDeviceReady+0x254>)
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 f9fa 	bl	8003950 <I2C_WaitOnFlagUntilTimeout>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003562:	2302      	movs	r3, #2
 8003564:	e104      	b.n	8003770 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800356c:	2b01      	cmp	r3, #1
 800356e:	d101      	bne.n	8003574 <HAL_I2C_IsDeviceReady+0x50>
 8003570:	2302      	movs	r3, #2
 8003572:	e0fd      	b.n	8003770 <HAL_I2C_IsDeviceReady+0x24c>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b01      	cmp	r3, #1
 8003588:	d007      	beq.n	800359a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f042 0201 	orr.w	r2, r2, #1
 8003598:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2224      	movs	r2, #36	@ 0x24
 80035ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	4a70      	ldr	r2, [pc, #448]	@ (800377c <HAL_I2C_IsDeviceReady+0x258>)
 80035bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035cc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f000 f9b8 	bl	8003950 <I2C_WaitOnFlagUntilTimeout>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00d      	beq.n	8003602 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035f4:	d103      	bne.n	80035fe <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035fc:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e0b6      	b.n	8003770 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003602:	897b      	ldrh	r3, [r7, #10]
 8003604:	b2db      	uxtb	r3, r3
 8003606:	461a      	mov	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003610:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003612:	f7fe fd25 	bl	8002060 <HAL_GetTick>
 8003616:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b02      	cmp	r3, #2
 8003624:	bf0c      	ite	eq
 8003626:	2301      	moveq	r3, #1
 8003628:	2300      	movne	r3, #0
 800362a:	b2db      	uxtb	r3, r3
 800362c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003638:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800363c:	bf0c      	ite	eq
 800363e:	2301      	moveq	r3, #1
 8003640:	2300      	movne	r3, #0
 8003642:	b2db      	uxtb	r3, r3
 8003644:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003646:	e025      	b.n	8003694 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003648:	f7fe fd0a 	bl	8002060 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	429a      	cmp	r2, r3
 8003656:	d302      	bcc.n	800365e <HAL_I2C_IsDeviceReady+0x13a>
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d103      	bne.n	8003666 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	22a0      	movs	r2, #160	@ 0xa0
 8003662:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b02      	cmp	r3, #2
 8003672:	bf0c      	ite	eq
 8003674:	2301      	moveq	r3, #1
 8003676:	2300      	movne	r3, #0
 8003678:	b2db      	uxtb	r3, r3
 800367a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003686:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800368a:	bf0c      	ite	eq
 800368c:	2301      	moveq	r3, #1
 800368e:	2300      	movne	r3, #0
 8003690:	b2db      	uxtb	r3, r3
 8003692:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2ba0      	cmp	r3, #160	@ 0xa0
 800369e:	d005      	beq.n	80036ac <HAL_I2C_IsDeviceReady+0x188>
 80036a0:	7dfb      	ldrb	r3, [r7, #23]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d102      	bne.n	80036ac <HAL_I2C_IsDeviceReady+0x188>
 80036a6:	7dbb      	ldrb	r3, [r7, #22]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0cd      	beq.n	8003648 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2220      	movs	r2, #32
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d129      	bne.n	8003716 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036d0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036d2:	2300      	movs	r3, #0
 80036d4:	613b      	str	r3, [r7, #16]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	613b      	str	r3, [r7, #16]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	613b      	str	r3, [r7, #16]
 80036e6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	2319      	movs	r3, #25
 80036ee:	2201      	movs	r2, #1
 80036f0:	4921      	ldr	r1, [pc, #132]	@ (8003778 <HAL_I2C_IsDeviceReady+0x254>)
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f000 f92c 	bl	8003950 <I2C_WaitOnFlagUntilTimeout>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e036      	b.n	8003770 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2220      	movs	r2, #32
 8003706:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003712:	2300      	movs	r3, #0
 8003714:	e02c      	b.n	8003770 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003724:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800372e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	9300      	str	r3, [sp, #0]
 8003734:	2319      	movs	r3, #25
 8003736:	2201      	movs	r2, #1
 8003738:	490f      	ldr	r1, [pc, #60]	@ (8003778 <HAL_I2C_IsDeviceReady+0x254>)
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 f908 	bl	8003950 <I2C_WaitOnFlagUntilTimeout>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e012      	b.n	8003770 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	3301      	adds	r3, #1
 800374e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	429a      	cmp	r2, r3
 8003756:	f4ff af32 	bcc.w	80035be <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2220      	movs	r2, #32
 800375e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e000      	b.n	8003770 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800376e:	2302      	movs	r3, #2
  }
}
 8003770:	4618      	mov	r0, r3
 8003772:	3720      	adds	r7, #32
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	00100002 	.word	0x00100002
 800377c:	ffff0000 	.word	0xffff0000

08003780 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b088      	sub	sp, #32
 8003784:	af02      	add	r7, sp, #8
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	4608      	mov	r0, r1
 800378a:	4611      	mov	r1, r2
 800378c:	461a      	mov	r2, r3
 800378e:	4603      	mov	r3, r0
 8003790:	817b      	strh	r3, [r7, #10]
 8003792:	460b      	mov	r3, r1
 8003794:	813b      	strh	r3, [r7, #8]
 8003796:	4613      	mov	r3, r2
 8003798:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80037a8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	6a3b      	ldr	r3, [r7, #32]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f000 f8c2 	bl	8003950 <I2C_WaitOnFlagUntilTimeout>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00d      	beq.n	80037ee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037e0:	d103      	bne.n	80037ea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e0aa      	b.n	8003944 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037ee:	897b      	ldrh	r3, [r7, #10]
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	461a      	mov	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80037fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003800:	6a3a      	ldr	r2, [r7, #32]
 8003802:	4952      	ldr	r1, [pc, #328]	@ (800394c <I2C_RequestMemoryRead+0x1cc>)
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 f91d 	bl	8003a44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e097      	b.n	8003944 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003814:	2300      	movs	r3, #0
 8003816:	617b      	str	r3, [r7, #20]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	617b      	str	r3, [r7, #20]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	617b      	str	r3, [r7, #20]
 8003828:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800382a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800382c:	6a39      	ldr	r1, [r7, #32]
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 f9a8 	bl	8003b84 <I2C_WaitOnTXEFlagUntilTimeout>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00d      	beq.n	8003856 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383e:	2b04      	cmp	r3, #4
 8003840:	d107      	bne.n	8003852 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003850:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e076      	b.n	8003944 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003856:	88fb      	ldrh	r3, [r7, #6]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d105      	bne.n	8003868 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800385c:	893b      	ldrh	r3, [r7, #8]
 800385e:	b2da      	uxtb	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	611a      	str	r2, [r3, #16]
 8003866:	e021      	b.n	80038ac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003868:	893b      	ldrh	r3, [r7, #8]
 800386a:	0a1b      	lsrs	r3, r3, #8
 800386c:	b29b      	uxth	r3, r3
 800386e:	b2da      	uxtb	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003876:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003878:	6a39      	ldr	r1, [r7, #32]
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f000 f982 	bl	8003b84 <I2C_WaitOnTXEFlagUntilTimeout>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00d      	beq.n	80038a2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388a:	2b04      	cmp	r3, #4
 800388c:	d107      	bne.n	800389e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800389c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e050      	b.n	8003944 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038a2:	893b      	ldrh	r3, [r7, #8]
 80038a4:	b2da      	uxtb	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038ae:	6a39      	ldr	r1, [r7, #32]
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f000 f967 	bl	8003b84 <I2C_WaitOnTXEFlagUntilTimeout>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00d      	beq.n	80038d8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c0:	2b04      	cmp	r3, #4
 80038c2:	d107      	bne.n	80038d4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038d2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e035      	b.n	8003944 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038e6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	6a3b      	ldr	r3, [r7, #32]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f000 f82b 	bl	8003950 <I2C_WaitOnFlagUntilTimeout>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00d      	beq.n	800391c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800390a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800390e:	d103      	bne.n	8003918 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003916:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e013      	b.n	8003944 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800391c:	897b      	ldrh	r3, [r7, #10]
 800391e:	b2db      	uxtb	r3, r3
 8003920:	f043 0301 	orr.w	r3, r3, #1
 8003924:	b2da      	uxtb	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800392c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800392e:	6a3a      	ldr	r2, [r7, #32]
 8003930:	4906      	ldr	r1, [pc, #24]	@ (800394c <I2C_RequestMemoryRead+0x1cc>)
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 f886 	bl	8003a44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e000      	b.n	8003944 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	00010002 	.word	0x00010002

08003950 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	603b      	str	r3, [r7, #0]
 800395c:	4613      	mov	r3, r2
 800395e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003960:	e048      	b.n	80039f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003968:	d044      	beq.n	80039f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800396a:	f7fe fb79 	bl	8002060 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	683a      	ldr	r2, [r7, #0]
 8003976:	429a      	cmp	r2, r3
 8003978:	d302      	bcc.n	8003980 <I2C_WaitOnFlagUntilTimeout+0x30>
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d139      	bne.n	80039f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	0c1b      	lsrs	r3, r3, #16
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b01      	cmp	r3, #1
 8003988:	d10d      	bne.n	80039a6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	43da      	mvns	r2, r3
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	4013      	ands	r3, r2
 8003996:	b29b      	uxth	r3, r3
 8003998:	2b00      	cmp	r3, #0
 800399a:	bf0c      	ite	eq
 800399c:	2301      	moveq	r3, #1
 800399e:	2300      	movne	r3, #0
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	461a      	mov	r2, r3
 80039a4:	e00c      	b.n	80039c0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	43da      	mvns	r2, r3
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	4013      	ands	r3, r2
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	bf0c      	ite	eq
 80039b8:	2301      	moveq	r3, #1
 80039ba:	2300      	movne	r3, #0
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	461a      	mov	r2, r3
 80039c0:	79fb      	ldrb	r3, [r7, #7]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d116      	bne.n	80039f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2220      	movs	r2, #32
 80039d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e0:	f043 0220 	orr.w	r2, r3, #32
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e023      	b.n	8003a3c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	0c1b      	lsrs	r3, r3, #16
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d10d      	bne.n	8003a1a <I2C_WaitOnFlagUntilTimeout+0xca>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	43da      	mvns	r2, r3
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	bf0c      	ite	eq
 8003a10:	2301      	moveq	r3, #1
 8003a12:	2300      	movne	r3, #0
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	461a      	mov	r2, r3
 8003a18:	e00c      	b.n	8003a34 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	43da      	mvns	r2, r3
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	4013      	ands	r3, r2
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	bf0c      	ite	eq
 8003a2c:	2301      	moveq	r3, #1
 8003a2e:	2300      	movne	r3, #0
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	461a      	mov	r2, r3
 8003a34:	79fb      	ldrb	r3, [r7, #7]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d093      	beq.n	8003962 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
 8003a50:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a52:	e071      	b.n	8003b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a62:	d123      	bne.n	8003aac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a72:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a7c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2220      	movs	r2, #32
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a98:	f043 0204 	orr.w	r2, r3, #4
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e067      	b.n	8003b7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ab2:	d041      	beq.n	8003b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ab4:	f7fe fad4 	bl	8002060 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d302      	bcc.n	8003aca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d136      	bne.n	8003b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	0c1b      	lsrs	r3, r3, #16
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d10c      	bne.n	8003aee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	43da      	mvns	r2, r3
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	bf14      	ite	ne
 8003ae6:	2301      	movne	r3, #1
 8003ae8:	2300      	moveq	r3, #0
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	e00b      	b.n	8003b06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	43da      	mvns	r2, r3
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	4013      	ands	r3, r2
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	bf14      	ite	ne
 8003b00:	2301      	movne	r3, #1
 8003b02:	2300      	moveq	r3, #0
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d016      	beq.n	8003b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2220      	movs	r2, #32
 8003b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b24:	f043 0220 	orr.w	r2, r3, #32
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e021      	b.n	8003b7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	0c1b      	lsrs	r3, r3, #16
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d10c      	bne.n	8003b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	43da      	mvns	r2, r3
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	bf14      	ite	ne
 8003b54:	2301      	movne	r3, #1
 8003b56:	2300      	moveq	r3, #0
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	e00b      	b.n	8003b74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	43da      	mvns	r2, r3
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	4013      	ands	r3, r2
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	bf14      	ite	ne
 8003b6e:	2301      	movne	r3, #1
 8003b70:	2300      	moveq	r3, #0
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f47f af6d 	bne.w	8003a54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b90:	e034      	b.n	8003bfc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f000 f89b 	bl	8003cce <I2C_IsAcknowledgeFailed>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e034      	b.n	8003c0c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ba8:	d028      	beq.n	8003bfc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003baa:	f7fe fa59 	bl	8002060 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d302      	bcc.n	8003bc0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d11d      	bne.n	8003bfc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bca:	2b80      	cmp	r3, #128	@ 0x80
 8003bcc:	d016      	beq.n	8003bfc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be8:	f043 0220 	orr.w	r2, r3, #32
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e007      	b.n	8003c0c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c06:	2b80      	cmp	r3, #128	@ 0x80
 8003c08:	d1c3      	bne.n	8003b92 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c20:	e049      	b.n	8003cb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	f003 0310 	and.w	r3, r3, #16
 8003c2c:	2b10      	cmp	r3, #16
 8003c2e:	d119      	bne.n	8003c64 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f06f 0210 	mvn.w	r2, #16
 8003c38:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2220      	movs	r2, #32
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e030      	b.n	8003cc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c64:	f7fe f9fc 	bl	8002060 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d302      	bcc.n	8003c7a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d11d      	bne.n	8003cb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c84:	2b40      	cmp	r3, #64	@ 0x40
 8003c86:	d016      	beq.n	8003cb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2220      	movs	r2, #32
 8003c92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca2:	f043 0220 	orr.w	r2, r3, #32
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e007      	b.n	8003cc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cc0:	2b40      	cmp	r3, #64	@ 0x40
 8003cc2:	d1ae      	bne.n	8003c22 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b083      	sub	sp, #12
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ce0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ce4:	d11b      	bne.n	8003d1e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003cee:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2220      	movs	r2, #32
 8003cfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0a:	f043 0204 	orr.w	r2, r3, #4
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e000      	b.n	8003d20 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bc80      	pop	{r7}
 8003d28:	4770      	bx	lr
	...

08003d2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b086      	sub	sp, #24
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e272      	b.n	8004224 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 8087 	beq.w	8003e5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d4c:	4b92      	ldr	r3, [pc, #584]	@ (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f003 030c 	and.w	r3, r3, #12
 8003d54:	2b04      	cmp	r3, #4
 8003d56:	d00c      	beq.n	8003d72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d58:	4b8f      	ldr	r3, [pc, #572]	@ (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f003 030c 	and.w	r3, r3, #12
 8003d60:	2b08      	cmp	r3, #8
 8003d62:	d112      	bne.n	8003d8a <HAL_RCC_OscConfig+0x5e>
 8003d64:	4b8c      	ldr	r3, [pc, #560]	@ (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d70:	d10b      	bne.n	8003d8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d72:	4b89      	ldr	r3, [pc, #548]	@ (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d06c      	beq.n	8003e58 <HAL_RCC_OscConfig+0x12c>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d168      	bne.n	8003e58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e24c      	b.n	8004224 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d92:	d106      	bne.n	8003da2 <HAL_RCC_OscConfig+0x76>
 8003d94:	4b80      	ldr	r3, [pc, #512]	@ (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a7f      	ldr	r2, [pc, #508]	@ (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003d9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d9e:	6013      	str	r3, [r2, #0]
 8003da0:	e02e      	b.n	8003e00 <HAL_RCC_OscConfig+0xd4>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10c      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x98>
 8003daa:	4b7b      	ldr	r3, [pc, #492]	@ (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a7a      	ldr	r2, [pc, #488]	@ (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003db0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003db4:	6013      	str	r3, [r2, #0]
 8003db6:	4b78      	ldr	r3, [pc, #480]	@ (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a77      	ldr	r2, [pc, #476]	@ (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003dbc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dc0:	6013      	str	r3, [r2, #0]
 8003dc2:	e01d      	b.n	8003e00 <HAL_RCC_OscConfig+0xd4>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003dcc:	d10c      	bne.n	8003de8 <HAL_RCC_OscConfig+0xbc>
 8003dce:	4b72      	ldr	r3, [pc, #456]	@ (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a71      	ldr	r2, [pc, #452]	@ (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003dd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003dd8:	6013      	str	r3, [r2, #0]
 8003dda:	4b6f      	ldr	r3, [pc, #444]	@ (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a6e      	ldr	r2, [pc, #440]	@ (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003de0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003de4:	6013      	str	r3, [r2, #0]
 8003de6:	e00b      	b.n	8003e00 <HAL_RCC_OscConfig+0xd4>
 8003de8:	4b6b      	ldr	r3, [pc, #428]	@ (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a6a      	ldr	r2, [pc, #424]	@ (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003dee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003df2:	6013      	str	r3, [r2, #0]
 8003df4:	4b68      	ldr	r3, [pc, #416]	@ (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a67      	ldr	r2, [pc, #412]	@ (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003dfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dfe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d013      	beq.n	8003e30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e08:	f7fe f92a 	bl	8002060 <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e0e:	e008      	b.n	8003e22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e10:	f7fe f926 	bl	8002060 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b64      	cmp	r3, #100	@ 0x64
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e200      	b.n	8004224 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e22:	4b5d      	ldr	r3, [pc, #372]	@ (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d0f0      	beq.n	8003e10 <HAL_RCC_OscConfig+0xe4>
 8003e2e:	e014      	b.n	8003e5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e30:	f7fe f916 	bl	8002060 <HAL_GetTick>
 8003e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e36:	e008      	b.n	8003e4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e38:	f7fe f912 	bl	8002060 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b64      	cmp	r3, #100	@ 0x64
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e1ec      	b.n	8004224 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e4a:	4b53      	ldr	r3, [pc, #332]	@ (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1f0      	bne.n	8003e38 <HAL_RCC_OscConfig+0x10c>
 8003e56:	e000      	b.n	8003e5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d063      	beq.n	8003f2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e66:	4b4c      	ldr	r3, [pc, #304]	@ (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f003 030c 	and.w	r3, r3, #12
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00b      	beq.n	8003e8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e72:	4b49      	ldr	r3, [pc, #292]	@ (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f003 030c 	and.w	r3, r3, #12
 8003e7a:	2b08      	cmp	r3, #8
 8003e7c:	d11c      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x18c>
 8003e7e:	4b46      	ldr	r3, [pc, #280]	@ (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d116      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e8a:	4b43      	ldr	r3, [pc, #268]	@ (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d005      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x176>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d001      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e1c0      	b.n	8004224 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea2:	4b3d      	ldr	r3, [pc, #244]	@ (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	00db      	lsls	r3, r3, #3
 8003eb0:	4939      	ldr	r1, [pc, #228]	@ (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eb6:	e03a      	b.n	8003f2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d020      	beq.n	8003f02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ec0:	4b36      	ldr	r3, [pc, #216]	@ (8003f9c <HAL_RCC_OscConfig+0x270>)
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec6:	f7fe f8cb 	bl	8002060 <HAL_GetTick>
 8003eca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ecc:	e008      	b.n	8003ee0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ece:	f7fe f8c7 	bl	8002060 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d901      	bls.n	8003ee0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e1a1      	b.n	8004224 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ee0:	4b2d      	ldr	r3, [pc, #180]	@ (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0f0      	beq.n	8003ece <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eec:	4b2a      	ldr	r3, [pc, #168]	@ (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	00db      	lsls	r3, r3, #3
 8003efa:	4927      	ldr	r1, [pc, #156]	@ (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	600b      	str	r3, [r1, #0]
 8003f00:	e015      	b.n	8003f2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f02:	4b26      	ldr	r3, [pc, #152]	@ (8003f9c <HAL_RCC_OscConfig+0x270>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f08:	f7fe f8aa 	bl	8002060 <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f10:	f7fe f8a6 	bl	8002060 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e180      	b.n	8004224 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f22:	4b1d      	ldr	r3, [pc, #116]	@ (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1f0      	bne.n	8003f10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0308 	and.w	r3, r3, #8
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d03a      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d019      	beq.n	8003f76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f42:	4b17      	ldr	r3, [pc, #92]	@ (8003fa0 <HAL_RCC_OscConfig+0x274>)
 8003f44:	2201      	movs	r2, #1
 8003f46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f48:	f7fe f88a 	bl	8002060 <HAL_GetTick>
 8003f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f50:	f7fe f886 	bl	8002060 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e160      	b.n	8004224 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f62:	4b0d      	ldr	r3, [pc, #52]	@ (8003f98 <HAL_RCC_OscConfig+0x26c>)
 8003f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d0f0      	beq.n	8003f50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f6e:	2001      	movs	r0, #1
 8003f70:	f000 fafe 	bl	8004570 <RCC_Delay>
 8003f74:	e01c      	b.n	8003fb0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f76:	4b0a      	ldr	r3, [pc, #40]	@ (8003fa0 <HAL_RCC_OscConfig+0x274>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f7c:	f7fe f870 	bl	8002060 <HAL_GetTick>
 8003f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f82:	e00f      	b.n	8003fa4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f84:	f7fe f86c 	bl	8002060 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d908      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e146      	b.n	8004224 <HAL_RCC_OscConfig+0x4f8>
 8003f96:	bf00      	nop
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	42420000 	.word	0x42420000
 8003fa0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fa4:	4b92      	ldr	r3, [pc, #584]	@ (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1e9      	bne.n	8003f84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f000 80a6 	beq.w	800410a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fc2:	4b8b      	ldr	r3, [pc, #556]	@ (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10d      	bne.n	8003fea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fce:	4b88      	ldr	r3, [pc, #544]	@ (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	4a87      	ldr	r2, [pc, #540]	@ (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 8003fd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fd8:	61d3      	str	r3, [r2, #28]
 8003fda:	4b85      	ldr	r3, [pc, #532]	@ (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fe2:	60bb      	str	r3, [r7, #8]
 8003fe4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fea:	4b82      	ldr	r3, [pc, #520]	@ (80041f4 <HAL_RCC_OscConfig+0x4c8>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d118      	bne.n	8004028 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ff6:	4b7f      	ldr	r3, [pc, #508]	@ (80041f4 <HAL_RCC_OscConfig+0x4c8>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a7e      	ldr	r2, [pc, #504]	@ (80041f4 <HAL_RCC_OscConfig+0x4c8>)
 8003ffc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004000:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004002:	f7fe f82d 	bl	8002060 <HAL_GetTick>
 8004006:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004008:	e008      	b.n	800401c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800400a:	f7fe f829 	bl	8002060 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	2b64      	cmp	r3, #100	@ 0x64
 8004016:	d901      	bls.n	800401c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e103      	b.n	8004224 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800401c:	4b75      	ldr	r3, [pc, #468]	@ (80041f4 <HAL_RCC_OscConfig+0x4c8>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004024:	2b00      	cmp	r3, #0
 8004026:	d0f0      	beq.n	800400a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d106      	bne.n	800403e <HAL_RCC_OscConfig+0x312>
 8004030:	4b6f      	ldr	r3, [pc, #444]	@ (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	4a6e      	ldr	r2, [pc, #440]	@ (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 8004036:	f043 0301 	orr.w	r3, r3, #1
 800403a:	6213      	str	r3, [r2, #32]
 800403c:	e02d      	b.n	800409a <HAL_RCC_OscConfig+0x36e>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10c      	bne.n	8004060 <HAL_RCC_OscConfig+0x334>
 8004046:	4b6a      	ldr	r3, [pc, #424]	@ (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	4a69      	ldr	r2, [pc, #420]	@ (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 800404c:	f023 0301 	bic.w	r3, r3, #1
 8004050:	6213      	str	r3, [r2, #32]
 8004052:	4b67      	ldr	r3, [pc, #412]	@ (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	4a66      	ldr	r2, [pc, #408]	@ (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 8004058:	f023 0304 	bic.w	r3, r3, #4
 800405c:	6213      	str	r3, [r2, #32]
 800405e:	e01c      	b.n	800409a <HAL_RCC_OscConfig+0x36e>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	2b05      	cmp	r3, #5
 8004066:	d10c      	bne.n	8004082 <HAL_RCC_OscConfig+0x356>
 8004068:	4b61      	ldr	r3, [pc, #388]	@ (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 800406a:	6a1b      	ldr	r3, [r3, #32]
 800406c:	4a60      	ldr	r2, [pc, #384]	@ (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 800406e:	f043 0304 	orr.w	r3, r3, #4
 8004072:	6213      	str	r3, [r2, #32]
 8004074:	4b5e      	ldr	r3, [pc, #376]	@ (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	4a5d      	ldr	r2, [pc, #372]	@ (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 800407a:	f043 0301 	orr.w	r3, r3, #1
 800407e:	6213      	str	r3, [r2, #32]
 8004080:	e00b      	b.n	800409a <HAL_RCC_OscConfig+0x36e>
 8004082:	4b5b      	ldr	r3, [pc, #364]	@ (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	4a5a      	ldr	r2, [pc, #360]	@ (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 8004088:	f023 0301 	bic.w	r3, r3, #1
 800408c:	6213      	str	r3, [r2, #32]
 800408e:	4b58      	ldr	r3, [pc, #352]	@ (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	4a57      	ldr	r2, [pc, #348]	@ (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 8004094:	f023 0304 	bic.w	r3, r3, #4
 8004098:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d015      	beq.n	80040ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040a2:	f7fd ffdd 	bl	8002060 <HAL_GetTick>
 80040a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040a8:	e00a      	b.n	80040c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040aa:	f7fd ffd9 	bl	8002060 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d901      	bls.n	80040c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e0b1      	b.n	8004224 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c0:	4b4b      	ldr	r3, [pc, #300]	@ (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 80040c2:	6a1b      	ldr	r3, [r3, #32]
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d0ee      	beq.n	80040aa <HAL_RCC_OscConfig+0x37e>
 80040cc:	e014      	b.n	80040f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ce:	f7fd ffc7 	bl	8002060 <HAL_GetTick>
 80040d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040d4:	e00a      	b.n	80040ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040d6:	f7fd ffc3 	bl	8002060 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e09b      	b.n	8004224 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040ec:	4b40      	ldr	r3, [pc, #256]	@ (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1ee      	bne.n	80040d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80040f8:	7dfb      	ldrb	r3, [r7, #23]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d105      	bne.n	800410a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040fe:	4b3c      	ldr	r3, [pc, #240]	@ (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 8004100:	69db      	ldr	r3, [r3, #28]
 8004102:	4a3b      	ldr	r2, [pc, #236]	@ (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 8004104:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004108:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	69db      	ldr	r3, [r3, #28]
 800410e:	2b00      	cmp	r3, #0
 8004110:	f000 8087 	beq.w	8004222 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004114:	4b36      	ldr	r3, [pc, #216]	@ (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f003 030c 	and.w	r3, r3, #12
 800411c:	2b08      	cmp	r3, #8
 800411e:	d061      	beq.n	80041e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	69db      	ldr	r3, [r3, #28]
 8004124:	2b02      	cmp	r3, #2
 8004126:	d146      	bne.n	80041b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004128:	4b33      	ldr	r3, [pc, #204]	@ (80041f8 <HAL_RCC_OscConfig+0x4cc>)
 800412a:	2200      	movs	r2, #0
 800412c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800412e:	f7fd ff97 	bl	8002060 <HAL_GetTick>
 8004132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004134:	e008      	b.n	8004148 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004136:	f7fd ff93 	bl	8002060 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b02      	cmp	r3, #2
 8004142:	d901      	bls.n	8004148 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e06d      	b.n	8004224 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004148:	4b29      	ldr	r3, [pc, #164]	@ (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1f0      	bne.n	8004136 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a1b      	ldr	r3, [r3, #32]
 8004158:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800415c:	d108      	bne.n	8004170 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800415e:	4b24      	ldr	r3, [pc, #144]	@ (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	4921      	ldr	r1, [pc, #132]	@ (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 800416c:	4313      	orrs	r3, r2
 800416e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004170:	4b1f      	ldr	r3, [pc, #124]	@ (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a19      	ldr	r1, [r3, #32]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004180:	430b      	orrs	r3, r1
 8004182:	491b      	ldr	r1, [pc, #108]	@ (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 8004184:	4313      	orrs	r3, r2
 8004186:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004188:	4b1b      	ldr	r3, [pc, #108]	@ (80041f8 <HAL_RCC_OscConfig+0x4cc>)
 800418a:	2201      	movs	r2, #1
 800418c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800418e:	f7fd ff67 	bl	8002060 <HAL_GetTick>
 8004192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004194:	e008      	b.n	80041a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004196:	f7fd ff63 	bl	8002060 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d901      	bls.n	80041a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e03d      	b.n	8004224 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041a8:	4b11      	ldr	r3, [pc, #68]	@ (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d0f0      	beq.n	8004196 <HAL_RCC_OscConfig+0x46a>
 80041b4:	e035      	b.n	8004222 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041b6:	4b10      	ldr	r3, [pc, #64]	@ (80041f8 <HAL_RCC_OscConfig+0x4cc>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041bc:	f7fd ff50 	bl	8002060 <HAL_GetTick>
 80041c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041c2:	e008      	b.n	80041d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041c4:	f7fd ff4c 	bl	8002060 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e026      	b.n	8004224 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041d6:	4b06      	ldr	r3, [pc, #24]	@ (80041f0 <HAL_RCC_OscConfig+0x4c4>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1f0      	bne.n	80041c4 <HAL_RCC_OscConfig+0x498>
 80041e2:	e01e      	b.n	8004222 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	69db      	ldr	r3, [r3, #28]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d107      	bne.n	80041fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e019      	b.n	8004224 <HAL_RCC_OscConfig+0x4f8>
 80041f0:	40021000 	.word	0x40021000
 80041f4:	40007000 	.word	0x40007000
 80041f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80041fc:	4b0b      	ldr	r3, [pc, #44]	@ (800422c <HAL_RCC_OscConfig+0x500>)
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	429a      	cmp	r2, r3
 800420e:	d106      	bne.n	800421e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800421a:	429a      	cmp	r2, r3
 800421c:	d001      	beq.n	8004222 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e000      	b.n	8004224 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3718      	adds	r7, #24
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	40021000 	.word	0x40021000

08004230 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d101      	bne.n	8004244 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e0d0      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004244:	4b6a      	ldr	r3, [pc, #424]	@ (80043f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0307 	and.w	r3, r3, #7
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	429a      	cmp	r2, r3
 8004250:	d910      	bls.n	8004274 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004252:	4b67      	ldr	r3, [pc, #412]	@ (80043f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f023 0207 	bic.w	r2, r3, #7
 800425a:	4965      	ldr	r1, [pc, #404]	@ (80043f0 <HAL_RCC_ClockConfig+0x1c0>)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	4313      	orrs	r3, r2
 8004260:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004262:	4b63      	ldr	r3, [pc, #396]	@ (80043f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0307 	and.w	r3, r3, #7
 800426a:	683a      	ldr	r2, [r7, #0]
 800426c:	429a      	cmp	r2, r3
 800426e:	d001      	beq.n	8004274 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e0b8      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d020      	beq.n	80042c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0304 	and.w	r3, r3, #4
 8004288:	2b00      	cmp	r3, #0
 800428a:	d005      	beq.n	8004298 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800428c:	4b59      	ldr	r3, [pc, #356]	@ (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	4a58      	ldr	r2, [pc, #352]	@ (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004292:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004296:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0308 	and.w	r3, r3, #8
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d005      	beq.n	80042b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042a4:	4b53      	ldr	r3, [pc, #332]	@ (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	4a52      	ldr	r2, [pc, #328]	@ (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 80042aa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80042ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042b0:	4b50      	ldr	r3, [pc, #320]	@ (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	494d      	ldr	r1, [pc, #308]	@ (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d040      	beq.n	8004350 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d107      	bne.n	80042e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042d6:	4b47      	ldr	r3, [pc, #284]	@ (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d115      	bne.n	800430e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e07f      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d107      	bne.n	80042fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ee:	4b41      	ldr	r3, [pc, #260]	@ (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d109      	bne.n	800430e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e073      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042fe:	4b3d      	ldr	r3, [pc, #244]	@ (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e06b      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800430e:	4b39      	ldr	r3, [pc, #228]	@ (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f023 0203 	bic.w	r2, r3, #3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	4936      	ldr	r1, [pc, #216]	@ (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 800431c:	4313      	orrs	r3, r2
 800431e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004320:	f7fd fe9e 	bl	8002060 <HAL_GetTick>
 8004324:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004326:	e00a      	b.n	800433e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004328:	f7fd fe9a 	bl	8002060 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004336:	4293      	cmp	r3, r2
 8004338:	d901      	bls.n	800433e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e053      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800433e:	4b2d      	ldr	r3, [pc, #180]	@ (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f003 020c 	and.w	r2, r3, #12
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	429a      	cmp	r2, r3
 800434e:	d1eb      	bne.n	8004328 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004350:	4b27      	ldr	r3, [pc, #156]	@ (80043f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0307 	and.w	r3, r3, #7
 8004358:	683a      	ldr	r2, [r7, #0]
 800435a:	429a      	cmp	r2, r3
 800435c:	d210      	bcs.n	8004380 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800435e:	4b24      	ldr	r3, [pc, #144]	@ (80043f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f023 0207 	bic.w	r2, r3, #7
 8004366:	4922      	ldr	r1, [pc, #136]	@ (80043f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	4313      	orrs	r3, r2
 800436c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800436e:	4b20      	ldr	r3, [pc, #128]	@ (80043f0 <HAL_RCC_ClockConfig+0x1c0>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0307 	and.w	r3, r3, #7
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	429a      	cmp	r2, r3
 800437a:	d001      	beq.n	8004380 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e032      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0304 	and.w	r3, r3, #4
 8004388:	2b00      	cmp	r3, #0
 800438a:	d008      	beq.n	800439e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800438c:	4b19      	ldr	r3, [pc, #100]	@ (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	4916      	ldr	r1, [pc, #88]	@ (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 800439a:	4313      	orrs	r3, r2
 800439c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0308 	and.w	r3, r3, #8
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d009      	beq.n	80043be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043aa:	4b12      	ldr	r3, [pc, #72]	@ (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	00db      	lsls	r3, r3, #3
 80043b8:	490e      	ldr	r1, [pc, #56]	@ (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043be:	f000 f821 	bl	8004404 <HAL_RCC_GetSysClockFreq>
 80043c2:	4602      	mov	r2, r0
 80043c4:	4b0b      	ldr	r3, [pc, #44]	@ (80043f4 <HAL_RCC_ClockConfig+0x1c4>)
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	091b      	lsrs	r3, r3, #4
 80043ca:	f003 030f 	and.w	r3, r3, #15
 80043ce:	490a      	ldr	r1, [pc, #40]	@ (80043f8 <HAL_RCC_ClockConfig+0x1c8>)
 80043d0:	5ccb      	ldrb	r3, [r1, r3]
 80043d2:	fa22 f303 	lsr.w	r3, r2, r3
 80043d6:	4a09      	ldr	r2, [pc, #36]	@ (80043fc <HAL_RCC_ClockConfig+0x1cc>)
 80043d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80043da:	4b09      	ldr	r3, [pc, #36]	@ (8004400 <HAL_RCC_ClockConfig+0x1d0>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4618      	mov	r0, r3
 80043e0:	f7fd fd48 	bl	8001e74 <HAL_InitTick>

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	40022000 	.word	0x40022000
 80043f4:	40021000 	.word	0x40021000
 80043f8:	0800720c 	.word	0x0800720c
 80043fc:	20000004 	.word	0x20000004
 8004400:	20000008 	.word	0x20000008

08004404 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004404:	b480      	push	{r7}
 8004406:	b087      	sub	sp, #28
 8004408:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800440a:	2300      	movs	r3, #0
 800440c:	60fb      	str	r3, [r7, #12]
 800440e:	2300      	movs	r3, #0
 8004410:	60bb      	str	r3, [r7, #8]
 8004412:	2300      	movs	r3, #0
 8004414:	617b      	str	r3, [r7, #20]
 8004416:	2300      	movs	r3, #0
 8004418:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800441a:	2300      	movs	r3, #0
 800441c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800441e:	4b1e      	ldr	r3, [pc, #120]	@ (8004498 <HAL_RCC_GetSysClockFreq+0x94>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f003 030c 	and.w	r3, r3, #12
 800442a:	2b04      	cmp	r3, #4
 800442c:	d002      	beq.n	8004434 <HAL_RCC_GetSysClockFreq+0x30>
 800442e:	2b08      	cmp	r3, #8
 8004430:	d003      	beq.n	800443a <HAL_RCC_GetSysClockFreq+0x36>
 8004432:	e027      	b.n	8004484 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004434:	4b19      	ldr	r3, [pc, #100]	@ (800449c <HAL_RCC_GetSysClockFreq+0x98>)
 8004436:	613b      	str	r3, [r7, #16]
      break;
 8004438:	e027      	b.n	800448a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	0c9b      	lsrs	r3, r3, #18
 800443e:	f003 030f 	and.w	r3, r3, #15
 8004442:	4a17      	ldr	r2, [pc, #92]	@ (80044a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004444:	5cd3      	ldrb	r3, [r2, r3]
 8004446:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d010      	beq.n	8004474 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004452:	4b11      	ldr	r3, [pc, #68]	@ (8004498 <HAL_RCC_GetSysClockFreq+0x94>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	0c5b      	lsrs	r3, r3, #17
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	4a11      	ldr	r2, [pc, #68]	@ (80044a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800445e:	5cd3      	ldrb	r3, [r2, r3]
 8004460:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a0d      	ldr	r2, [pc, #52]	@ (800449c <HAL_RCC_GetSysClockFreq+0x98>)
 8004466:	fb03 f202 	mul.w	r2, r3, r2
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004470:	617b      	str	r3, [r7, #20]
 8004472:	e004      	b.n	800447e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a0c      	ldr	r2, [pc, #48]	@ (80044a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004478:	fb02 f303 	mul.w	r3, r2, r3
 800447c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	613b      	str	r3, [r7, #16]
      break;
 8004482:	e002      	b.n	800448a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004484:	4b05      	ldr	r3, [pc, #20]	@ (800449c <HAL_RCC_GetSysClockFreq+0x98>)
 8004486:	613b      	str	r3, [r7, #16]
      break;
 8004488:	bf00      	nop
    }
  }
  return sysclockfreq;
 800448a:	693b      	ldr	r3, [r7, #16]
}
 800448c:	4618      	mov	r0, r3
 800448e:	371c      	adds	r7, #28
 8004490:	46bd      	mov	sp, r7
 8004492:	bc80      	pop	{r7}
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	40021000 	.word	0x40021000
 800449c:	007a1200 	.word	0x007a1200
 80044a0:	08007224 	.word	0x08007224
 80044a4:	08007234 	.word	0x08007234
 80044a8:	003d0900 	.word	0x003d0900

080044ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044b0:	4b02      	ldr	r3, [pc, #8]	@ (80044bc <HAL_RCC_GetHCLKFreq+0x10>)
 80044b2:	681b      	ldr	r3, [r3, #0]
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bc80      	pop	{r7}
 80044ba:	4770      	bx	lr
 80044bc:	20000004 	.word	0x20000004

080044c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044c4:	f7ff fff2 	bl	80044ac <HAL_RCC_GetHCLKFreq>
 80044c8:	4602      	mov	r2, r0
 80044ca:	4b05      	ldr	r3, [pc, #20]	@ (80044e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	0a1b      	lsrs	r3, r3, #8
 80044d0:	f003 0307 	and.w	r3, r3, #7
 80044d4:	4903      	ldr	r1, [pc, #12]	@ (80044e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044d6:	5ccb      	ldrb	r3, [r1, r3]
 80044d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044dc:	4618      	mov	r0, r3
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	40021000 	.word	0x40021000
 80044e4:	0800721c 	.word	0x0800721c

080044e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044ec:	f7ff ffde 	bl	80044ac <HAL_RCC_GetHCLKFreq>
 80044f0:	4602      	mov	r2, r0
 80044f2:	4b05      	ldr	r3, [pc, #20]	@ (8004508 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	0adb      	lsrs	r3, r3, #11
 80044f8:	f003 0307 	and.w	r3, r3, #7
 80044fc:	4903      	ldr	r1, [pc, #12]	@ (800450c <HAL_RCC_GetPCLK2Freq+0x24>)
 80044fe:	5ccb      	ldrb	r3, [r1, r3]
 8004500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004504:	4618      	mov	r0, r3
 8004506:	bd80      	pop	{r7, pc}
 8004508:	40021000 	.word	0x40021000
 800450c:	0800721c 	.word	0x0800721c

08004510 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	220f      	movs	r2, #15
 800451e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004520:	4b11      	ldr	r3, [pc, #68]	@ (8004568 <HAL_RCC_GetClockConfig+0x58>)
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f003 0203 	and.w	r2, r3, #3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800452c:	4b0e      	ldr	r3, [pc, #56]	@ (8004568 <HAL_RCC_GetClockConfig+0x58>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004538:	4b0b      	ldr	r3, [pc, #44]	@ (8004568 <HAL_RCC_GetClockConfig+0x58>)
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004544:	4b08      	ldr	r3, [pc, #32]	@ (8004568 <HAL_RCC_GetClockConfig+0x58>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	08db      	lsrs	r3, r3, #3
 800454a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004552:	4b06      	ldr	r3, [pc, #24]	@ (800456c <HAL_RCC_GetClockConfig+0x5c>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0207 	and.w	r2, r3, #7
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800455e:	bf00      	nop
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	bc80      	pop	{r7}
 8004566:	4770      	bx	lr
 8004568:	40021000 	.word	0x40021000
 800456c:	40022000 	.word	0x40022000

08004570 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004578:	4b0a      	ldr	r3, [pc, #40]	@ (80045a4 <RCC_Delay+0x34>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a0a      	ldr	r2, [pc, #40]	@ (80045a8 <RCC_Delay+0x38>)
 800457e:	fba2 2303 	umull	r2, r3, r2, r3
 8004582:	0a5b      	lsrs	r3, r3, #9
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	fb02 f303 	mul.w	r3, r2, r3
 800458a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800458c:	bf00      	nop
  }
  while (Delay --);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	1e5a      	subs	r2, r3, #1
 8004592:	60fa      	str	r2, [r7, #12]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1f9      	bne.n	800458c <RCC_Delay+0x1c>
}
 8004598:	bf00      	nop
 800459a:	bf00      	nop
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	bc80      	pop	{r7}
 80045a2:	4770      	bx	lr
 80045a4:	20000004 	.word	0x20000004
 80045a8:	10624dd3 	.word	0x10624dd3

080045ac <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80045b4:	2300      	movs	r3, #0
 80045b6:	613b      	str	r3, [r7, #16]
 80045b8:	2300      	movs	r3, #0
 80045ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d07d      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80045c8:	2300      	movs	r3, #0
 80045ca:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045cc:	4b4f      	ldr	r3, [pc, #316]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ce:	69db      	ldr	r3, [r3, #28]
 80045d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10d      	bne.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045d8:	4b4c      	ldr	r3, [pc, #304]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045da:	69db      	ldr	r3, [r3, #28]
 80045dc:	4a4b      	ldr	r2, [pc, #300]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045e2:	61d3      	str	r3, [r2, #28]
 80045e4:	4b49      	ldr	r3, [pc, #292]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045e6:	69db      	ldr	r3, [r3, #28]
 80045e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045ec:	60bb      	str	r3, [r7, #8]
 80045ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045f0:	2301      	movs	r3, #1
 80045f2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f4:	4b46      	ldr	r3, [pc, #280]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d118      	bne.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004600:	4b43      	ldr	r3, [pc, #268]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a42      	ldr	r2, [pc, #264]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004606:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800460a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800460c:	f7fd fd28 	bl	8002060 <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004612:	e008      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004614:	f7fd fd24 	bl	8002060 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b64      	cmp	r3, #100	@ 0x64
 8004620:	d901      	bls.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e06d      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004626:	4b3a      	ldr	r3, [pc, #232]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800462e:	2b00      	cmp	r3, #0
 8004630:	d0f0      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004632:	4b36      	ldr	r3, [pc, #216]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800463a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d02e      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	429a      	cmp	r2, r3
 800464e:	d027      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004650:	4b2e      	ldr	r3, [pc, #184]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004652:	6a1b      	ldr	r3, [r3, #32]
 8004654:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004658:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800465a:	4b2e      	ldr	r3, [pc, #184]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800465c:	2201      	movs	r2, #1
 800465e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004660:	4b2c      	ldr	r3, [pc, #176]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004662:	2200      	movs	r2, #0
 8004664:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004666:	4a29      	ldr	r2, [pc, #164]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	d014      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004676:	f7fd fcf3 	bl	8002060 <HAL_GetTick>
 800467a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800467c:	e00a      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800467e:	f7fd fcef 	bl	8002060 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	f241 3288 	movw	r2, #5000	@ 0x1388
 800468c:	4293      	cmp	r3, r2
 800468e:	d901      	bls.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e036      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004694:	4b1d      	ldr	r3, [pc, #116]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d0ee      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046a0:	4b1a      	ldr	r3, [pc, #104]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046a2:	6a1b      	ldr	r3, [r3, #32]
 80046a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	4917      	ldr	r1, [pc, #92]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80046b2:	7dfb      	ldrb	r3, [r7, #23]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d105      	bne.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046b8:	4b14      	ldr	r3, [pc, #80]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ba:	69db      	ldr	r3, [r3, #28]
 80046bc:	4a13      	ldr	r2, [pc, #76]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046c2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d008      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046d0:	4b0e      	ldr	r3, [pc, #56]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	490b      	ldr	r1, [pc, #44]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0310 	and.w	r3, r3, #16
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d008      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046ee:	4b07      	ldr	r3, [pc, #28]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	4904      	ldr	r1, [pc, #16]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3718      	adds	r7, #24
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	40021000 	.word	0x40021000
 8004710:	40007000 	.word	0x40007000
 8004714:	42420440 	.word	0x42420440

08004718 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b088      	sub	sp, #32
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004720:	2300      	movs	r3, #0
 8004722:	617b      	str	r3, [r7, #20]
 8004724:	2300      	movs	r3, #0
 8004726:	61fb      	str	r3, [r7, #28]
 8004728:	2300      	movs	r3, #0
 800472a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800472c:	2300      	movs	r3, #0
 800472e:	60fb      	str	r3, [r7, #12]
 8004730:	2300      	movs	r3, #0
 8004732:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b10      	cmp	r3, #16
 8004738:	d00a      	beq.n	8004750 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2b10      	cmp	r3, #16
 800473e:	f200 808a 	bhi.w	8004856 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d045      	beq.n	80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2b02      	cmp	r3, #2
 800474c:	d075      	beq.n	800483a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800474e:	e082      	b.n	8004856 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004750:	4b46      	ldr	r3, [pc, #280]	@ (800486c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004756:	4b45      	ldr	r3, [pc, #276]	@ (800486c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d07b      	beq.n	800485a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	0c9b      	lsrs	r3, r3, #18
 8004766:	f003 030f 	and.w	r3, r3, #15
 800476a:	4a41      	ldr	r2, [pc, #260]	@ (8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800476c:	5cd3      	ldrb	r3, [r2, r3]
 800476e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d015      	beq.n	80047a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800477a:	4b3c      	ldr	r3, [pc, #240]	@ (800486c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	0c5b      	lsrs	r3, r3, #17
 8004780:	f003 0301 	and.w	r3, r3, #1
 8004784:	4a3b      	ldr	r2, [pc, #236]	@ (8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004786:	5cd3      	ldrb	r3, [r2, r3]
 8004788:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00d      	beq.n	80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004794:	4a38      	ldr	r2, [pc, #224]	@ (8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	fbb2 f2f3 	udiv	r2, r2, r3
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	fb02 f303 	mul.w	r3, r2, r3
 80047a2:	61fb      	str	r3, [r7, #28]
 80047a4:	e004      	b.n	80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	4a34      	ldr	r2, [pc, #208]	@ (800487c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80047aa:	fb02 f303 	mul.w	r3, r2, r3
 80047ae:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80047b0:	4b2e      	ldr	r3, [pc, #184]	@ (800486c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047bc:	d102      	bne.n	80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	61bb      	str	r3, [r7, #24]
      break;
 80047c2:	e04a      	b.n	800485a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	005b      	lsls	r3, r3, #1
 80047c8:	4a2d      	ldr	r2, [pc, #180]	@ (8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80047ca:	fba2 2303 	umull	r2, r3, r2, r3
 80047ce:	085b      	lsrs	r3, r3, #1
 80047d0:	61bb      	str	r3, [r7, #24]
      break;
 80047d2:	e042      	b.n	800485a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80047d4:	4b25      	ldr	r3, [pc, #148]	@ (800486c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80047d6:	6a1b      	ldr	r3, [r3, #32]
 80047d8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047e4:	d108      	bne.n	80047f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f003 0302 	and.w	r3, r3, #2
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d003      	beq.n	80047f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80047f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047f4:	61bb      	str	r3, [r7, #24]
 80047f6:	e01f      	b.n	8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004802:	d109      	bne.n	8004818 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004804:	4b19      	ldr	r3, [pc, #100]	@ (800486c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	2b00      	cmp	r3, #0
 800480e:	d003      	beq.n	8004818 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004810:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004814:	61bb      	str	r3, [r7, #24]
 8004816:	e00f      	b.n	8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800481e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004822:	d11c      	bne.n	800485e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004824:	4b11      	ldr	r3, [pc, #68]	@ (800486c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d016      	beq.n	800485e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004830:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004834:	61bb      	str	r3, [r7, #24]
      break;
 8004836:	e012      	b.n	800485e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004838:	e011      	b.n	800485e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800483a:	f7ff fe55 	bl	80044e8 <HAL_RCC_GetPCLK2Freq>
 800483e:	4602      	mov	r2, r0
 8004840:	4b0a      	ldr	r3, [pc, #40]	@ (800486c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	0b9b      	lsrs	r3, r3, #14
 8004846:	f003 0303 	and.w	r3, r3, #3
 800484a:	3301      	adds	r3, #1
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004852:	61bb      	str	r3, [r7, #24]
      break;
 8004854:	e004      	b.n	8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004856:	bf00      	nop
 8004858:	e002      	b.n	8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800485a:	bf00      	nop
 800485c:	e000      	b.n	8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800485e:	bf00      	nop
    }
  }
  return (frequency);
 8004860:	69bb      	ldr	r3, [r7, #24]
}
 8004862:	4618      	mov	r0, r3
 8004864:	3720      	adds	r7, #32
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	40021000 	.word	0x40021000
 8004870:	08007238 	.word	0x08007238
 8004874:	08007248 	.word	0x08007248
 8004878:	007a1200 	.word	0x007a1200
 800487c:	003d0900 	.word	0x003d0900
 8004880:	aaaaaaab 	.word	0xaaaaaaab

08004884 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d101      	bne.n	8004896 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e041      	b.n	800491a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800489c:	b2db      	uxtb	r3, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d106      	bne.n	80048b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f7fd fa4a 	bl	8001d44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2202      	movs	r2, #2
 80048b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3304      	adds	r3, #4
 80048c0:	4619      	mov	r1, r3
 80048c2:	4610      	mov	r0, r2
 80048c4:	f000 fc0c 	bl	80050e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3708      	adds	r7, #8
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
	...

08004924 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004932:	b2db      	uxtb	r3, r3
 8004934:	2b01      	cmp	r3, #1
 8004936:	d001      	beq.n	800493c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e035      	b.n	80049a8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2202      	movs	r2, #2
 8004940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68da      	ldr	r2, [r3, #12]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f042 0201 	orr.w	r2, r2, #1
 8004952:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a16      	ldr	r2, [pc, #88]	@ (80049b4 <HAL_TIM_Base_Start_IT+0x90>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d009      	beq.n	8004972 <HAL_TIM_Base_Start_IT+0x4e>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004966:	d004      	beq.n	8004972 <HAL_TIM_Base_Start_IT+0x4e>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a12      	ldr	r2, [pc, #72]	@ (80049b8 <HAL_TIM_Base_Start_IT+0x94>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d111      	bne.n	8004996 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f003 0307 	and.w	r3, r3, #7
 800497c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2b06      	cmp	r3, #6
 8004982:	d010      	beq.n	80049a6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f042 0201 	orr.w	r2, r2, #1
 8004992:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004994:	e007      	b.n	80049a6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f042 0201 	orr.w	r2, r2, #1
 80049a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3714      	adds	r7, #20
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bc80      	pop	{r7}
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	40012c00 	.word	0x40012c00
 80049b8:	40000400 	.word	0x40000400

080049bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e041      	b.n	8004a52 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d106      	bne.n	80049e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f839 	bl	8004a5a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2202      	movs	r2, #2
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	3304      	adds	r3, #4
 80049f8:	4619      	mov	r1, r3
 80049fa:	4610      	mov	r0, r2
 80049fc:	f000 fb70 	bl	80050e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3708      	adds	r7, #8
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b083      	sub	sp, #12
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a62:	bf00      	nop
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bc80      	pop	{r7}
 8004a6a:	4770      	bx	lr

08004a6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d109      	bne.n	8004a90 <HAL_TIM_PWM_Start+0x24>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	bf14      	ite	ne
 8004a88:	2301      	movne	r3, #1
 8004a8a:	2300      	moveq	r3, #0
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	e022      	b.n	8004ad6 <HAL_TIM_PWM_Start+0x6a>
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	2b04      	cmp	r3, #4
 8004a94:	d109      	bne.n	8004aaa <HAL_TIM_PWM_Start+0x3e>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	bf14      	ite	ne
 8004aa2:	2301      	movne	r3, #1
 8004aa4:	2300      	moveq	r3, #0
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	e015      	b.n	8004ad6 <HAL_TIM_PWM_Start+0x6a>
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	2b08      	cmp	r3, #8
 8004aae:	d109      	bne.n	8004ac4 <HAL_TIM_PWM_Start+0x58>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	bf14      	ite	ne
 8004abc:	2301      	movne	r3, #1
 8004abe:	2300      	moveq	r3, #0
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	e008      	b.n	8004ad6 <HAL_TIM_PWM_Start+0x6a>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	bf14      	ite	ne
 8004ad0:	2301      	movne	r3, #1
 8004ad2:	2300      	moveq	r3, #0
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d001      	beq.n	8004ade <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e059      	b.n	8004b92 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d104      	bne.n	8004aee <HAL_TIM_PWM_Start+0x82>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004aec:	e013      	b.n	8004b16 <HAL_TIM_PWM_Start+0xaa>
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	2b04      	cmp	r3, #4
 8004af2:	d104      	bne.n	8004afe <HAL_TIM_PWM_Start+0x92>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2202      	movs	r2, #2
 8004af8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004afc:	e00b      	b.n	8004b16 <HAL_TIM_PWM_Start+0xaa>
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	2b08      	cmp	r3, #8
 8004b02:	d104      	bne.n	8004b0e <HAL_TIM_PWM_Start+0xa2>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2202      	movs	r2, #2
 8004b08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b0c:	e003      	b.n	8004b16 <HAL_TIM_PWM_Start+0xaa>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2202      	movs	r2, #2
 8004b12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	6839      	ldr	r1, [r7, #0]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 fd60 	bl	80055e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a1c      	ldr	r2, [pc, #112]	@ (8004b9c <HAL_TIM_PWM_Start+0x130>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d107      	bne.n	8004b3e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b3c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a16      	ldr	r2, [pc, #88]	@ (8004b9c <HAL_TIM_PWM_Start+0x130>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d009      	beq.n	8004b5c <HAL_TIM_PWM_Start+0xf0>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b50:	d004      	beq.n	8004b5c <HAL_TIM_PWM_Start+0xf0>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a12      	ldr	r2, [pc, #72]	@ (8004ba0 <HAL_TIM_PWM_Start+0x134>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d111      	bne.n	8004b80 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f003 0307 	and.w	r3, r3, #7
 8004b66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2b06      	cmp	r3, #6
 8004b6c:	d010      	beq.n	8004b90 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f042 0201 	orr.w	r2, r2, #1
 8004b7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b7e:	e007      	b.n	8004b90 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f042 0201 	orr.w	r2, r2, #1
 8004b8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	40012c00 	.word	0x40012c00
 8004ba0:	40000400 	.word	0x40000400

08004ba4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d020      	beq.n	8004c08 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d01b      	beq.n	8004c08 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f06f 0202 	mvn.w	r2, #2
 8004bd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	f003 0303 	and.w	r3, r3, #3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 fa5a 	bl	80050a8 <HAL_TIM_IC_CaptureCallback>
 8004bf4:	e005      	b.n	8004c02 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 fa4d 	bl	8005096 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 fa5c 	bl	80050ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	f003 0304 	and.w	r3, r3, #4
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d020      	beq.n	8004c54 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f003 0304 	and.w	r3, r3, #4
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d01b      	beq.n	8004c54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f06f 0204 	mvn.w	r2, #4
 8004c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2202      	movs	r2, #2
 8004c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d003      	beq.n	8004c42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 fa34 	bl	80050a8 <HAL_TIM_IC_CaptureCallback>
 8004c40:	e005      	b.n	8004c4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 fa27 	bl	8005096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 fa36 	bl	80050ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	f003 0308 	and.w	r3, r3, #8
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d020      	beq.n	8004ca0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f003 0308 	and.w	r3, r3, #8
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d01b      	beq.n	8004ca0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f06f 0208 	mvn.w	r2, #8
 8004c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2204      	movs	r2, #4
 8004c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	69db      	ldr	r3, [r3, #28]
 8004c7e:	f003 0303 	and.w	r3, r3, #3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d003      	beq.n	8004c8e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 fa0e 	bl	80050a8 <HAL_TIM_IC_CaptureCallback>
 8004c8c:	e005      	b.n	8004c9a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 fa01 	bl	8005096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 fa10 	bl	80050ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	f003 0310 	and.w	r3, r3, #16
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d020      	beq.n	8004cec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f003 0310 	and.w	r3, r3, #16
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d01b      	beq.n	8004cec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f06f 0210 	mvn.w	r2, #16
 8004cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2208      	movs	r2, #8
 8004cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	69db      	ldr	r3, [r3, #28]
 8004cca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d003      	beq.n	8004cda <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 f9e8 	bl	80050a8 <HAL_TIM_IC_CaptureCallback>
 8004cd8:	e005      	b.n	8004ce6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f9db 	bl	8005096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 f9ea 	bl	80050ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00c      	beq.n	8004d10 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d007      	beq.n	8004d10 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f06f 0201 	mvn.w	r2, #1
 8004d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f7fc ff4e 	bl	8001bac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00c      	beq.n	8004d34 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d007      	beq.n	8004d34 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 fd2e 	bl	8005790 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00c      	beq.n	8004d58 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d007      	beq.n	8004d58 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 f9ba 	bl	80050cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	f003 0320 	and.w	r3, r3, #32
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00c      	beq.n	8004d7c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f003 0320 	and.w	r3, r3, #32
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d007      	beq.n	8004d7c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f06f 0220 	mvn.w	r2, #32
 8004d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 fd01 	bl	800577e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d7c:	bf00      	nop
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b086      	sub	sp, #24
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d90:	2300      	movs	r3, #0
 8004d92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d101      	bne.n	8004da2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d9e:	2302      	movs	r3, #2
 8004da0:	e0ae      	b.n	8004f00 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2b0c      	cmp	r3, #12
 8004dae:	f200 809f 	bhi.w	8004ef0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004db2:	a201      	add	r2, pc, #4	@ (adr r2, 8004db8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db8:	08004ded 	.word	0x08004ded
 8004dbc:	08004ef1 	.word	0x08004ef1
 8004dc0:	08004ef1 	.word	0x08004ef1
 8004dc4:	08004ef1 	.word	0x08004ef1
 8004dc8:	08004e2d 	.word	0x08004e2d
 8004dcc:	08004ef1 	.word	0x08004ef1
 8004dd0:	08004ef1 	.word	0x08004ef1
 8004dd4:	08004ef1 	.word	0x08004ef1
 8004dd8:	08004e6f 	.word	0x08004e6f
 8004ddc:	08004ef1 	.word	0x08004ef1
 8004de0:	08004ef1 	.word	0x08004ef1
 8004de4:	08004ef1 	.word	0x08004ef1
 8004de8:	08004eaf 	.word	0x08004eaf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68b9      	ldr	r1, [r7, #8]
 8004df2:	4618      	mov	r0, r3
 8004df4:	f000 f9d8 	bl	80051a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	699a      	ldr	r2, [r3, #24]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f042 0208 	orr.w	r2, r2, #8
 8004e06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	699a      	ldr	r2, [r3, #24]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f022 0204 	bic.w	r2, r2, #4
 8004e16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6999      	ldr	r1, [r3, #24]
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	691a      	ldr	r2, [r3, #16]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	430a      	orrs	r2, r1
 8004e28:	619a      	str	r2, [r3, #24]
      break;
 8004e2a:	e064      	b.n	8004ef6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68b9      	ldr	r1, [r7, #8]
 8004e32:	4618      	mov	r0, r3
 8004e34:	f000 fa1e 	bl	8005274 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	699a      	ldr	r2, [r3, #24]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	699a      	ldr	r2, [r3, #24]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6999      	ldr	r1, [r3, #24]
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	021a      	lsls	r2, r3, #8
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	619a      	str	r2, [r3, #24]
      break;
 8004e6c:	e043      	b.n	8004ef6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68b9      	ldr	r1, [r7, #8]
 8004e74:	4618      	mov	r0, r3
 8004e76:	f000 fa67 	bl	8005348 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	69da      	ldr	r2, [r3, #28]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f042 0208 	orr.w	r2, r2, #8
 8004e88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	69da      	ldr	r2, [r3, #28]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f022 0204 	bic.w	r2, r2, #4
 8004e98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	69d9      	ldr	r1, [r3, #28]
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	691a      	ldr	r2, [r3, #16]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	61da      	str	r2, [r3, #28]
      break;
 8004eac:	e023      	b.n	8004ef6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68b9      	ldr	r1, [r7, #8]
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f000 fab1 	bl	800541c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	69da      	ldr	r2, [r3, #28]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ec8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	69da      	ldr	r2, [r3, #28]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ed8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	69d9      	ldr	r1, [r3, #28]
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	021a      	lsls	r2, r3, #8
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	430a      	orrs	r2, r1
 8004eec:	61da      	str	r2, [r3, #28]
      break;
 8004eee:	e002      	b.n	8004ef6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ef4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3718      	adds	r7, #24
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f12:	2300      	movs	r3, #0
 8004f14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d101      	bne.n	8004f24 <HAL_TIM_ConfigClockSource+0x1c>
 8004f20:	2302      	movs	r3, #2
 8004f22:	e0b4      	b.n	800508e <HAL_TIM_ConfigClockSource+0x186>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2202      	movs	r2, #2
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004f42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68ba      	ldr	r2, [r7, #8]
 8004f52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f5c:	d03e      	beq.n	8004fdc <HAL_TIM_ConfigClockSource+0xd4>
 8004f5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f62:	f200 8087 	bhi.w	8005074 <HAL_TIM_ConfigClockSource+0x16c>
 8004f66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f6a:	f000 8086 	beq.w	800507a <HAL_TIM_ConfigClockSource+0x172>
 8004f6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f72:	d87f      	bhi.n	8005074 <HAL_TIM_ConfigClockSource+0x16c>
 8004f74:	2b70      	cmp	r3, #112	@ 0x70
 8004f76:	d01a      	beq.n	8004fae <HAL_TIM_ConfigClockSource+0xa6>
 8004f78:	2b70      	cmp	r3, #112	@ 0x70
 8004f7a:	d87b      	bhi.n	8005074 <HAL_TIM_ConfigClockSource+0x16c>
 8004f7c:	2b60      	cmp	r3, #96	@ 0x60
 8004f7e:	d050      	beq.n	8005022 <HAL_TIM_ConfigClockSource+0x11a>
 8004f80:	2b60      	cmp	r3, #96	@ 0x60
 8004f82:	d877      	bhi.n	8005074 <HAL_TIM_ConfigClockSource+0x16c>
 8004f84:	2b50      	cmp	r3, #80	@ 0x50
 8004f86:	d03c      	beq.n	8005002 <HAL_TIM_ConfigClockSource+0xfa>
 8004f88:	2b50      	cmp	r3, #80	@ 0x50
 8004f8a:	d873      	bhi.n	8005074 <HAL_TIM_ConfigClockSource+0x16c>
 8004f8c:	2b40      	cmp	r3, #64	@ 0x40
 8004f8e:	d058      	beq.n	8005042 <HAL_TIM_ConfigClockSource+0x13a>
 8004f90:	2b40      	cmp	r3, #64	@ 0x40
 8004f92:	d86f      	bhi.n	8005074 <HAL_TIM_ConfigClockSource+0x16c>
 8004f94:	2b30      	cmp	r3, #48	@ 0x30
 8004f96:	d064      	beq.n	8005062 <HAL_TIM_ConfigClockSource+0x15a>
 8004f98:	2b30      	cmp	r3, #48	@ 0x30
 8004f9a:	d86b      	bhi.n	8005074 <HAL_TIM_ConfigClockSource+0x16c>
 8004f9c:	2b20      	cmp	r3, #32
 8004f9e:	d060      	beq.n	8005062 <HAL_TIM_ConfigClockSource+0x15a>
 8004fa0:	2b20      	cmp	r3, #32
 8004fa2:	d867      	bhi.n	8005074 <HAL_TIM_ConfigClockSource+0x16c>
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d05c      	beq.n	8005062 <HAL_TIM_ConfigClockSource+0x15a>
 8004fa8:	2b10      	cmp	r3, #16
 8004faa:	d05a      	beq.n	8005062 <HAL_TIM_ConfigClockSource+0x15a>
 8004fac:	e062      	b.n	8005074 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fbe:	f000 faf2 	bl	80055a6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004fd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68ba      	ldr	r2, [r7, #8]
 8004fd8:	609a      	str	r2, [r3, #8]
      break;
 8004fda:	e04f      	b.n	800507c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fec:	f000 fadb 	bl	80055a6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	689a      	ldr	r2, [r3, #8]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ffe:	609a      	str	r2, [r3, #8]
      break;
 8005000:	e03c      	b.n	800507c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800500e:	461a      	mov	r2, r3
 8005010:	f000 fa52 	bl	80054b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2150      	movs	r1, #80	@ 0x50
 800501a:	4618      	mov	r0, r3
 800501c:	f000 faa9 	bl	8005572 <TIM_ITRx_SetConfig>
      break;
 8005020:	e02c      	b.n	800507c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800502e:	461a      	mov	r2, r3
 8005030:	f000 fa70 	bl	8005514 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2160      	movs	r1, #96	@ 0x60
 800503a:	4618      	mov	r0, r3
 800503c:	f000 fa99 	bl	8005572 <TIM_ITRx_SetConfig>
      break;
 8005040:	e01c      	b.n	800507c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800504e:	461a      	mov	r2, r3
 8005050:	f000 fa32 	bl	80054b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2140      	movs	r1, #64	@ 0x40
 800505a:	4618      	mov	r0, r3
 800505c:	f000 fa89 	bl	8005572 <TIM_ITRx_SetConfig>
      break;
 8005060:	e00c      	b.n	800507c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4619      	mov	r1, r3
 800506c:	4610      	mov	r0, r2
 800506e:	f000 fa80 	bl	8005572 <TIM_ITRx_SetConfig>
      break;
 8005072:	e003      	b.n	800507c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	73fb      	strb	r3, [r7, #15]
      break;
 8005078:	e000      	b.n	800507c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800507a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800508c:	7bfb      	ldrb	r3, [r7, #15]
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005096:	b480      	push	{r7}
 8005098:	b083      	sub	sp, #12
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800509e:	bf00      	nop
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bc80      	pop	{r7}
 80050a6:	4770      	bx	lr

080050a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bc80      	pop	{r7}
 80050b8:	4770      	bx	lr

080050ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050ba:	b480      	push	{r7}
 80050bc:	b083      	sub	sp, #12
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050c2:	bf00      	nop
 80050c4:	370c      	adds	r7, #12
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bc80      	pop	{r7}
 80050ca:	4770      	bx	lr

080050cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	bc80      	pop	{r7}
 80050dc:	4770      	bx	lr
	...

080050e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a2b      	ldr	r2, [pc, #172]	@ (80051a0 <TIM_Base_SetConfig+0xc0>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d007      	beq.n	8005108 <TIM_Base_SetConfig+0x28>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050fe:	d003      	beq.n	8005108 <TIM_Base_SetConfig+0x28>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a28      	ldr	r2, [pc, #160]	@ (80051a4 <TIM_Base_SetConfig+0xc4>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d108      	bne.n	800511a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800510e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	4313      	orrs	r3, r2
 8005118:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a20      	ldr	r2, [pc, #128]	@ (80051a0 <TIM_Base_SetConfig+0xc0>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d007      	beq.n	8005132 <TIM_Base_SetConfig+0x52>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005128:	d003      	beq.n	8005132 <TIM_Base_SetConfig+0x52>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a1d      	ldr	r2, [pc, #116]	@ (80051a4 <TIM_Base_SetConfig+0xc4>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d108      	bne.n	8005144 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005138:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	4313      	orrs	r3, r2
 8005142:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	4313      	orrs	r3, r2
 8005150:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	689a      	ldr	r2, [r3, #8]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a0d      	ldr	r2, [pc, #52]	@ (80051a0 <TIM_Base_SetConfig+0xc0>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d103      	bne.n	8005178 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	691a      	ldr	r2, [r3, #16]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	2b00      	cmp	r3, #0
 8005188:	d005      	beq.n	8005196 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	f023 0201 	bic.w	r2, r3, #1
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	611a      	str	r2, [r3, #16]
  }
}
 8005196:	bf00      	nop
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	bc80      	pop	{r7}
 800519e:	4770      	bx	lr
 80051a0:	40012c00 	.word	0x40012c00
 80051a4:	40000400 	.word	0x40000400

080051a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b087      	sub	sp, #28
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	f023 0201 	bic.w	r2, r3, #1
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f023 0303 	bic.w	r3, r3, #3
 80051de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	f023 0302 	bic.w	r3, r3, #2
 80051f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a1c      	ldr	r2, [pc, #112]	@ (8005270 <TIM_OC1_SetConfig+0xc8>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d10c      	bne.n	800521e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	f023 0308 	bic.w	r3, r3, #8
 800520a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	4313      	orrs	r3, r2
 8005214:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	f023 0304 	bic.w	r3, r3, #4
 800521c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a13      	ldr	r2, [pc, #76]	@ (8005270 <TIM_OC1_SetConfig+0xc8>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d111      	bne.n	800524a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800522c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005234:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	693a      	ldr	r2, [r7, #16]
 800523c:	4313      	orrs	r3, r2
 800523e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	693a      	ldr	r2, [r7, #16]
 8005246:	4313      	orrs	r3, r2
 8005248:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	693a      	ldr	r2, [r7, #16]
 800524e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	685a      	ldr	r2, [r3, #4]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	621a      	str	r2, [r3, #32]
}
 8005264:	bf00      	nop
 8005266:	371c      	adds	r7, #28
 8005268:	46bd      	mov	sp, r7
 800526a:	bc80      	pop	{r7}
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	40012c00 	.word	0x40012c00

08005274 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005274:	b480      	push	{r7}
 8005276:	b087      	sub	sp, #28
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a1b      	ldr	r3, [r3, #32]
 8005288:	f023 0210 	bic.w	r2, r3, #16
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	021b      	lsls	r3, r3, #8
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	f023 0320 	bic.w	r3, r3, #32
 80052be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	011b      	lsls	r3, r3, #4
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a1d      	ldr	r2, [pc, #116]	@ (8005344 <TIM_OC2_SetConfig+0xd0>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d10d      	bne.n	80052f0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	011b      	lsls	r3, r3, #4
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a14      	ldr	r2, [pc, #80]	@ (8005344 <TIM_OC2_SetConfig+0xd0>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d113      	bne.n	8005320 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80052fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005306:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	695b      	ldr	r3, [r3, #20]
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	4313      	orrs	r3, r2
 8005312:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	693a      	ldr	r2, [r7, #16]
 800531c:	4313      	orrs	r3, r2
 800531e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	693a      	ldr	r2, [r7, #16]
 8005324:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	685a      	ldr	r2, [r3, #4]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	621a      	str	r2, [r3, #32]
}
 800533a:	bf00      	nop
 800533c:	371c      	adds	r7, #28
 800533e:	46bd      	mov	sp, r7
 8005340:	bc80      	pop	{r7}
 8005342:	4770      	bx	lr
 8005344:	40012c00 	.word	0x40012c00

08005348 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005348:	b480      	push	{r7}
 800534a:	b087      	sub	sp, #28
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a1b      	ldr	r3, [r3, #32]
 800535c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	69db      	ldr	r3, [r3, #28]
 800536e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f023 0303 	bic.w	r3, r3, #3
 800537e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	4313      	orrs	r3, r2
 8005388:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005390:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	021b      	lsls	r3, r3, #8
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	4313      	orrs	r3, r2
 800539c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a1d      	ldr	r2, [pc, #116]	@ (8005418 <TIM_OC3_SetConfig+0xd0>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d10d      	bne.n	80053c2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80053ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	021b      	lsls	r3, r3, #8
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80053c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a14      	ldr	r2, [pc, #80]	@ (8005418 <TIM_OC3_SetConfig+0xd0>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d113      	bne.n	80053f2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80053d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80053d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	011b      	lsls	r3, r3, #4
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	011b      	lsls	r3, r3, #4
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	621a      	str	r2, [r3, #32]
}
 800540c:	bf00      	nop
 800540e:	371c      	adds	r7, #28
 8005410:	46bd      	mov	sp, r7
 8005412:	bc80      	pop	{r7}
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	40012c00 	.word	0x40012c00

0800541c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800541c:	b480      	push	{r7}
 800541e:	b087      	sub	sp, #28
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a1b      	ldr	r3, [r3, #32]
 8005430:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	69db      	ldr	r3, [r3, #28]
 8005442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800544a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005452:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	021b      	lsls	r3, r3, #8
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	4313      	orrs	r3, r2
 800545e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005466:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	031b      	lsls	r3, r3, #12
 800546e:	693a      	ldr	r2, [r7, #16]
 8005470:	4313      	orrs	r3, r2
 8005472:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a0f      	ldr	r2, [pc, #60]	@ (80054b4 <TIM_OC4_SetConfig+0x98>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d109      	bne.n	8005490 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005482:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	695b      	ldr	r3, [r3, #20]
 8005488:	019b      	lsls	r3, r3, #6
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	4313      	orrs	r3, r2
 800548e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	697a      	ldr	r2, [r7, #20]
 8005494:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	685a      	ldr	r2, [r3, #4]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	621a      	str	r2, [r3, #32]
}
 80054aa:	bf00      	nop
 80054ac:	371c      	adds	r7, #28
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bc80      	pop	{r7}
 80054b2:	4770      	bx	lr
 80054b4:	40012c00 	.word	0x40012c00

080054b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b087      	sub	sp, #28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6a1b      	ldr	r3, [r3, #32]
 80054c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	f023 0201 	bic.w	r2, r3, #1
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	011b      	lsls	r3, r3, #4
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f023 030a 	bic.w	r3, r3, #10
 80054f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	621a      	str	r2, [r3, #32]
}
 800550a:	bf00      	nop
 800550c:	371c      	adds	r7, #28
 800550e:	46bd      	mov	sp, r7
 8005510:	bc80      	pop	{r7}
 8005512:	4770      	bx	lr

08005514 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005514:	b480      	push	{r7}
 8005516:	b087      	sub	sp, #28
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6a1b      	ldr	r3, [r3, #32]
 8005524:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6a1b      	ldr	r3, [r3, #32]
 800552a:	f023 0210 	bic.w	r2, r3, #16
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800553e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	031b      	lsls	r3, r3, #12
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	4313      	orrs	r3, r2
 8005548:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005550:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	011b      	lsls	r3, r3, #4
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	4313      	orrs	r3, r2
 800555a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	693a      	ldr	r2, [r7, #16]
 8005560:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	621a      	str	r2, [r3, #32]
}
 8005568:	bf00      	nop
 800556a:	371c      	adds	r7, #28
 800556c:	46bd      	mov	sp, r7
 800556e:	bc80      	pop	{r7}
 8005570:	4770      	bx	lr

08005572 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005572:	b480      	push	{r7}
 8005574:	b085      	sub	sp, #20
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
 800557a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005588:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	4313      	orrs	r3, r2
 8005590:	f043 0307 	orr.w	r3, r3, #7
 8005594:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	609a      	str	r2, [r3, #8]
}
 800559c:	bf00      	nop
 800559e:	3714      	adds	r7, #20
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bc80      	pop	{r7}
 80055a4:	4770      	bx	lr

080055a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055a6:	b480      	push	{r7}
 80055a8:	b087      	sub	sp, #28
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	60f8      	str	r0, [r7, #12]
 80055ae:	60b9      	str	r1, [r7, #8]
 80055b0:	607a      	str	r2, [r7, #4]
 80055b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80055c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	021a      	lsls	r2, r3, #8
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	431a      	orrs	r2, r3
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	609a      	str	r2, [r3, #8]
}
 80055da:	bf00      	nop
 80055dc:	371c      	adds	r7, #28
 80055de:	46bd      	mov	sp, r7
 80055e0:	bc80      	pop	{r7}
 80055e2:	4770      	bx	lr

080055e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b087      	sub	sp, #28
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	f003 031f 	and.w	r3, r3, #31
 80055f6:	2201      	movs	r2, #1
 80055f8:	fa02 f303 	lsl.w	r3, r2, r3
 80055fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6a1a      	ldr	r2, [r3, #32]
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	43db      	mvns	r3, r3
 8005606:	401a      	ands	r2, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6a1a      	ldr	r2, [r3, #32]
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	f003 031f 	and.w	r3, r3, #31
 8005616:	6879      	ldr	r1, [r7, #4]
 8005618:	fa01 f303 	lsl.w	r3, r1, r3
 800561c:	431a      	orrs	r2, r3
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	621a      	str	r2, [r3, #32]
}
 8005622:	bf00      	nop
 8005624:	371c      	adds	r7, #28
 8005626:	46bd      	mov	sp, r7
 8005628:	bc80      	pop	{r7}
 800562a:	4770      	bx	lr

0800562c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800563c:	2b01      	cmp	r3, #1
 800563e:	d101      	bne.n	8005644 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005640:	2302      	movs	r3, #2
 8005642:	e041      	b.n	80056c8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2202      	movs	r2, #2
 8005650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800566a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	4313      	orrs	r3, r2
 8005674:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a14      	ldr	r2, [pc, #80]	@ (80056d4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d009      	beq.n	800569c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005690:	d004      	beq.n	800569c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a10      	ldr	r2, [pc, #64]	@ (80056d8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d10c      	bne.n	80056b6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	68ba      	ldr	r2, [r7, #8]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3714      	adds	r7, #20
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bc80      	pop	{r7}
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	40012c00 	.word	0x40012c00
 80056d8:	40000400 	.word	0x40000400

080056dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80056e6:	2300      	movs	r3, #0
 80056e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d101      	bne.n	80056f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80056f4:	2302      	movs	r3, #2
 80056f6:	e03d      	b.n	8005774 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	4313      	orrs	r3, r2
 800570c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	4313      	orrs	r3, r2
 800571a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	4313      	orrs	r3, r2
 8005728:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4313      	orrs	r3, r2
 8005736:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	4313      	orrs	r3, r2
 8005744:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	695b      	ldr	r3, [r3, #20]
 8005750:	4313      	orrs	r3, r2
 8005752:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	69db      	ldr	r3, [r3, #28]
 800575e:	4313      	orrs	r3, r2
 8005760:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3714      	adds	r7, #20
 8005778:	46bd      	mov	sp, r7
 800577a:	bc80      	pop	{r7}
 800577c:	4770      	bx	lr

0800577e <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800577e:	b480      	push	{r7}
 8005780:	b083      	sub	sp, #12
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005786:	bf00      	nop
 8005788:	370c      	adds	r7, #12
 800578a:	46bd      	mov	sp, r7
 800578c:	bc80      	pop	{r7}
 800578e:	4770      	bx	lr

08005790 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005798:	bf00      	nop
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	bc80      	pop	{r7}
 80057a0:	4770      	bx	lr

080057a2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80057a2:	b480      	push	{r7}
 80057a4:	b085      	sub	sp, #20
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	4603      	mov	r3, r0
 80057aa:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80057ac:	2300      	movs	r3, #0
 80057ae:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80057b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057b4:	2b84      	cmp	r3, #132	@ 0x84
 80057b6:	d005      	beq.n	80057c4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80057b8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	4413      	add	r3, r2
 80057c0:	3303      	adds	r3, #3
 80057c2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80057c4:	68fb      	ldr	r3, [r7, #12]
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3714      	adds	r7, #20
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bc80      	pop	{r7}
 80057ce:	4770      	bx	lr

080057d0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80057d4:	f000 faf8 	bl	8005dc8 <vTaskStartScheduler>
  
  return osOK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	bd80      	pop	{r7, pc}

080057de <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80057de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057e0:	b089      	sub	sp, #36	@ 0x24
 80057e2:	af04      	add	r7, sp, #16
 80057e4:	6078      	str	r0, [r7, #4]
 80057e6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	695b      	ldr	r3, [r3, #20]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d020      	beq.n	8005832 <osThreadCreate+0x54>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	699b      	ldr	r3, [r3, #24]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d01c      	beq.n	8005832 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685c      	ldr	r4, [r3, #4]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	691e      	ldr	r6, [r3, #16]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800580a:	4618      	mov	r0, r3
 800580c:	f7ff ffc9 	bl	80057a2 <makeFreeRtosPriority>
 8005810:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800581a:	9202      	str	r2, [sp, #8]
 800581c:	9301      	str	r3, [sp, #4]
 800581e:	9100      	str	r1, [sp, #0]
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	4632      	mov	r2, r6
 8005824:	4629      	mov	r1, r5
 8005826:	4620      	mov	r0, r4
 8005828:	f000 f8e8 	bl	80059fc <xTaskCreateStatic>
 800582c:	4603      	mov	r3, r0
 800582e:	60fb      	str	r3, [r7, #12]
 8005830:	e01c      	b.n	800586c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685c      	ldr	r4, [r3, #4]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800583e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005846:	4618      	mov	r0, r3
 8005848:	f7ff ffab 	bl	80057a2 <makeFreeRtosPriority>
 800584c:	4602      	mov	r2, r0
 800584e:	f107 030c 	add.w	r3, r7, #12
 8005852:	9301      	str	r3, [sp, #4]
 8005854:	9200      	str	r2, [sp, #0]
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	4632      	mov	r2, r6
 800585a:	4629      	mov	r1, r5
 800585c:	4620      	mov	r0, r4
 800585e:	f000 f92d 	bl	8005abc <xTaskCreate>
 8005862:	4603      	mov	r3, r0
 8005864:	2b01      	cmp	r3, #1
 8005866:	d001      	beq.n	800586c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005868:	2300      	movs	r3, #0
 800586a:	e000      	b.n	800586e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800586c:	68fb      	ldr	r3, [r7, #12]
}
 800586e:	4618      	mov	r0, r3
 8005870:	3714      	adds	r7, #20
 8005872:	46bd      	mov	sp, r7
 8005874:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005876 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005876:	b580      	push	{r7, lr}
 8005878:	b084      	sub	sp, #16
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d001      	beq.n	800588c <osDelay+0x16>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	e000      	b.n	800588e <osDelay+0x18>
 800588c:	2301      	movs	r3, #1
 800588e:	4618      	mov	r0, r3
 8005890:	f000 fa64 	bl	8005d5c <vTaskDelay>
  
  return osOK;
 8005894:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005896:	4618      	mov	r0, r3
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}

0800589e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800589e:	b480      	push	{r7}
 80058a0:	b083      	sub	sp, #12
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f103 0208 	add.w	r2, r3, #8
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80058b6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f103 0208 	add.w	r2, r3, #8
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f103 0208 	add.w	r2, r3, #8
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80058d2:	bf00      	nop
 80058d4:	370c      	adds	r7, #12
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bc80      	pop	{r7}
 80058da:	4770      	bx	lr

080058dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80058ea:	bf00      	nop
 80058ec:	370c      	adds	r7, #12
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bc80      	pop	{r7}
 80058f2:	4770      	bx	lr

080058f4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	689a      	ldr	r2, [r3, #8]
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	683a      	ldr	r2, [r7, #0]
 8005918:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	683a      	ldr	r2, [r7, #0]
 800591e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	1c5a      	adds	r2, r3, #1
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	601a      	str	r2, [r3, #0]
}
 8005930:	bf00      	nop
 8005932:	3714      	adds	r7, #20
 8005934:	46bd      	mov	sp, r7
 8005936:	bc80      	pop	{r7}
 8005938:	4770      	bx	lr

0800593a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800593a:	b480      	push	{r7}
 800593c:	b085      	sub	sp, #20
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
 8005942:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005950:	d103      	bne.n	800595a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	60fb      	str	r3, [r7, #12]
 8005958:	e00c      	b.n	8005974 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	3308      	adds	r3, #8
 800595e:	60fb      	str	r3, [r7, #12]
 8005960:	e002      	b.n	8005968 <vListInsert+0x2e>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	60fb      	str	r3, [r7, #12]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68ba      	ldr	r2, [r7, #8]
 8005970:	429a      	cmp	r2, r3
 8005972:	d2f6      	bcs.n	8005962 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	685a      	ldr	r2, [r3, #4]
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	683a      	ldr	r2, [r7, #0]
 8005982:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	683a      	ldr	r2, [r7, #0]
 800598e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	1c5a      	adds	r2, r3, #1
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	601a      	str	r2, [r3, #0]
}
 80059a0:	bf00      	nop
 80059a2:	3714      	adds	r7, #20
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bc80      	pop	{r7}
 80059a8:	4770      	bx	lr

080059aa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80059aa:	b480      	push	{r7}
 80059ac:	b085      	sub	sp, #20
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	6892      	ldr	r2, [r2, #8]
 80059c0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	6852      	ldr	r2, [r2, #4]
 80059ca:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d103      	bne.n	80059de <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	689a      	ldr	r2, [r3, #8]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	1e5a      	subs	r2, r3, #1
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3714      	adds	r7, #20
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bc80      	pop	{r7}
 80059fa:	4770      	bx	lr

080059fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b08e      	sub	sp, #56	@ 0x38
 8005a00:	af04      	add	r7, sp, #16
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	607a      	str	r2, [r7, #4]
 8005a08:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005a0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d10b      	bne.n	8005a28 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a14:	f383 8811 	msr	BASEPRI, r3
 8005a18:	f3bf 8f6f 	isb	sy
 8005a1c:	f3bf 8f4f 	dsb	sy
 8005a20:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005a22:	bf00      	nop
 8005a24:	bf00      	nop
 8005a26:	e7fd      	b.n	8005a24 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d10b      	bne.n	8005a46 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a32:	f383 8811 	msr	BASEPRI, r3
 8005a36:	f3bf 8f6f 	isb	sy
 8005a3a:	f3bf 8f4f 	dsb	sy
 8005a3e:	61fb      	str	r3, [r7, #28]
}
 8005a40:	bf00      	nop
 8005a42:	bf00      	nop
 8005a44:	e7fd      	b.n	8005a42 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005a46:	23a0      	movs	r3, #160	@ 0xa0
 8005a48:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	2ba0      	cmp	r3, #160	@ 0xa0
 8005a4e:	d00b      	beq.n	8005a68 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a54:	f383 8811 	msr	BASEPRI, r3
 8005a58:	f3bf 8f6f 	isb	sy
 8005a5c:	f3bf 8f4f 	dsb	sy
 8005a60:	61bb      	str	r3, [r7, #24]
}
 8005a62:	bf00      	nop
 8005a64:	bf00      	nop
 8005a66:	e7fd      	b.n	8005a64 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005a68:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d01e      	beq.n	8005aae <xTaskCreateStatic+0xb2>
 8005a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d01b      	beq.n	8005aae <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a78:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005a7e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a82:	2202      	movs	r2, #2
 8005a84:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005a88:	2300      	movs	r3, #0
 8005a8a:	9303      	str	r3, [sp, #12]
 8005a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a8e:	9302      	str	r3, [sp, #8]
 8005a90:	f107 0314 	add.w	r3, r7, #20
 8005a94:	9301      	str	r3, [sp, #4]
 8005a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a98:	9300      	str	r3, [sp, #0]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	68b9      	ldr	r1, [r7, #8]
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f000 f851 	bl	8005b48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005aa6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005aa8:	f000 f8ee 	bl	8005c88 <prvAddNewTaskToReadyList>
 8005aac:	e001      	b.n	8005ab2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005ab2:	697b      	ldr	r3, [r7, #20]
	}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3728      	adds	r7, #40	@ 0x28
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b08c      	sub	sp, #48	@ 0x30
 8005ac0:	af04      	add	r7, sp, #16
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	603b      	str	r3, [r7, #0]
 8005ac8:	4613      	mov	r3, r2
 8005aca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005acc:	88fb      	ldrh	r3, [r7, #6]
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f000 fe9d 	bl	8006810 <pvPortMalloc>
 8005ad6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00e      	beq.n	8005afc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005ade:	20a0      	movs	r0, #160	@ 0xa0
 8005ae0:	f000 fe96 	bl	8006810 <pvPortMalloc>
 8005ae4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d003      	beq.n	8005af4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	631a      	str	r2, [r3, #48]	@ 0x30
 8005af2:	e005      	b.n	8005b00 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005af4:	6978      	ldr	r0, [r7, #20]
 8005af6:	f000 ff59 	bl	80069ac <vPortFree>
 8005afa:	e001      	b.n	8005b00 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005afc:	2300      	movs	r3, #0
 8005afe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d017      	beq.n	8005b36 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005b0e:	88fa      	ldrh	r2, [r7, #6]
 8005b10:	2300      	movs	r3, #0
 8005b12:	9303      	str	r3, [sp, #12]
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	9302      	str	r3, [sp, #8]
 8005b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b1a:	9301      	str	r3, [sp, #4]
 8005b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b1e:	9300      	str	r3, [sp, #0]
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	68b9      	ldr	r1, [r7, #8]
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f000 f80f 	bl	8005b48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b2a:	69f8      	ldr	r0, [r7, #28]
 8005b2c:	f000 f8ac 	bl	8005c88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005b30:	2301      	movs	r3, #1
 8005b32:	61bb      	str	r3, [r7, #24]
 8005b34:	e002      	b.n	8005b3c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005b36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005b3a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005b3c:	69bb      	ldr	r3, [r7, #24]
	}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3720      	adds	r7, #32
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
	...

08005b48 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b088      	sub	sp, #32
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]
 8005b54:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005b60:	3b01      	subs	r3, #1
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4413      	add	r3, r2
 8005b66:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	f023 0307 	bic.w	r3, r3, #7
 8005b6e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	f003 0307 	and.w	r3, r3, #7
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00b      	beq.n	8005b92 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b7e:	f383 8811 	msr	BASEPRI, r3
 8005b82:	f3bf 8f6f 	isb	sy
 8005b86:	f3bf 8f4f 	dsb	sy
 8005b8a:	617b      	str	r3, [r7, #20]
}
 8005b8c:	bf00      	nop
 8005b8e:	bf00      	nop
 8005b90:	e7fd      	b.n	8005b8e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d01f      	beq.n	8005bd8 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b98:	2300      	movs	r3, #0
 8005b9a:	61fb      	str	r3, [r7, #28]
 8005b9c:	e012      	b.n	8005bc4 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b9e:	68ba      	ldr	r2, [r7, #8]
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	7819      	ldrb	r1, [r3, #0]
 8005ba6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	4413      	add	r3, r2
 8005bac:	3334      	adds	r3, #52	@ 0x34
 8005bae:	460a      	mov	r2, r1
 8005bb0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d006      	beq.n	8005bcc <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	61fb      	str	r3, [r7, #28]
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	2b0f      	cmp	r3, #15
 8005bc8:	d9e9      	bls.n	8005b9e <prvInitialiseNewTask+0x56>
 8005bca:	e000      	b.n	8005bce <prvInitialiseNewTask+0x86>
			{
				break;
 8005bcc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005bd6:	e003      	b.n	8005be0 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005be2:	2b06      	cmp	r3, #6
 8005be4:	d901      	bls.n	8005bea <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005be6:	2306      	movs	r3, #6
 8005be8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005bee:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005bf4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bfe:	3304      	adds	r3, #4
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7ff fe6b 	bl	80058dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c08:	3318      	adds	r3, #24
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f7ff fe66 	bl	80058dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c14:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c18:	f1c3 0207 	rsb	r2, r3, #7
 8005c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c1e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c24:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c38:	334c      	adds	r3, #76	@ 0x4c
 8005c3a:	224c      	movs	r2, #76	@ 0x4c
 8005c3c:	2100      	movs	r1, #0
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f000 ffd2 	bl	8006be8 <memset>
 8005c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c46:	4a0d      	ldr	r2, [pc, #52]	@ (8005c7c <prvInitialiseNewTask+0x134>)
 8005c48:	651a      	str	r2, [r3, #80]	@ 0x50
 8005c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c4c:	4a0c      	ldr	r2, [pc, #48]	@ (8005c80 <prvInitialiseNewTask+0x138>)
 8005c4e:	655a      	str	r2, [r3, #84]	@ 0x54
 8005c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c52:	4a0c      	ldr	r2, [pc, #48]	@ (8005c84 <prvInitialiseNewTask+0x13c>)
 8005c54:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005c56:	683a      	ldr	r2, [r7, #0]
 8005c58:	68f9      	ldr	r1, [r7, #12]
 8005c5a:	69b8      	ldr	r0, [r7, #24]
 8005c5c:	f000 fc28 	bl	80064b0 <pxPortInitialiseStack>
 8005c60:	4602      	mov	r2, r0
 8005c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c64:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005c66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d002      	beq.n	8005c72 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c72:	bf00      	nop
 8005c74:	3720      	adds	r7, #32
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	20001254 	.word	0x20001254
 8005c80:	200012bc 	.word	0x200012bc
 8005c84:	20001324 	.word	0x20001324

08005c88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005c90:	f000 fcfc 	bl	800668c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005c94:	4b2a      	ldr	r3, [pc, #168]	@ (8005d40 <prvAddNewTaskToReadyList+0xb8>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	4a29      	ldr	r2, [pc, #164]	@ (8005d40 <prvAddNewTaskToReadyList+0xb8>)
 8005c9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005c9e:	4b29      	ldr	r3, [pc, #164]	@ (8005d44 <prvAddNewTaskToReadyList+0xbc>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d109      	bne.n	8005cba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005ca6:	4a27      	ldr	r2, [pc, #156]	@ (8005d44 <prvAddNewTaskToReadyList+0xbc>)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005cac:	4b24      	ldr	r3, [pc, #144]	@ (8005d40 <prvAddNewTaskToReadyList+0xb8>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d110      	bne.n	8005cd6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005cb4:	f000 fad2 	bl	800625c <prvInitialiseTaskLists>
 8005cb8:	e00d      	b.n	8005cd6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005cba:	4b23      	ldr	r3, [pc, #140]	@ (8005d48 <prvAddNewTaskToReadyList+0xc0>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d109      	bne.n	8005cd6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005cc2:	4b20      	ldr	r3, [pc, #128]	@ (8005d44 <prvAddNewTaskToReadyList+0xbc>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d802      	bhi.n	8005cd6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005cd0:	4a1c      	ldr	r2, [pc, #112]	@ (8005d44 <prvAddNewTaskToReadyList+0xbc>)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005cd6:	4b1d      	ldr	r3, [pc, #116]	@ (8005d4c <prvAddNewTaskToReadyList+0xc4>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	3301      	adds	r3, #1
 8005cdc:	4a1b      	ldr	r2, [pc, #108]	@ (8005d4c <prvAddNewTaskToReadyList+0xc4>)
 8005cde:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	409a      	lsls	r2, r3
 8005ce8:	4b19      	ldr	r3, [pc, #100]	@ (8005d50 <prvAddNewTaskToReadyList+0xc8>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	4a18      	ldr	r2, [pc, #96]	@ (8005d50 <prvAddNewTaskToReadyList+0xc8>)
 8005cf0:	6013      	str	r3, [r2, #0]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	4413      	add	r3, r2
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	4a15      	ldr	r2, [pc, #84]	@ (8005d54 <prvAddNewTaskToReadyList+0xcc>)
 8005d00:	441a      	add	r2, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	3304      	adds	r3, #4
 8005d06:	4619      	mov	r1, r3
 8005d08:	4610      	mov	r0, r2
 8005d0a:	f7ff fdf3 	bl	80058f4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005d0e:	f000 fced 	bl	80066ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005d12:	4b0d      	ldr	r3, [pc, #52]	@ (8005d48 <prvAddNewTaskToReadyList+0xc0>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00e      	beq.n	8005d38 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8005d44 <prvAddNewTaskToReadyList+0xbc>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d207      	bcs.n	8005d38 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005d28:	4b0b      	ldr	r3, [pc, #44]	@ (8005d58 <prvAddNewTaskToReadyList+0xd0>)
 8005d2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d2e:	601a      	str	r2, [r3, #0]
 8005d30:	f3bf 8f4f 	dsb	sy
 8005d34:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d38:	bf00      	nop
 8005d3a:	3708      	adds	r7, #8
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	20000600 	.word	0x20000600
 8005d44:	20000500 	.word	0x20000500
 8005d48:	2000060c 	.word	0x2000060c
 8005d4c:	2000061c 	.word	0x2000061c
 8005d50:	20000608 	.word	0x20000608
 8005d54:	20000504 	.word	0x20000504
 8005d58:	e000ed04 	.word	0xe000ed04

08005d5c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005d64:	2300      	movs	r3, #0
 8005d66:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d018      	beq.n	8005da0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005d6e:	4b14      	ldr	r3, [pc, #80]	@ (8005dc0 <vTaskDelay+0x64>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00b      	beq.n	8005d8e <vTaskDelay+0x32>
	__asm volatile
 8005d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d7a:	f383 8811 	msr	BASEPRI, r3
 8005d7e:	f3bf 8f6f 	isb	sy
 8005d82:	f3bf 8f4f 	dsb	sy
 8005d86:	60bb      	str	r3, [r7, #8]
}
 8005d88:	bf00      	nop
 8005d8a:	bf00      	nop
 8005d8c:	e7fd      	b.n	8005d8a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005d8e:	f000 f885 	bl	8005e9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005d92:	2100      	movs	r1, #0
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 fb25 	bl	80063e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005d9a:	f000 f88d 	bl	8005eb8 <xTaskResumeAll>
 8005d9e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d107      	bne.n	8005db6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005da6:	4b07      	ldr	r3, [pc, #28]	@ (8005dc4 <vTaskDelay+0x68>)
 8005da8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dac:	601a      	str	r2, [r3, #0]
 8005dae:	f3bf 8f4f 	dsb	sy
 8005db2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005db6:	bf00      	nop
 8005db8:	3710      	adds	r7, #16
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	20000628 	.word	0x20000628
 8005dc4:	e000ed04 	.word	0xe000ed04

08005dc8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b08a      	sub	sp, #40	@ 0x28
 8005dcc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005dd6:	463a      	mov	r2, r7
 8005dd8:	1d39      	adds	r1, r7, #4
 8005dda:	f107 0308 	add.w	r3, r7, #8
 8005dde:	4618      	mov	r0, r3
 8005de0:	f7fb fa82 	bl	80012e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005de4:	6839      	ldr	r1, [r7, #0]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	68ba      	ldr	r2, [r7, #8]
 8005dea:	9202      	str	r2, [sp, #8]
 8005dec:	9301      	str	r3, [sp, #4]
 8005dee:	2300      	movs	r3, #0
 8005df0:	9300      	str	r3, [sp, #0]
 8005df2:	2300      	movs	r3, #0
 8005df4:	460a      	mov	r2, r1
 8005df6:	4921      	ldr	r1, [pc, #132]	@ (8005e7c <vTaskStartScheduler+0xb4>)
 8005df8:	4821      	ldr	r0, [pc, #132]	@ (8005e80 <vTaskStartScheduler+0xb8>)
 8005dfa:	f7ff fdff 	bl	80059fc <xTaskCreateStatic>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	4a20      	ldr	r2, [pc, #128]	@ (8005e84 <vTaskStartScheduler+0xbc>)
 8005e02:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005e04:	4b1f      	ldr	r3, [pc, #124]	@ (8005e84 <vTaskStartScheduler+0xbc>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d002      	beq.n	8005e12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	617b      	str	r3, [r7, #20]
 8005e10:	e001      	b.n	8005e16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005e12:	2300      	movs	r3, #0
 8005e14:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d11b      	bne.n	8005e54 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e20:	f383 8811 	msr	BASEPRI, r3
 8005e24:	f3bf 8f6f 	isb	sy
 8005e28:	f3bf 8f4f 	dsb	sy
 8005e2c:	613b      	str	r3, [r7, #16]
}
 8005e2e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005e30:	4b15      	ldr	r3, [pc, #84]	@ (8005e88 <vTaskStartScheduler+0xc0>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	334c      	adds	r3, #76	@ 0x4c
 8005e36:	4a15      	ldr	r2, [pc, #84]	@ (8005e8c <vTaskStartScheduler+0xc4>)
 8005e38:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005e3a:	4b15      	ldr	r3, [pc, #84]	@ (8005e90 <vTaskStartScheduler+0xc8>)
 8005e3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005e40:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005e42:	4b14      	ldr	r3, [pc, #80]	@ (8005e94 <vTaskStartScheduler+0xcc>)
 8005e44:	2201      	movs	r2, #1
 8005e46:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005e48:	4b13      	ldr	r3, [pc, #76]	@ (8005e98 <vTaskStartScheduler+0xd0>)
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005e4e:	f000 fbab 	bl	80065a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005e52:	e00f      	b.n	8005e74 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e5a:	d10b      	bne.n	8005e74 <vTaskStartScheduler+0xac>
	__asm volatile
 8005e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e60:	f383 8811 	msr	BASEPRI, r3
 8005e64:	f3bf 8f6f 	isb	sy
 8005e68:	f3bf 8f4f 	dsb	sy
 8005e6c:	60fb      	str	r3, [r7, #12]
}
 8005e6e:	bf00      	nop
 8005e70:	bf00      	nop
 8005e72:	e7fd      	b.n	8005e70 <vTaskStartScheduler+0xa8>
}
 8005e74:	bf00      	nop
 8005e76:	3718      	adds	r7, #24
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	08007204 	.word	0x08007204
 8005e80:	0800622d 	.word	0x0800622d
 8005e84:	20000624 	.word	0x20000624
 8005e88:	20000500 	.word	0x20000500
 8005e8c:	20000014 	.word	0x20000014
 8005e90:	20000620 	.word	0x20000620
 8005e94:	2000060c 	.word	0x2000060c
 8005e98:	20000604 	.word	0x20000604

08005e9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005ea0:	4b04      	ldr	r3, [pc, #16]	@ (8005eb4 <vTaskSuspendAll+0x18>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	4a03      	ldr	r2, [pc, #12]	@ (8005eb4 <vTaskSuspendAll+0x18>)
 8005ea8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005eaa:	bf00      	nop
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bc80      	pop	{r7}
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop
 8005eb4:	20000628 	.word	0x20000628

08005eb8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005ec6:	4b42      	ldr	r3, [pc, #264]	@ (8005fd0 <xTaskResumeAll+0x118>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d10b      	bne.n	8005ee6 <xTaskResumeAll+0x2e>
	__asm volatile
 8005ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ed2:	f383 8811 	msr	BASEPRI, r3
 8005ed6:	f3bf 8f6f 	isb	sy
 8005eda:	f3bf 8f4f 	dsb	sy
 8005ede:	603b      	str	r3, [r7, #0]
}
 8005ee0:	bf00      	nop
 8005ee2:	bf00      	nop
 8005ee4:	e7fd      	b.n	8005ee2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005ee6:	f000 fbd1 	bl	800668c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005eea:	4b39      	ldr	r3, [pc, #228]	@ (8005fd0 <xTaskResumeAll+0x118>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	4a37      	ldr	r2, [pc, #220]	@ (8005fd0 <xTaskResumeAll+0x118>)
 8005ef2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ef4:	4b36      	ldr	r3, [pc, #216]	@ (8005fd0 <xTaskResumeAll+0x118>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d161      	bne.n	8005fc0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005efc:	4b35      	ldr	r3, [pc, #212]	@ (8005fd4 <xTaskResumeAll+0x11c>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d05d      	beq.n	8005fc0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f04:	e02e      	b.n	8005f64 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f06:	4b34      	ldr	r3, [pc, #208]	@ (8005fd8 <xTaskResumeAll+0x120>)
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	3318      	adds	r3, #24
 8005f12:	4618      	mov	r0, r3
 8005f14:	f7ff fd49 	bl	80059aa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	3304      	adds	r3, #4
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7ff fd44 	bl	80059aa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f26:	2201      	movs	r2, #1
 8005f28:	409a      	lsls	r2, r3
 8005f2a:	4b2c      	ldr	r3, [pc, #176]	@ (8005fdc <xTaskResumeAll+0x124>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	4a2a      	ldr	r2, [pc, #168]	@ (8005fdc <xTaskResumeAll+0x124>)
 8005f32:	6013      	str	r3, [r2, #0]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f38:	4613      	mov	r3, r2
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	4413      	add	r3, r2
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	4a27      	ldr	r2, [pc, #156]	@ (8005fe0 <xTaskResumeAll+0x128>)
 8005f42:	441a      	add	r2, r3
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	3304      	adds	r3, #4
 8005f48:	4619      	mov	r1, r3
 8005f4a:	4610      	mov	r0, r2
 8005f4c:	f7ff fcd2 	bl	80058f4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f54:	4b23      	ldr	r3, [pc, #140]	@ (8005fe4 <xTaskResumeAll+0x12c>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d302      	bcc.n	8005f64 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005f5e:	4b22      	ldr	r3, [pc, #136]	@ (8005fe8 <xTaskResumeAll+0x130>)
 8005f60:	2201      	movs	r2, #1
 8005f62:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f64:	4b1c      	ldr	r3, [pc, #112]	@ (8005fd8 <xTaskResumeAll+0x120>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d1cc      	bne.n	8005f06 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d001      	beq.n	8005f76 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005f72:	f000 fa17 	bl	80063a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005f76:	4b1d      	ldr	r3, [pc, #116]	@ (8005fec <xTaskResumeAll+0x134>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d010      	beq.n	8005fa4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005f82:	f000 f837 	bl	8005ff4 <xTaskIncrementTick>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d002      	beq.n	8005f92 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005f8c:	4b16      	ldr	r3, [pc, #88]	@ (8005fe8 <xTaskResumeAll+0x130>)
 8005f8e:	2201      	movs	r2, #1
 8005f90:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	3b01      	subs	r3, #1
 8005f96:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d1f1      	bne.n	8005f82 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005f9e:	4b13      	ldr	r3, [pc, #76]	@ (8005fec <xTaskResumeAll+0x134>)
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005fa4:	4b10      	ldr	r3, [pc, #64]	@ (8005fe8 <xTaskResumeAll+0x130>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d009      	beq.n	8005fc0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005fac:	2301      	movs	r3, #1
 8005fae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8005ff0 <xTaskResumeAll+0x138>)
 8005fb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fb6:	601a      	str	r2, [r3, #0]
 8005fb8:	f3bf 8f4f 	dsb	sy
 8005fbc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005fc0:	f000 fb94 	bl	80066ec <vPortExitCritical>

	return xAlreadyYielded;
 8005fc4:	68bb      	ldr	r3, [r7, #8]
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3710      	adds	r7, #16
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	20000628 	.word	0x20000628
 8005fd4:	20000600 	.word	0x20000600
 8005fd8:	200005c0 	.word	0x200005c0
 8005fdc:	20000608 	.word	0x20000608
 8005fe0:	20000504 	.word	0x20000504
 8005fe4:	20000500 	.word	0x20000500
 8005fe8:	20000614 	.word	0x20000614
 8005fec:	20000610 	.word	0x20000610
 8005ff0:	e000ed04 	.word	0xe000ed04

08005ff4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b086      	sub	sp, #24
 8005ff8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ffe:	4b4f      	ldr	r3, [pc, #316]	@ (800613c <xTaskIncrementTick+0x148>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	f040 808f 	bne.w	8006126 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006008:	4b4d      	ldr	r3, [pc, #308]	@ (8006140 <xTaskIncrementTick+0x14c>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	3301      	adds	r3, #1
 800600e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006010:	4a4b      	ldr	r2, [pc, #300]	@ (8006140 <xTaskIncrementTick+0x14c>)
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d121      	bne.n	8006060 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800601c:	4b49      	ldr	r3, [pc, #292]	@ (8006144 <xTaskIncrementTick+0x150>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00b      	beq.n	800603e <xTaskIncrementTick+0x4a>
	__asm volatile
 8006026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800602a:	f383 8811 	msr	BASEPRI, r3
 800602e:	f3bf 8f6f 	isb	sy
 8006032:	f3bf 8f4f 	dsb	sy
 8006036:	603b      	str	r3, [r7, #0]
}
 8006038:	bf00      	nop
 800603a:	bf00      	nop
 800603c:	e7fd      	b.n	800603a <xTaskIncrementTick+0x46>
 800603e:	4b41      	ldr	r3, [pc, #260]	@ (8006144 <xTaskIncrementTick+0x150>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	60fb      	str	r3, [r7, #12]
 8006044:	4b40      	ldr	r3, [pc, #256]	@ (8006148 <xTaskIncrementTick+0x154>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a3e      	ldr	r2, [pc, #248]	@ (8006144 <xTaskIncrementTick+0x150>)
 800604a:	6013      	str	r3, [r2, #0]
 800604c:	4a3e      	ldr	r2, [pc, #248]	@ (8006148 <xTaskIncrementTick+0x154>)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6013      	str	r3, [r2, #0]
 8006052:	4b3e      	ldr	r3, [pc, #248]	@ (800614c <xTaskIncrementTick+0x158>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	3301      	adds	r3, #1
 8006058:	4a3c      	ldr	r2, [pc, #240]	@ (800614c <xTaskIncrementTick+0x158>)
 800605a:	6013      	str	r3, [r2, #0]
 800605c:	f000 f9a2 	bl	80063a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006060:	4b3b      	ldr	r3, [pc, #236]	@ (8006150 <xTaskIncrementTick+0x15c>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	693a      	ldr	r2, [r7, #16]
 8006066:	429a      	cmp	r2, r3
 8006068:	d348      	bcc.n	80060fc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800606a:	4b36      	ldr	r3, [pc, #216]	@ (8006144 <xTaskIncrementTick+0x150>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d104      	bne.n	800607e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006074:	4b36      	ldr	r3, [pc, #216]	@ (8006150 <xTaskIncrementTick+0x15c>)
 8006076:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800607a:	601a      	str	r2, [r3, #0]
					break;
 800607c:	e03e      	b.n	80060fc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800607e:	4b31      	ldr	r3, [pc, #196]	@ (8006144 <xTaskIncrementTick+0x150>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800608e:	693a      	ldr	r2, [r7, #16]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	429a      	cmp	r2, r3
 8006094:	d203      	bcs.n	800609e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006096:	4a2e      	ldr	r2, [pc, #184]	@ (8006150 <xTaskIncrementTick+0x15c>)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800609c:	e02e      	b.n	80060fc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	3304      	adds	r3, #4
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7ff fc81 	bl	80059aa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d004      	beq.n	80060ba <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	3318      	adds	r3, #24
 80060b4:	4618      	mov	r0, r3
 80060b6:	f7ff fc78 	bl	80059aa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060be:	2201      	movs	r2, #1
 80060c0:	409a      	lsls	r2, r3
 80060c2:	4b24      	ldr	r3, [pc, #144]	@ (8006154 <xTaskIncrementTick+0x160>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	4a22      	ldr	r2, [pc, #136]	@ (8006154 <xTaskIncrementTick+0x160>)
 80060ca:	6013      	str	r3, [r2, #0]
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060d0:	4613      	mov	r3, r2
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	4413      	add	r3, r2
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	4a1f      	ldr	r2, [pc, #124]	@ (8006158 <xTaskIncrementTick+0x164>)
 80060da:	441a      	add	r2, r3
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	3304      	adds	r3, #4
 80060e0:	4619      	mov	r1, r3
 80060e2:	4610      	mov	r0, r2
 80060e4:	f7ff fc06 	bl	80058f4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060ec:	4b1b      	ldr	r3, [pc, #108]	@ (800615c <xTaskIncrementTick+0x168>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d3b9      	bcc.n	800606a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80060f6:	2301      	movs	r3, #1
 80060f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060fa:	e7b6      	b.n	800606a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80060fc:	4b17      	ldr	r3, [pc, #92]	@ (800615c <xTaskIncrementTick+0x168>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006102:	4915      	ldr	r1, [pc, #84]	@ (8006158 <xTaskIncrementTick+0x164>)
 8006104:	4613      	mov	r3, r2
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	4413      	add	r3, r2
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	440b      	add	r3, r1
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d901      	bls.n	8006118 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006114:	2301      	movs	r3, #1
 8006116:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006118:	4b11      	ldr	r3, [pc, #68]	@ (8006160 <xTaskIncrementTick+0x16c>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d007      	beq.n	8006130 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006120:	2301      	movs	r3, #1
 8006122:	617b      	str	r3, [r7, #20]
 8006124:	e004      	b.n	8006130 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006126:	4b0f      	ldr	r3, [pc, #60]	@ (8006164 <xTaskIncrementTick+0x170>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	3301      	adds	r3, #1
 800612c:	4a0d      	ldr	r2, [pc, #52]	@ (8006164 <xTaskIncrementTick+0x170>)
 800612e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006130:	697b      	ldr	r3, [r7, #20]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3718      	adds	r7, #24
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	20000628 	.word	0x20000628
 8006140:	20000604 	.word	0x20000604
 8006144:	200005b8 	.word	0x200005b8
 8006148:	200005bc 	.word	0x200005bc
 800614c:	20000618 	.word	0x20000618
 8006150:	20000620 	.word	0x20000620
 8006154:	20000608 	.word	0x20000608
 8006158:	20000504 	.word	0x20000504
 800615c:	20000500 	.word	0x20000500
 8006160:	20000614 	.word	0x20000614
 8006164:	20000610 	.word	0x20000610

08006168 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006168:	b480      	push	{r7}
 800616a:	b087      	sub	sp, #28
 800616c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800616e:	4b29      	ldr	r3, [pc, #164]	@ (8006214 <vTaskSwitchContext+0xac>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d003      	beq.n	800617e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006176:	4b28      	ldr	r3, [pc, #160]	@ (8006218 <vTaskSwitchContext+0xb0>)
 8006178:	2201      	movs	r2, #1
 800617a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800617c:	e045      	b.n	800620a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800617e:	4b26      	ldr	r3, [pc, #152]	@ (8006218 <vTaskSwitchContext+0xb0>)
 8006180:	2200      	movs	r2, #0
 8006182:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006184:	4b25      	ldr	r3, [pc, #148]	@ (800621c <vTaskSwitchContext+0xb4>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	fab3 f383 	clz	r3, r3
 8006190:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006192:	7afb      	ldrb	r3, [r7, #11]
 8006194:	f1c3 031f 	rsb	r3, r3, #31
 8006198:	617b      	str	r3, [r7, #20]
 800619a:	4921      	ldr	r1, [pc, #132]	@ (8006220 <vTaskSwitchContext+0xb8>)
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	4613      	mov	r3, r2
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	4413      	add	r3, r2
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	440b      	add	r3, r1
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d10b      	bne.n	80061c6 <vTaskSwitchContext+0x5e>
	__asm volatile
 80061ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b2:	f383 8811 	msr	BASEPRI, r3
 80061b6:	f3bf 8f6f 	isb	sy
 80061ba:	f3bf 8f4f 	dsb	sy
 80061be:	607b      	str	r3, [r7, #4]
}
 80061c0:	bf00      	nop
 80061c2:	bf00      	nop
 80061c4:	e7fd      	b.n	80061c2 <vTaskSwitchContext+0x5a>
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	4613      	mov	r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	4413      	add	r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	4a13      	ldr	r2, [pc, #76]	@ (8006220 <vTaskSwitchContext+0xb8>)
 80061d2:	4413      	add	r3, r2
 80061d4:	613b      	str	r3, [r7, #16]
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	685a      	ldr	r2, [r3, #4]
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	605a      	str	r2, [r3, #4]
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	685a      	ldr	r2, [r3, #4]
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	3308      	adds	r3, #8
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d104      	bne.n	80061f6 <vTaskSwitchContext+0x8e>
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	685a      	ldr	r2, [r3, #4]
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	605a      	str	r2, [r3, #4]
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	4a09      	ldr	r2, [pc, #36]	@ (8006224 <vTaskSwitchContext+0xbc>)
 80061fe:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006200:	4b08      	ldr	r3, [pc, #32]	@ (8006224 <vTaskSwitchContext+0xbc>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	334c      	adds	r3, #76	@ 0x4c
 8006206:	4a08      	ldr	r2, [pc, #32]	@ (8006228 <vTaskSwitchContext+0xc0>)
 8006208:	6013      	str	r3, [r2, #0]
}
 800620a:	bf00      	nop
 800620c:	371c      	adds	r7, #28
 800620e:	46bd      	mov	sp, r7
 8006210:	bc80      	pop	{r7}
 8006212:	4770      	bx	lr
 8006214:	20000628 	.word	0x20000628
 8006218:	20000614 	.word	0x20000614
 800621c:	20000608 	.word	0x20000608
 8006220:	20000504 	.word	0x20000504
 8006224:	20000500 	.word	0x20000500
 8006228:	20000014 	.word	0x20000014

0800622c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006234:	f000 f852 	bl	80062dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006238:	4b06      	ldr	r3, [pc, #24]	@ (8006254 <prvIdleTask+0x28>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2b01      	cmp	r3, #1
 800623e:	d9f9      	bls.n	8006234 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006240:	4b05      	ldr	r3, [pc, #20]	@ (8006258 <prvIdleTask+0x2c>)
 8006242:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006246:	601a      	str	r2, [r3, #0]
 8006248:	f3bf 8f4f 	dsb	sy
 800624c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006250:	e7f0      	b.n	8006234 <prvIdleTask+0x8>
 8006252:	bf00      	nop
 8006254:	20000504 	.word	0x20000504
 8006258:	e000ed04 	.word	0xe000ed04

0800625c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006262:	2300      	movs	r3, #0
 8006264:	607b      	str	r3, [r7, #4]
 8006266:	e00c      	b.n	8006282 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	4613      	mov	r3, r2
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	4413      	add	r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	4a12      	ldr	r2, [pc, #72]	@ (80062bc <prvInitialiseTaskLists+0x60>)
 8006274:	4413      	add	r3, r2
 8006276:	4618      	mov	r0, r3
 8006278:	f7ff fb11 	bl	800589e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	3301      	adds	r3, #1
 8006280:	607b      	str	r3, [r7, #4]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2b06      	cmp	r3, #6
 8006286:	d9ef      	bls.n	8006268 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006288:	480d      	ldr	r0, [pc, #52]	@ (80062c0 <prvInitialiseTaskLists+0x64>)
 800628a:	f7ff fb08 	bl	800589e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800628e:	480d      	ldr	r0, [pc, #52]	@ (80062c4 <prvInitialiseTaskLists+0x68>)
 8006290:	f7ff fb05 	bl	800589e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006294:	480c      	ldr	r0, [pc, #48]	@ (80062c8 <prvInitialiseTaskLists+0x6c>)
 8006296:	f7ff fb02 	bl	800589e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800629a:	480c      	ldr	r0, [pc, #48]	@ (80062cc <prvInitialiseTaskLists+0x70>)
 800629c:	f7ff faff 	bl	800589e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80062a0:	480b      	ldr	r0, [pc, #44]	@ (80062d0 <prvInitialiseTaskLists+0x74>)
 80062a2:	f7ff fafc 	bl	800589e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80062a6:	4b0b      	ldr	r3, [pc, #44]	@ (80062d4 <prvInitialiseTaskLists+0x78>)
 80062a8:	4a05      	ldr	r2, [pc, #20]	@ (80062c0 <prvInitialiseTaskLists+0x64>)
 80062aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80062ac:	4b0a      	ldr	r3, [pc, #40]	@ (80062d8 <prvInitialiseTaskLists+0x7c>)
 80062ae:	4a05      	ldr	r2, [pc, #20]	@ (80062c4 <prvInitialiseTaskLists+0x68>)
 80062b0:	601a      	str	r2, [r3, #0]
}
 80062b2:	bf00      	nop
 80062b4:	3708      	adds	r7, #8
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	20000504 	.word	0x20000504
 80062c0:	20000590 	.word	0x20000590
 80062c4:	200005a4 	.word	0x200005a4
 80062c8:	200005c0 	.word	0x200005c0
 80062cc:	200005d4 	.word	0x200005d4
 80062d0:	200005ec 	.word	0x200005ec
 80062d4:	200005b8 	.word	0x200005b8
 80062d8:	200005bc 	.word	0x200005bc

080062dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062e2:	e019      	b.n	8006318 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80062e4:	f000 f9d2 	bl	800668c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062e8:	4b10      	ldr	r3, [pc, #64]	@ (800632c <prvCheckTasksWaitingTermination+0x50>)
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	3304      	adds	r3, #4
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7ff fb58 	bl	80059aa <uxListRemove>
				--uxCurrentNumberOfTasks;
 80062fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006330 <prvCheckTasksWaitingTermination+0x54>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	3b01      	subs	r3, #1
 8006300:	4a0b      	ldr	r2, [pc, #44]	@ (8006330 <prvCheckTasksWaitingTermination+0x54>)
 8006302:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006304:	4b0b      	ldr	r3, [pc, #44]	@ (8006334 <prvCheckTasksWaitingTermination+0x58>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	3b01      	subs	r3, #1
 800630a:	4a0a      	ldr	r2, [pc, #40]	@ (8006334 <prvCheckTasksWaitingTermination+0x58>)
 800630c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800630e:	f000 f9ed 	bl	80066ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 f810 	bl	8006338 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006318:	4b06      	ldr	r3, [pc, #24]	@ (8006334 <prvCheckTasksWaitingTermination+0x58>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1e1      	bne.n	80062e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006320:	bf00      	nop
 8006322:	bf00      	nop
 8006324:	3708      	adds	r7, #8
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	200005d4 	.word	0x200005d4
 8006330:	20000600 	.word	0x20000600
 8006334:	200005e8 	.word	0x200005e8

08006338 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	334c      	adds	r3, #76	@ 0x4c
 8006344:	4618      	mov	r0, r3
 8006346:	f000 fc57 	bl	8006bf8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006350:	2b00      	cmp	r3, #0
 8006352:	d108      	bne.n	8006366 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006358:	4618      	mov	r0, r3
 800635a:	f000 fb27 	bl	80069ac <vPortFree>
				vPortFree( pxTCB );
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 fb24 	bl	80069ac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006364:	e019      	b.n	800639a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800636c:	2b01      	cmp	r3, #1
 800636e:	d103      	bne.n	8006378 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 fb1b 	bl	80069ac <vPortFree>
	}
 8006376:	e010      	b.n	800639a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800637e:	2b02      	cmp	r3, #2
 8006380:	d00b      	beq.n	800639a <prvDeleteTCB+0x62>
	__asm volatile
 8006382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006386:	f383 8811 	msr	BASEPRI, r3
 800638a:	f3bf 8f6f 	isb	sy
 800638e:	f3bf 8f4f 	dsb	sy
 8006392:	60fb      	str	r3, [r7, #12]
}
 8006394:	bf00      	nop
 8006396:	bf00      	nop
 8006398:	e7fd      	b.n	8006396 <prvDeleteTCB+0x5e>
	}
 800639a:	bf00      	nop
 800639c:	3710      	adds	r7, #16
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
	...

080063a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063aa:	4b0c      	ldr	r3, [pc, #48]	@ (80063dc <prvResetNextTaskUnblockTime+0x38>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d104      	bne.n	80063be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80063b4:	4b0a      	ldr	r3, [pc, #40]	@ (80063e0 <prvResetNextTaskUnblockTime+0x3c>)
 80063b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80063ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80063bc:	e008      	b.n	80063d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063be:	4b07      	ldr	r3, [pc, #28]	@ (80063dc <prvResetNextTaskUnblockTime+0x38>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	4a04      	ldr	r2, [pc, #16]	@ (80063e0 <prvResetNextTaskUnblockTime+0x3c>)
 80063ce:	6013      	str	r3, [r2, #0]
}
 80063d0:	bf00      	nop
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bc80      	pop	{r7}
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop
 80063dc:	200005b8 	.word	0x200005b8
 80063e0:	20000620 	.word	0x20000620

080063e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80063ee:	4b29      	ldr	r3, [pc, #164]	@ (8006494 <prvAddCurrentTaskToDelayedList+0xb0>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063f4:	4b28      	ldr	r3, [pc, #160]	@ (8006498 <prvAddCurrentTaskToDelayedList+0xb4>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	3304      	adds	r3, #4
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7ff fad5 	bl	80059aa <uxListRemove>
 8006400:	4603      	mov	r3, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d10b      	bne.n	800641e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006406:	4b24      	ldr	r3, [pc, #144]	@ (8006498 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800640c:	2201      	movs	r2, #1
 800640e:	fa02 f303 	lsl.w	r3, r2, r3
 8006412:	43da      	mvns	r2, r3
 8006414:	4b21      	ldr	r3, [pc, #132]	@ (800649c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4013      	ands	r3, r2
 800641a:	4a20      	ldr	r2, [pc, #128]	@ (800649c <prvAddCurrentTaskToDelayedList+0xb8>)
 800641c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006424:	d10a      	bne.n	800643c <prvAddCurrentTaskToDelayedList+0x58>
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d007      	beq.n	800643c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800642c:	4b1a      	ldr	r3, [pc, #104]	@ (8006498 <prvAddCurrentTaskToDelayedList+0xb4>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	3304      	adds	r3, #4
 8006432:	4619      	mov	r1, r3
 8006434:	481a      	ldr	r0, [pc, #104]	@ (80064a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006436:	f7ff fa5d 	bl	80058f4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800643a:	e026      	b.n	800648a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4413      	add	r3, r2
 8006442:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006444:	4b14      	ldr	r3, [pc, #80]	@ (8006498 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800644c:	68ba      	ldr	r2, [r7, #8]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	429a      	cmp	r2, r3
 8006452:	d209      	bcs.n	8006468 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006454:	4b13      	ldr	r3, [pc, #76]	@ (80064a4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	4b0f      	ldr	r3, [pc, #60]	@ (8006498 <prvAddCurrentTaskToDelayedList+0xb4>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	3304      	adds	r3, #4
 800645e:	4619      	mov	r1, r3
 8006460:	4610      	mov	r0, r2
 8006462:	f7ff fa6a 	bl	800593a <vListInsert>
}
 8006466:	e010      	b.n	800648a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006468:	4b0f      	ldr	r3, [pc, #60]	@ (80064a8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	4b0a      	ldr	r3, [pc, #40]	@ (8006498 <prvAddCurrentTaskToDelayedList+0xb4>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	3304      	adds	r3, #4
 8006472:	4619      	mov	r1, r3
 8006474:	4610      	mov	r0, r2
 8006476:	f7ff fa60 	bl	800593a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800647a:	4b0c      	ldr	r3, [pc, #48]	@ (80064ac <prvAddCurrentTaskToDelayedList+0xc8>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	429a      	cmp	r2, r3
 8006482:	d202      	bcs.n	800648a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006484:	4a09      	ldr	r2, [pc, #36]	@ (80064ac <prvAddCurrentTaskToDelayedList+0xc8>)
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	6013      	str	r3, [r2, #0]
}
 800648a:	bf00      	nop
 800648c:	3710      	adds	r7, #16
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	20000604 	.word	0x20000604
 8006498:	20000500 	.word	0x20000500
 800649c:	20000608 	.word	0x20000608
 80064a0:	200005ec 	.word	0x200005ec
 80064a4:	200005bc 	.word	0x200005bc
 80064a8:	200005b8 	.word	0x200005b8
 80064ac:	20000620 	.word	0x20000620

080064b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80064b0:	b480      	push	{r7}
 80064b2:	b085      	sub	sp, #20
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	3b04      	subs	r3, #4
 80064c0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80064c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	3b04      	subs	r3, #4
 80064ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	f023 0201 	bic.w	r2, r3, #1
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	3b04      	subs	r3, #4
 80064de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80064e0:	4a08      	ldr	r2, [pc, #32]	@ (8006504 <pxPortInitialiseStack+0x54>)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	3b14      	subs	r3, #20
 80064ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	3b20      	subs	r3, #32
 80064f6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80064f8:	68fb      	ldr	r3, [r7, #12]
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3714      	adds	r7, #20
 80064fe:	46bd      	mov	sp, r7
 8006500:	bc80      	pop	{r7}
 8006502:	4770      	bx	lr
 8006504:	08006509 	.word	0x08006509

08006508 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006508:	b480      	push	{r7}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800650e:	2300      	movs	r3, #0
 8006510:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006512:	4b12      	ldr	r3, [pc, #72]	@ (800655c <prvTaskExitError+0x54>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800651a:	d00b      	beq.n	8006534 <prvTaskExitError+0x2c>
	__asm volatile
 800651c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006520:	f383 8811 	msr	BASEPRI, r3
 8006524:	f3bf 8f6f 	isb	sy
 8006528:	f3bf 8f4f 	dsb	sy
 800652c:	60fb      	str	r3, [r7, #12]
}
 800652e:	bf00      	nop
 8006530:	bf00      	nop
 8006532:	e7fd      	b.n	8006530 <prvTaskExitError+0x28>
	__asm volatile
 8006534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006538:	f383 8811 	msr	BASEPRI, r3
 800653c:	f3bf 8f6f 	isb	sy
 8006540:	f3bf 8f4f 	dsb	sy
 8006544:	60bb      	str	r3, [r7, #8]
}
 8006546:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006548:	bf00      	nop
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d0fc      	beq.n	800654a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006550:	bf00      	nop
 8006552:	bf00      	nop
 8006554:	3714      	adds	r7, #20
 8006556:	46bd      	mov	sp, r7
 8006558:	bc80      	pop	{r7}
 800655a:	4770      	bx	lr
 800655c:	20000010 	.word	0x20000010

08006560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006560:	4b07      	ldr	r3, [pc, #28]	@ (8006580 <pxCurrentTCBConst2>)
 8006562:	6819      	ldr	r1, [r3, #0]
 8006564:	6808      	ldr	r0, [r1, #0]
 8006566:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800656a:	f380 8809 	msr	PSP, r0
 800656e:	f3bf 8f6f 	isb	sy
 8006572:	f04f 0000 	mov.w	r0, #0
 8006576:	f380 8811 	msr	BASEPRI, r0
 800657a:	f04e 0e0d 	orr.w	lr, lr, #13
 800657e:	4770      	bx	lr

08006580 <pxCurrentTCBConst2>:
 8006580:	20000500 	.word	0x20000500
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006584:	bf00      	nop
 8006586:	bf00      	nop

08006588 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006588:	4806      	ldr	r0, [pc, #24]	@ (80065a4 <prvPortStartFirstTask+0x1c>)
 800658a:	6800      	ldr	r0, [r0, #0]
 800658c:	6800      	ldr	r0, [r0, #0]
 800658e:	f380 8808 	msr	MSP, r0
 8006592:	b662      	cpsie	i
 8006594:	b661      	cpsie	f
 8006596:	f3bf 8f4f 	dsb	sy
 800659a:	f3bf 8f6f 	isb	sy
 800659e:	df00      	svc	0
 80065a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80065a2:	bf00      	nop
 80065a4:	e000ed08 	.word	0xe000ed08

080065a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80065ae:	4b32      	ldr	r3, [pc, #200]	@ (8006678 <xPortStartScheduler+0xd0>)
 80065b0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	22ff      	movs	r2, #255	@ 0xff
 80065be:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80065c8:	78fb      	ldrb	r3, [r7, #3]
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80065d0:	b2da      	uxtb	r2, r3
 80065d2:	4b2a      	ldr	r3, [pc, #168]	@ (800667c <xPortStartScheduler+0xd4>)
 80065d4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80065d6:	4b2a      	ldr	r3, [pc, #168]	@ (8006680 <xPortStartScheduler+0xd8>)
 80065d8:	2207      	movs	r2, #7
 80065da:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065dc:	e009      	b.n	80065f2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80065de:	4b28      	ldr	r3, [pc, #160]	@ (8006680 <xPortStartScheduler+0xd8>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	3b01      	subs	r3, #1
 80065e4:	4a26      	ldr	r2, [pc, #152]	@ (8006680 <xPortStartScheduler+0xd8>)
 80065e6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80065e8:	78fb      	ldrb	r3, [r7, #3]
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	005b      	lsls	r3, r3, #1
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065f2:	78fb      	ldrb	r3, [r7, #3]
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065fa:	2b80      	cmp	r3, #128	@ 0x80
 80065fc:	d0ef      	beq.n	80065de <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80065fe:	4b20      	ldr	r3, [pc, #128]	@ (8006680 <xPortStartScheduler+0xd8>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f1c3 0307 	rsb	r3, r3, #7
 8006606:	2b04      	cmp	r3, #4
 8006608:	d00b      	beq.n	8006622 <xPortStartScheduler+0x7a>
	__asm volatile
 800660a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800660e:	f383 8811 	msr	BASEPRI, r3
 8006612:	f3bf 8f6f 	isb	sy
 8006616:	f3bf 8f4f 	dsb	sy
 800661a:	60bb      	str	r3, [r7, #8]
}
 800661c:	bf00      	nop
 800661e:	bf00      	nop
 8006620:	e7fd      	b.n	800661e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006622:	4b17      	ldr	r3, [pc, #92]	@ (8006680 <xPortStartScheduler+0xd8>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	021b      	lsls	r3, r3, #8
 8006628:	4a15      	ldr	r2, [pc, #84]	@ (8006680 <xPortStartScheduler+0xd8>)
 800662a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800662c:	4b14      	ldr	r3, [pc, #80]	@ (8006680 <xPortStartScheduler+0xd8>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006634:	4a12      	ldr	r2, [pc, #72]	@ (8006680 <xPortStartScheduler+0xd8>)
 8006636:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	b2da      	uxtb	r2, r3
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006640:	4b10      	ldr	r3, [pc, #64]	@ (8006684 <xPortStartScheduler+0xdc>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a0f      	ldr	r2, [pc, #60]	@ (8006684 <xPortStartScheduler+0xdc>)
 8006646:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800664a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800664c:	4b0d      	ldr	r3, [pc, #52]	@ (8006684 <xPortStartScheduler+0xdc>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a0c      	ldr	r2, [pc, #48]	@ (8006684 <xPortStartScheduler+0xdc>)
 8006652:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006656:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006658:	f000 f8b8 	bl	80067cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800665c:	4b0a      	ldr	r3, [pc, #40]	@ (8006688 <xPortStartScheduler+0xe0>)
 800665e:	2200      	movs	r2, #0
 8006660:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006662:	f7ff ff91 	bl	8006588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006666:	f7ff fd7f 	bl	8006168 <vTaskSwitchContext>
	prvTaskExitError();
 800666a:	f7ff ff4d 	bl	8006508 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3710      	adds	r7, #16
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}
 8006678:	e000e400 	.word	0xe000e400
 800667c:	2000062c 	.word	0x2000062c
 8006680:	20000630 	.word	0x20000630
 8006684:	e000ed20 	.word	0xe000ed20
 8006688:	20000010 	.word	0x20000010

0800668c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
	__asm volatile
 8006692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006696:	f383 8811 	msr	BASEPRI, r3
 800669a:	f3bf 8f6f 	isb	sy
 800669e:	f3bf 8f4f 	dsb	sy
 80066a2:	607b      	str	r3, [r7, #4]
}
 80066a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80066a6:	4b0f      	ldr	r3, [pc, #60]	@ (80066e4 <vPortEnterCritical+0x58>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	3301      	adds	r3, #1
 80066ac:	4a0d      	ldr	r2, [pc, #52]	@ (80066e4 <vPortEnterCritical+0x58>)
 80066ae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80066b0:	4b0c      	ldr	r3, [pc, #48]	@ (80066e4 <vPortEnterCritical+0x58>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d110      	bne.n	80066da <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80066b8:	4b0b      	ldr	r3, [pc, #44]	@ (80066e8 <vPortEnterCritical+0x5c>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00b      	beq.n	80066da <vPortEnterCritical+0x4e>
	__asm volatile
 80066c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066c6:	f383 8811 	msr	BASEPRI, r3
 80066ca:	f3bf 8f6f 	isb	sy
 80066ce:	f3bf 8f4f 	dsb	sy
 80066d2:	603b      	str	r3, [r7, #0]
}
 80066d4:	bf00      	nop
 80066d6:	bf00      	nop
 80066d8:	e7fd      	b.n	80066d6 <vPortEnterCritical+0x4a>
	}
}
 80066da:	bf00      	nop
 80066dc:	370c      	adds	r7, #12
 80066de:	46bd      	mov	sp, r7
 80066e0:	bc80      	pop	{r7}
 80066e2:	4770      	bx	lr
 80066e4:	20000010 	.word	0x20000010
 80066e8:	e000ed04 	.word	0xe000ed04

080066ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80066f2:	4b12      	ldr	r3, [pc, #72]	@ (800673c <vPortExitCritical+0x50>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d10b      	bne.n	8006712 <vPortExitCritical+0x26>
	__asm volatile
 80066fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066fe:	f383 8811 	msr	BASEPRI, r3
 8006702:	f3bf 8f6f 	isb	sy
 8006706:	f3bf 8f4f 	dsb	sy
 800670a:	607b      	str	r3, [r7, #4]
}
 800670c:	bf00      	nop
 800670e:	bf00      	nop
 8006710:	e7fd      	b.n	800670e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006712:	4b0a      	ldr	r3, [pc, #40]	@ (800673c <vPortExitCritical+0x50>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	3b01      	subs	r3, #1
 8006718:	4a08      	ldr	r2, [pc, #32]	@ (800673c <vPortExitCritical+0x50>)
 800671a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800671c:	4b07      	ldr	r3, [pc, #28]	@ (800673c <vPortExitCritical+0x50>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d105      	bne.n	8006730 <vPortExitCritical+0x44>
 8006724:	2300      	movs	r3, #0
 8006726:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800672e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	bc80      	pop	{r7}
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	20000010 	.word	0x20000010

08006740 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006740:	f3ef 8009 	mrs	r0, PSP
 8006744:	f3bf 8f6f 	isb	sy
 8006748:	4b0d      	ldr	r3, [pc, #52]	@ (8006780 <pxCurrentTCBConst>)
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006750:	6010      	str	r0, [r2, #0]
 8006752:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006756:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800675a:	f380 8811 	msr	BASEPRI, r0
 800675e:	f7ff fd03 	bl	8006168 <vTaskSwitchContext>
 8006762:	f04f 0000 	mov.w	r0, #0
 8006766:	f380 8811 	msr	BASEPRI, r0
 800676a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800676e:	6819      	ldr	r1, [r3, #0]
 8006770:	6808      	ldr	r0, [r1, #0]
 8006772:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006776:	f380 8809 	msr	PSP, r0
 800677a:	f3bf 8f6f 	isb	sy
 800677e:	4770      	bx	lr

08006780 <pxCurrentTCBConst>:
 8006780:	20000500 	.word	0x20000500
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006784:	bf00      	nop
 8006786:	bf00      	nop

08006788 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
	__asm volatile
 800678e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006792:	f383 8811 	msr	BASEPRI, r3
 8006796:	f3bf 8f6f 	isb	sy
 800679a:	f3bf 8f4f 	dsb	sy
 800679e:	607b      	str	r3, [r7, #4]
}
 80067a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80067a2:	f7ff fc27 	bl	8005ff4 <xTaskIncrementTick>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d003      	beq.n	80067b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80067ac:	4b06      	ldr	r3, [pc, #24]	@ (80067c8 <SysTick_Handler+0x40>)
 80067ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067b2:	601a      	str	r2, [r3, #0]
 80067b4:	2300      	movs	r3, #0
 80067b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	f383 8811 	msr	BASEPRI, r3
}
 80067be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80067c0:	bf00      	nop
 80067c2:	3708      	adds	r7, #8
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	e000ed04 	.word	0xe000ed04

080067cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80067cc:	b480      	push	{r7}
 80067ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80067d0:	4b0a      	ldr	r3, [pc, #40]	@ (80067fc <vPortSetupTimerInterrupt+0x30>)
 80067d2:	2200      	movs	r2, #0
 80067d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80067d6:	4b0a      	ldr	r3, [pc, #40]	@ (8006800 <vPortSetupTimerInterrupt+0x34>)
 80067d8:	2200      	movs	r2, #0
 80067da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80067dc:	4b09      	ldr	r3, [pc, #36]	@ (8006804 <vPortSetupTimerInterrupt+0x38>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a09      	ldr	r2, [pc, #36]	@ (8006808 <vPortSetupTimerInterrupt+0x3c>)
 80067e2:	fba2 2303 	umull	r2, r3, r2, r3
 80067e6:	099b      	lsrs	r3, r3, #6
 80067e8:	4a08      	ldr	r2, [pc, #32]	@ (800680c <vPortSetupTimerInterrupt+0x40>)
 80067ea:	3b01      	subs	r3, #1
 80067ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80067ee:	4b03      	ldr	r3, [pc, #12]	@ (80067fc <vPortSetupTimerInterrupt+0x30>)
 80067f0:	2207      	movs	r2, #7
 80067f2:	601a      	str	r2, [r3, #0]
}
 80067f4:	bf00      	nop
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bc80      	pop	{r7}
 80067fa:	4770      	bx	lr
 80067fc:	e000e010 	.word	0xe000e010
 8006800:	e000e018 	.word	0xe000e018
 8006804:	20000004 	.word	0x20000004
 8006808:	10624dd3 	.word	0x10624dd3
 800680c:	e000e014 	.word	0xe000e014

08006810 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b08a      	sub	sp, #40	@ 0x28
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006818:	2300      	movs	r3, #0
 800681a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800681c:	f7ff fb3e 	bl	8005e9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006820:	4b5c      	ldr	r3, [pc, #368]	@ (8006994 <pvPortMalloc+0x184>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d101      	bne.n	800682c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006828:	f000 f924 	bl	8006a74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800682c:	4b5a      	ldr	r3, [pc, #360]	@ (8006998 <pvPortMalloc+0x188>)
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4013      	ands	r3, r2
 8006834:	2b00      	cmp	r3, #0
 8006836:	f040 8095 	bne.w	8006964 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d01e      	beq.n	800687e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006840:	2208      	movs	r2, #8
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4413      	add	r3, r2
 8006846:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f003 0307 	and.w	r3, r3, #7
 800684e:	2b00      	cmp	r3, #0
 8006850:	d015      	beq.n	800687e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f023 0307 	bic.w	r3, r3, #7
 8006858:	3308      	adds	r3, #8
 800685a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f003 0307 	and.w	r3, r3, #7
 8006862:	2b00      	cmp	r3, #0
 8006864:	d00b      	beq.n	800687e <pvPortMalloc+0x6e>
	__asm volatile
 8006866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800686a:	f383 8811 	msr	BASEPRI, r3
 800686e:	f3bf 8f6f 	isb	sy
 8006872:	f3bf 8f4f 	dsb	sy
 8006876:	617b      	str	r3, [r7, #20]
}
 8006878:	bf00      	nop
 800687a:	bf00      	nop
 800687c:	e7fd      	b.n	800687a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d06f      	beq.n	8006964 <pvPortMalloc+0x154>
 8006884:	4b45      	ldr	r3, [pc, #276]	@ (800699c <pvPortMalloc+0x18c>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	429a      	cmp	r2, r3
 800688c:	d86a      	bhi.n	8006964 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800688e:	4b44      	ldr	r3, [pc, #272]	@ (80069a0 <pvPortMalloc+0x190>)
 8006890:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006892:	4b43      	ldr	r3, [pc, #268]	@ (80069a0 <pvPortMalloc+0x190>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006898:	e004      	b.n	80068a4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800689a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800689c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800689e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d903      	bls.n	80068b6 <pvPortMalloc+0xa6>
 80068ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1f1      	bne.n	800689a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80068b6:	4b37      	ldr	r3, [pc, #220]	@ (8006994 <pvPortMalloc+0x184>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068bc:	429a      	cmp	r2, r3
 80068be:	d051      	beq.n	8006964 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80068c0:	6a3b      	ldr	r3, [r7, #32]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2208      	movs	r2, #8
 80068c6:	4413      	add	r3, r2
 80068c8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80068ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	6a3b      	ldr	r3, [r7, #32]
 80068d0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80068d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d4:	685a      	ldr	r2, [r3, #4]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	1ad2      	subs	r2, r2, r3
 80068da:	2308      	movs	r3, #8
 80068dc:	005b      	lsls	r3, r3, #1
 80068de:	429a      	cmp	r2, r3
 80068e0:	d920      	bls.n	8006924 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80068e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4413      	add	r3, r2
 80068e8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	f003 0307 	and.w	r3, r3, #7
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00b      	beq.n	800690c <pvPortMalloc+0xfc>
	__asm volatile
 80068f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068f8:	f383 8811 	msr	BASEPRI, r3
 80068fc:	f3bf 8f6f 	isb	sy
 8006900:	f3bf 8f4f 	dsb	sy
 8006904:	613b      	str	r3, [r7, #16]
}
 8006906:	bf00      	nop
 8006908:	bf00      	nop
 800690a:	e7fd      	b.n	8006908 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800690c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800690e:	685a      	ldr	r2, [r3, #4]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	1ad2      	subs	r2, r2, r3
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800691e:	69b8      	ldr	r0, [r7, #24]
 8006920:	f000 f90a 	bl	8006b38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006924:	4b1d      	ldr	r3, [pc, #116]	@ (800699c <pvPortMalloc+0x18c>)
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	4a1b      	ldr	r2, [pc, #108]	@ (800699c <pvPortMalloc+0x18c>)
 8006930:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006932:	4b1a      	ldr	r3, [pc, #104]	@ (800699c <pvPortMalloc+0x18c>)
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	4b1b      	ldr	r3, [pc, #108]	@ (80069a4 <pvPortMalloc+0x194>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	429a      	cmp	r2, r3
 800693c:	d203      	bcs.n	8006946 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800693e:	4b17      	ldr	r3, [pc, #92]	@ (800699c <pvPortMalloc+0x18c>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a18      	ldr	r2, [pc, #96]	@ (80069a4 <pvPortMalloc+0x194>)
 8006944:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006948:	685a      	ldr	r2, [r3, #4]
 800694a:	4b13      	ldr	r3, [pc, #76]	@ (8006998 <pvPortMalloc+0x188>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	431a      	orrs	r2, r3
 8006950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006952:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006956:	2200      	movs	r2, #0
 8006958:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800695a:	4b13      	ldr	r3, [pc, #76]	@ (80069a8 <pvPortMalloc+0x198>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	3301      	adds	r3, #1
 8006960:	4a11      	ldr	r2, [pc, #68]	@ (80069a8 <pvPortMalloc+0x198>)
 8006962:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006964:	f7ff faa8 	bl	8005eb8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	f003 0307 	and.w	r3, r3, #7
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00b      	beq.n	800698a <pvPortMalloc+0x17a>
	__asm volatile
 8006972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006976:	f383 8811 	msr	BASEPRI, r3
 800697a:	f3bf 8f6f 	isb	sy
 800697e:	f3bf 8f4f 	dsb	sy
 8006982:	60fb      	str	r3, [r7, #12]
}
 8006984:	bf00      	nop
 8006986:	bf00      	nop
 8006988:	e7fd      	b.n	8006986 <pvPortMalloc+0x176>
	return pvReturn;
 800698a:	69fb      	ldr	r3, [r7, #28]
}
 800698c:	4618      	mov	r0, r3
 800698e:	3728      	adds	r7, #40	@ 0x28
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}
 8006994:	2000123c 	.word	0x2000123c
 8006998:	20001250 	.word	0x20001250
 800699c:	20001240 	.word	0x20001240
 80069a0:	20001234 	.word	0x20001234
 80069a4:	20001244 	.word	0x20001244
 80069a8:	20001248 	.word	0x20001248

080069ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b086      	sub	sp, #24
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d04f      	beq.n	8006a5e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80069be:	2308      	movs	r3, #8
 80069c0:	425b      	negs	r3, r3
 80069c2:	697a      	ldr	r2, [r7, #20]
 80069c4:	4413      	add	r3, r2
 80069c6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	685a      	ldr	r2, [r3, #4]
 80069d0:	4b25      	ldr	r3, [pc, #148]	@ (8006a68 <vPortFree+0xbc>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4013      	ands	r3, r2
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d10b      	bne.n	80069f2 <vPortFree+0x46>
	__asm volatile
 80069da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069de:	f383 8811 	msr	BASEPRI, r3
 80069e2:	f3bf 8f6f 	isb	sy
 80069e6:	f3bf 8f4f 	dsb	sy
 80069ea:	60fb      	str	r3, [r7, #12]
}
 80069ec:	bf00      	nop
 80069ee:	bf00      	nop
 80069f0:	e7fd      	b.n	80069ee <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00b      	beq.n	8006a12 <vPortFree+0x66>
	__asm volatile
 80069fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069fe:	f383 8811 	msr	BASEPRI, r3
 8006a02:	f3bf 8f6f 	isb	sy
 8006a06:	f3bf 8f4f 	dsb	sy
 8006a0a:	60bb      	str	r3, [r7, #8]
}
 8006a0c:	bf00      	nop
 8006a0e:	bf00      	nop
 8006a10:	e7fd      	b.n	8006a0e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	685a      	ldr	r2, [r3, #4]
 8006a16:	4b14      	ldr	r3, [pc, #80]	@ (8006a68 <vPortFree+0xbc>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d01e      	beq.n	8006a5e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d11a      	bne.n	8006a5e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	685a      	ldr	r2, [r3, #4]
 8006a2c:	4b0e      	ldr	r3, [pc, #56]	@ (8006a68 <vPortFree+0xbc>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	43db      	mvns	r3, r3
 8006a32:	401a      	ands	r2, r3
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006a38:	f7ff fa30 	bl	8005e9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	685a      	ldr	r2, [r3, #4]
 8006a40:	4b0a      	ldr	r3, [pc, #40]	@ (8006a6c <vPortFree+0xc0>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4413      	add	r3, r2
 8006a46:	4a09      	ldr	r2, [pc, #36]	@ (8006a6c <vPortFree+0xc0>)
 8006a48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a4a:	6938      	ldr	r0, [r7, #16]
 8006a4c:	f000 f874 	bl	8006b38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006a50:	4b07      	ldr	r3, [pc, #28]	@ (8006a70 <vPortFree+0xc4>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	3301      	adds	r3, #1
 8006a56:	4a06      	ldr	r2, [pc, #24]	@ (8006a70 <vPortFree+0xc4>)
 8006a58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006a5a:	f7ff fa2d 	bl	8005eb8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a5e:	bf00      	nop
 8006a60:	3718      	adds	r7, #24
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	20001250 	.word	0x20001250
 8006a6c:	20001240 	.word	0x20001240
 8006a70:	2000124c 	.word	0x2000124c

08006a74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a74:	b480      	push	{r7}
 8006a76:	b085      	sub	sp, #20
 8006a78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a7a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006a7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a80:	4b27      	ldr	r3, [pc, #156]	@ (8006b20 <prvHeapInit+0xac>)
 8006a82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f003 0307 	and.w	r3, r3, #7
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00c      	beq.n	8006aa8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	3307      	adds	r3, #7
 8006a92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f023 0307 	bic.w	r3, r3, #7
 8006a9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	4a1f      	ldr	r2, [pc, #124]	@ (8006b20 <prvHeapInit+0xac>)
 8006aa4:	4413      	add	r3, r2
 8006aa6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006aac:	4a1d      	ldr	r2, [pc, #116]	@ (8006b24 <prvHeapInit+0xb0>)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ab2:	4b1c      	ldr	r3, [pc, #112]	@ (8006b24 <prvHeapInit+0xb0>)
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	68ba      	ldr	r2, [r7, #8]
 8006abc:	4413      	add	r3, r2
 8006abe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ac0:	2208      	movs	r2, #8
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	1a9b      	subs	r3, r3, r2
 8006ac6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f023 0307 	bic.w	r3, r3, #7
 8006ace:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	4a15      	ldr	r2, [pc, #84]	@ (8006b28 <prvHeapInit+0xb4>)
 8006ad4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ad6:	4b14      	ldr	r3, [pc, #80]	@ (8006b28 <prvHeapInit+0xb4>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2200      	movs	r2, #0
 8006adc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006ade:	4b12      	ldr	r3, [pc, #72]	@ (8006b28 <prvHeapInit+0xb4>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	1ad2      	subs	r2, r2, r3
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006af4:	4b0c      	ldr	r3, [pc, #48]	@ (8006b28 <prvHeapInit+0xb4>)
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	4a0a      	ldr	r2, [pc, #40]	@ (8006b2c <prvHeapInit+0xb8>)
 8006b02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	4a09      	ldr	r2, [pc, #36]	@ (8006b30 <prvHeapInit+0xbc>)
 8006b0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006b0c:	4b09      	ldr	r3, [pc, #36]	@ (8006b34 <prvHeapInit+0xc0>)
 8006b0e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006b12:	601a      	str	r2, [r3, #0]
}
 8006b14:	bf00      	nop
 8006b16:	3714      	adds	r7, #20
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bc80      	pop	{r7}
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	20000634 	.word	0x20000634
 8006b24:	20001234 	.word	0x20001234
 8006b28:	2000123c 	.word	0x2000123c
 8006b2c:	20001244 	.word	0x20001244
 8006b30:	20001240 	.word	0x20001240
 8006b34:	20001250 	.word	0x20001250

08006b38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b40:	4b27      	ldr	r3, [pc, #156]	@ (8006be0 <prvInsertBlockIntoFreeList+0xa8>)
 8006b42:	60fb      	str	r3, [r7, #12]
 8006b44:	e002      	b.n	8006b4c <prvInsertBlockIntoFreeList+0x14>
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	60fb      	str	r3, [r7, #12]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d8f7      	bhi.n	8006b46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	68ba      	ldr	r2, [r7, #8]
 8006b60:	4413      	add	r3, r2
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d108      	bne.n	8006b7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	685a      	ldr	r2, [r3, #4]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	441a      	add	r2, r3
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	68ba      	ldr	r2, [r7, #8]
 8006b84:	441a      	add	r2, r3
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d118      	bne.n	8006bc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	4b14      	ldr	r3, [pc, #80]	@ (8006be4 <prvInsertBlockIntoFreeList+0xac>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d00d      	beq.n	8006bb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	685a      	ldr	r2, [r3, #4]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	441a      	add	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	601a      	str	r2, [r3, #0]
 8006bb4:	e008      	b.n	8006bc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8006be4 <prvInsertBlockIntoFreeList+0xac>)
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	601a      	str	r2, [r3, #0]
 8006bbe:	e003      	b.n	8006bc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d002      	beq.n	8006bd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bd6:	bf00      	nop
 8006bd8:	3714      	adds	r7, #20
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bc80      	pop	{r7}
 8006bde:	4770      	bx	lr
 8006be0:	20001234 	.word	0x20001234
 8006be4:	2000123c 	.word	0x2000123c

08006be8 <memset>:
 8006be8:	4603      	mov	r3, r0
 8006bea:	4402      	add	r2, r0
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d100      	bne.n	8006bf2 <memset+0xa>
 8006bf0:	4770      	bx	lr
 8006bf2:	f803 1b01 	strb.w	r1, [r3], #1
 8006bf6:	e7f9      	b.n	8006bec <memset+0x4>

08006bf8 <_reclaim_reent>:
 8006bf8:	4b29      	ldr	r3, [pc, #164]	@ (8006ca0 <_reclaim_reent+0xa8>)
 8006bfa:	b570      	push	{r4, r5, r6, lr}
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4604      	mov	r4, r0
 8006c00:	4283      	cmp	r3, r0
 8006c02:	d04b      	beq.n	8006c9c <_reclaim_reent+0xa4>
 8006c04:	69c3      	ldr	r3, [r0, #28]
 8006c06:	b1ab      	cbz	r3, 8006c34 <_reclaim_reent+0x3c>
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	b16b      	cbz	r3, 8006c28 <_reclaim_reent+0x30>
 8006c0c:	2500      	movs	r5, #0
 8006c0e:	69e3      	ldr	r3, [r4, #28]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	5959      	ldr	r1, [r3, r5]
 8006c14:	2900      	cmp	r1, #0
 8006c16:	d13b      	bne.n	8006c90 <_reclaim_reent+0x98>
 8006c18:	3504      	adds	r5, #4
 8006c1a:	2d80      	cmp	r5, #128	@ 0x80
 8006c1c:	d1f7      	bne.n	8006c0e <_reclaim_reent+0x16>
 8006c1e:	69e3      	ldr	r3, [r4, #28]
 8006c20:	4620      	mov	r0, r4
 8006c22:	68d9      	ldr	r1, [r3, #12]
 8006c24:	f000 f86a 	bl	8006cfc <_free_r>
 8006c28:	69e3      	ldr	r3, [r4, #28]
 8006c2a:	6819      	ldr	r1, [r3, #0]
 8006c2c:	b111      	cbz	r1, 8006c34 <_reclaim_reent+0x3c>
 8006c2e:	4620      	mov	r0, r4
 8006c30:	f000 f864 	bl	8006cfc <_free_r>
 8006c34:	6961      	ldr	r1, [r4, #20]
 8006c36:	b111      	cbz	r1, 8006c3e <_reclaim_reent+0x46>
 8006c38:	4620      	mov	r0, r4
 8006c3a:	f000 f85f 	bl	8006cfc <_free_r>
 8006c3e:	69e1      	ldr	r1, [r4, #28]
 8006c40:	b111      	cbz	r1, 8006c48 <_reclaim_reent+0x50>
 8006c42:	4620      	mov	r0, r4
 8006c44:	f000 f85a 	bl	8006cfc <_free_r>
 8006c48:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006c4a:	b111      	cbz	r1, 8006c52 <_reclaim_reent+0x5a>
 8006c4c:	4620      	mov	r0, r4
 8006c4e:	f000 f855 	bl	8006cfc <_free_r>
 8006c52:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c54:	b111      	cbz	r1, 8006c5c <_reclaim_reent+0x64>
 8006c56:	4620      	mov	r0, r4
 8006c58:	f000 f850 	bl	8006cfc <_free_r>
 8006c5c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006c5e:	b111      	cbz	r1, 8006c66 <_reclaim_reent+0x6e>
 8006c60:	4620      	mov	r0, r4
 8006c62:	f000 f84b 	bl	8006cfc <_free_r>
 8006c66:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006c68:	b111      	cbz	r1, 8006c70 <_reclaim_reent+0x78>
 8006c6a:	4620      	mov	r0, r4
 8006c6c:	f000 f846 	bl	8006cfc <_free_r>
 8006c70:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006c72:	b111      	cbz	r1, 8006c7a <_reclaim_reent+0x82>
 8006c74:	4620      	mov	r0, r4
 8006c76:	f000 f841 	bl	8006cfc <_free_r>
 8006c7a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006c7c:	b111      	cbz	r1, 8006c84 <_reclaim_reent+0x8c>
 8006c7e:	4620      	mov	r0, r4
 8006c80:	f000 f83c 	bl	8006cfc <_free_r>
 8006c84:	6a23      	ldr	r3, [r4, #32]
 8006c86:	b14b      	cbz	r3, 8006c9c <_reclaim_reent+0xa4>
 8006c88:	4620      	mov	r0, r4
 8006c8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006c8e:	4718      	bx	r3
 8006c90:	680e      	ldr	r6, [r1, #0]
 8006c92:	4620      	mov	r0, r4
 8006c94:	f000 f832 	bl	8006cfc <_free_r>
 8006c98:	4631      	mov	r1, r6
 8006c9a:	e7bb      	b.n	8006c14 <_reclaim_reent+0x1c>
 8006c9c:	bd70      	pop	{r4, r5, r6, pc}
 8006c9e:	bf00      	nop
 8006ca0:	20000014 	.word	0x20000014

08006ca4 <__errno>:
 8006ca4:	4b01      	ldr	r3, [pc, #4]	@ (8006cac <__errno+0x8>)
 8006ca6:	6818      	ldr	r0, [r3, #0]
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	20000014 	.word	0x20000014

08006cb0 <__libc_init_array>:
 8006cb0:	b570      	push	{r4, r5, r6, lr}
 8006cb2:	2600      	movs	r6, #0
 8006cb4:	4d0c      	ldr	r5, [pc, #48]	@ (8006ce8 <__libc_init_array+0x38>)
 8006cb6:	4c0d      	ldr	r4, [pc, #52]	@ (8006cec <__libc_init_array+0x3c>)
 8006cb8:	1b64      	subs	r4, r4, r5
 8006cba:	10a4      	asrs	r4, r4, #2
 8006cbc:	42a6      	cmp	r6, r4
 8006cbe:	d109      	bne.n	8006cd4 <__libc_init_array+0x24>
 8006cc0:	f000 fa5c 	bl	800717c <_init>
 8006cc4:	2600      	movs	r6, #0
 8006cc6:	4d0a      	ldr	r5, [pc, #40]	@ (8006cf0 <__libc_init_array+0x40>)
 8006cc8:	4c0a      	ldr	r4, [pc, #40]	@ (8006cf4 <__libc_init_array+0x44>)
 8006cca:	1b64      	subs	r4, r4, r5
 8006ccc:	10a4      	asrs	r4, r4, #2
 8006cce:	42a6      	cmp	r6, r4
 8006cd0:	d105      	bne.n	8006cde <__libc_init_array+0x2e>
 8006cd2:	bd70      	pop	{r4, r5, r6, pc}
 8006cd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cd8:	4798      	blx	r3
 8006cda:	3601      	adds	r6, #1
 8006cdc:	e7ee      	b.n	8006cbc <__libc_init_array+0xc>
 8006cde:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ce2:	4798      	blx	r3
 8006ce4:	3601      	adds	r6, #1
 8006ce6:	e7f2      	b.n	8006cce <__libc_init_array+0x1e>
 8006ce8:	0800724c 	.word	0x0800724c
 8006cec:	0800724c 	.word	0x0800724c
 8006cf0:	0800724c 	.word	0x0800724c
 8006cf4:	08007250 	.word	0x08007250

08006cf8 <__retarget_lock_acquire_recursive>:
 8006cf8:	4770      	bx	lr

08006cfa <__retarget_lock_release_recursive>:
 8006cfa:	4770      	bx	lr

08006cfc <_free_r>:
 8006cfc:	b538      	push	{r3, r4, r5, lr}
 8006cfe:	4605      	mov	r5, r0
 8006d00:	2900      	cmp	r1, #0
 8006d02:	d040      	beq.n	8006d86 <_free_r+0x8a>
 8006d04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d08:	1f0c      	subs	r4, r1, #4
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	bfb8      	it	lt
 8006d0e:	18e4      	addlt	r4, r4, r3
 8006d10:	f000 f83c 	bl	8006d8c <__malloc_lock>
 8006d14:	4a1c      	ldr	r2, [pc, #112]	@ (8006d88 <_free_r+0x8c>)
 8006d16:	6813      	ldr	r3, [r2, #0]
 8006d18:	b933      	cbnz	r3, 8006d28 <_free_r+0x2c>
 8006d1a:	6063      	str	r3, [r4, #4]
 8006d1c:	6014      	str	r4, [r2, #0]
 8006d1e:	4628      	mov	r0, r5
 8006d20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d24:	f000 b838 	b.w	8006d98 <__malloc_unlock>
 8006d28:	42a3      	cmp	r3, r4
 8006d2a:	d908      	bls.n	8006d3e <_free_r+0x42>
 8006d2c:	6820      	ldr	r0, [r4, #0]
 8006d2e:	1821      	adds	r1, r4, r0
 8006d30:	428b      	cmp	r3, r1
 8006d32:	bf01      	itttt	eq
 8006d34:	6819      	ldreq	r1, [r3, #0]
 8006d36:	685b      	ldreq	r3, [r3, #4]
 8006d38:	1809      	addeq	r1, r1, r0
 8006d3a:	6021      	streq	r1, [r4, #0]
 8006d3c:	e7ed      	b.n	8006d1a <_free_r+0x1e>
 8006d3e:	461a      	mov	r2, r3
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	b10b      	cbz	r3, 8006d48 <_free_r+0x4c>
 8006d44:	42a3      	cmp	r3, r4
 8006d46:	d9fa      	bls.n	8006d3e <_free_r+0x42>
 8006d48:	6811      	ldr	r1, [r2, #0]
 8006d4a:	1850      	adds	r0, r2, r1
 8006d4c:	42a0      	cmp	r0, r4
 8006d4e:	d10b      	bne.n	8006d68 <_free_r+0x6c>
 8006d50:	6820      	ldr	r0, [r4, #0]
 8006d52:	4401      	add	r1, r0
 8006d54:	1850      	adds	r0, r2, r1
 8006d56:	4283      	cmp	r3, r0
 8006d58:	6011      	str	r1, [r2, #0]
 8006d5a:	d1e0      	bne.n	8006d1e <_free_r+0x22>
 8006d5c:	6818      	ldr	r0, [r3, #0]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	4408      	add	r0, r1
 8006d62:	6010      	str	r0, [r2, #0]
 8006d64:	6053      	str	r3, [r2, #4]
 8006d66:	e7da      	b.n	8006d1e <_free_r+0x22>
 8006d68:	d902      	bls.n	8006d70 <_free_r+0x74>
 8006d6a:	230c      	movs	r3, #12
 8006d6c:	602b      	str	r3, [r5, #0]
 8006d6e:	e7d6      	b.n	8006d1e <_free_r+0x22>
 8006d70:	6820      	ldr	r0, [r4, #0]
 8006d72:	1821      	adds	r1, r4, r0
 8006d74:	428b      	cmp	r3, r1
 8006d76:	bf01      	itttt	eq
 8006d78:	6819      	ldreq	r1, [r3, #0]
 8006d7a:	685b      	ldreq	r3, [r3, #4]
 8006d7c:	1809      	addeq	r1, r1, r0
 8006d7e:	6021      	streq	r1, [r4, #0]
 8006d80:	6063      	str	r3, [r4, #4]
 8006d82:	6054      	str	r4, [r2, #4]
 8006d84:	e7cb      	b.n	8006d1e <_free_r+0x22>
 8006d86:	bd38      	pop	{r3, r4, r5, pc}
 8006d88:	20001390 	.word	0x20001390

08006d8c <__malloc_lock>:
 8006d8c:	4801      	ldr	r0, [pc, #4]	@ (8006d94 <__malloc_lock+0x8>)
 8006d8e:	f7ff bfb3 	b.w	8006cf8 <__retarget_lock_acquire_recursive>
 8006d92:	bf00      	nop
 8006d94:	2000138c 	.word	0x2000138c

08006d98 <__malloc_unlock>:
 8006d98:	4801      	ldr	r0, [pc, #4]	@ (8006da0 <__malloc_unlock+0x8>)
 8006d9a:	f7ff bfae 	b.w	8006cfa <__retarget_lock_release_recursive>
 8006d9e:	bf00      	nop
 8006da0:	2000138c 	.word	0x2000138c

08006da4 <log>:
 8006da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006da6:	4604      	mov	r4, r0
 8006da8:	460d      	mov	r5, r1
 8006daa:	f000 f835 	bl	8006e18 <__ieee754_log>
 8006dae:	4622      	mov	r2, r4
 8006db0:	4606      	mov	r6, r0
 8006db2:	460f      	mov	r7, r1
 8006db4:	462b      	mov	r3, r5
 8006db6:	4620      	mov	r0, r4
 8006db8:	4629      	mov	r1, r5
 8006dba:	f7f9 fe1f 	bl	80009fc <__aeabi_dcmpun>
 8006dbe:	b998      	cbnz	r0, 8006de8 <log+0x44>
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	4629      	mov	r1, r5
 8006dc8:	f7f9 fe0e 	bl	80009e8 <__aeabi_dcmpgt>
 8006dcc:	b960      	cbnz	r0, 8006de8 <log+0x44>
 8006dce:	2200      	movs	r2, #0
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	4620      	mov	r0, r4
 8006dd4:	4629      	mov	r1, r5
 8006dd6:	f7f9 fddf 	bl	8000998 <__aeabi_dcmpeq>
 8006dda:	b140      	cbz	r0, 8006dee <log+0x4a>
 8006ddc:	f7ff ff62 	bl	8006ca4 <__errno>
 8006de0:	2322      	movs	r3, #34	@ 0x22
 8006de2:	2600      	movs	r6, #0
 8006de4:	4f06      	ldr	r7, [pc, #24]	@ (8006e00 <log+0x5c>)
 8006de6:	6003      	str	r3, [r0, #0]
 8006de8:	4630      	mov	r0, r6
 8006dea:	4639      	mov	r1, r7
 8006dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dee:	f7ff ff59 	bl	8006ca4 <__errno>
 8006df2:	2321      	movs	r3, #33	@ 0x21
 8006df4:	6003      	str	r3, [r0, #0]
 8006df6:	4803      	ldr	r0, [pc, #12]	@ (8006e04 <log+0x60>)
 8006df8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006dfc:	f000 b804 	b.w	8006e08 <nan>
 8006e00:	fff00000 	.word	0xfff00000
 8006e04:	0800724a 	.word	0x0800724a

08006e08 <nan>:
 8006e08:	2000      	movs	r0, #0
 8006e0a:	4901      	ldr	r1, [pc, #4]	@ (8006e10 <nan+0x8>)
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	7ff80000 	.word	0x7ff80000
 8006e14:	00000000 	.word	0x00000000

08006e18 <__ieee754_log>:
 8006e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e1c:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8006e20:	4602      	mov	r2, r0
 8006e22:	460b      	mov	r3, r1
 8006e24:	460d      	mov	r5, r1
 8006e26:	b087      	sub	sp, #28
 8006e28:	da24      	bge.n	8006e74 <__ieee754_log+0x5c>
 8006e2a:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8006e2e:	4304      	orrs	r4, r0
 8006e30:	d108      	bne.n	8006e44 <__ieee754_log+0x2c>
 8006e32:	2200      	movs	r2, #0
 8006e34:	2300      	movs	r3, #0
 8006e36:	2000      	movs	r0, #0
 8006e38:	49cb      	ldr	r1, [pc, #812]	@ (8007168 <__ieee754_log+0x350>)
 8006e3a:	f7f9 fc6f 	bl	800071c <__aeabi_ddiv>
 8006e3e:	b007      	add	sp, #28
 8006e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e44:	2900      	cmp	r1, #0
 8006e46:	da04      	bge.n	8006e52 <__ieee754_log+0x3a>
 8006e48:	f7f9 f986 	bl	8000158 <__aeabi_dsub>
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	2300      	movs	r3, #0
 8006e50:	e7f3      	b.n	8006e3a <__ieee754_log+0x22>
 8006e52:	2200      	movs	r2, #0
 8006e54:	4bc5      	ldr	r3, [pc, #788]	@ (800716c <__ieee754_log+0x354>)
 8006e56:	f7f9 fb37 	bl	80004c8 <__aeabi_dmul>
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	460d      	mov	r5, r1
 8006e5e:	4602      	mov	r2, r0
 8006e60:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 8006e64:	48c2      	ldr	r0, [pc, #776]	@ (8007170 <__ieee754_log+0x358>)
 8006e66:	4285      	cmp	r5, r0
 8006e68:	dd06      	ble.n	8006e78 <__ieee754_log+0x60>
 8006e6a:	4610      	mov	r0, r2
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	f7f9 f975 	bl	800015c <__adddf3>
 8006e72:	e7e4      	b.n	8006e3e <__ieee754_log+0x26>
 8006e74:	2100      	movs	r1, #0
 8006e76:	e7f5      	b.n	8006e64 <__ieee754_log+0x4c>
 8006e78:	152c      	asrs	r4, r5, #20
 8006e7a:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 8006e7e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8006e82:	440c      	add	r4, r1
 8006e84:	f505 2115 	add.w	r1, r5, #610304	@ 0x95000
 8006e88:	f601 7164 	addw	r1, r1, #3940	@ 0xf64
 8006e8c:	f401 1680 	and.w	r6, r1, #1048576	@ 0x100000
 8006e90:	f086 517f 	eor.w	r1, r6, #1069547520	@ 0x3fc00000
 8006e94:	f481 1140 	eor.w	r1, r1, #3145728	@ 0x300000
 8006e98:	ea41 0305 	orr.w	r3, r1, r5
 8006e9c:	4610      	mov	r0, r2
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	4bb4      	ldr	r3, [pc, #720]	@ (8007174 <__ieee754_log+0x35c>)
 8006ea4:	f7f9 f958 	bl	8000158 <__aeabi_dsub>
 8006ea8:	1cab      	adds	r3, r5, #2
 8006eaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	4682      	mov	sl, r0
 8006eb2:	468b      	mov	fp, r1
 8006eb4:	f04f 0200 	mov.w	r2, #0
 8006eb8:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 8006ebc:	dc53      	bgt.n	8006f66 <__ieee754_log+0x14e>
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	f7f9 fd6a 	bl	8000998 <__aeabi_dcmpeq>
 8006ec4:	b1d0      	cbz	r0, 8006efc <__ieee754_log+0xe4>
 8006ec6:	2c00      	cmp	r4, #0
 8006ec8:	f000 8120 	beq.w	800710c <__ieee754_log+0x2f4>
 8006ecc:	4620      	mov	r0, r4
 8006ece:	f7f9 fa91 	bl	80003f4 <__aeabi_i2d>
 8006ed2:	a391      	add	r3, pc, #580	@ (adr r3, 8007118 <__ieee754_log+0x300>)
 8006ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed8:	4606      	mov	r6, r0
 8006eda:	460f      	mov	r7, r1
 8006edc:	f7f9 faf4 	bl	80004c8 <__aeabi_dmul>
 8006ee0:	a38f      	add	r3, pc, #572	@ (adr r3, 8007120 <__ieee754_log+0x308>)
 8006ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee6:	4604      	mov	r4, r0
 8006ee8:	460d      	mov	r5, r1
 8006eea:	4630      	mov	r0, r6
 8006eec:	4639      	mov	r1, r7
 8006eee:	f7f9 faeb 	bl	80004c8 <__aeabi_dmul>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	4620      	mov	r0, r4
 8006ef8:	4629      	mov	r1, r5
 8006efa:	e7b8      	b.n	8006e6e <__ieee754_log+0x56>
 8006efc:	a38a      	add	r3, pc, #552	@ (adr r3, 8007128 <__ieee754_log+0x310>)
 8006efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f02:	4650      	mov	r0, sl
 8006f04:	4659      	mov	r1, fp
 8006f06:	f7f9 fadf 	bl	80004c8 <__aeabi_dmul>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	460b      	mov	r3, r1
 8006f0e:	2000      	movs	r0, #0
 8006f10:	4999      	ldr	r1, [pc, #612]	@ (8007178 <__ieee754_log+0x360>)
 8006f12:	f7f9 f921 	bl	8000158 <__aeabi_dsub>
 8006f16:	4652      	mov	r2, sl
 8006f18:	4606      	mov	r6, r0
 8006f1a:	460f      	mov	r7, r1
 8006f1c:	465b      	mov	r3, fp
 8006f1e:	4650      	mov	r0, sl
 8006f20:	4659      	mov	r1, fp
 8006f22:	f7f9 fad1 	bl	80004c8 <__aeabi_dmul>
 8006f26:	4602      	mov	r2, r0
 8006f28:	460b      	mov	r3, r1
 8006f2a:	4630      	mov	r0, r6
 8006f2c:	4639      	mov	r1, r7
 8006f2e:	f7f9 facb 	bl	80004c8 <__aeabi_dmul>
 8006f32:	4606      	mov	r6, r0
 8006f34:	460f      	mov	r7, r1
 8006f36:	b914      	cbnz	r4, 8006f3e <__ieee754_log+0x126>
 8006f38:	4632      	mov	r2, r6
 8006f3a:	463b      	mov	r3, r7
 8006f3c:	e0a0      	b.n	8007080 <__ieee754_log+0x268>
 8006f3e:	4620      	mov	r0, r4
 8006f40:	f7f9 fa58 	bl	80003f4 <__aeabi_i2d>
 8006f44:	a374      	add	r3, pc, #464	@ (adr r3, 8007118 <__ieee754_log+0x300>)
 8006f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4a:	4680      	mov	r8, r0
 8006f4c:	4689      	mov	r9, r1
 8006f4e:	f7f9 fabb 	bl	80004c8 <__aeabi_dmul>
 8006f52:	a373      	add	r3, pc, #460	@ (adr r3, 8007120 <__ieee754_log+0x308>)
 8006f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f58:	4604      	mov	r4, r0
 8006f5a:	460d      	mov	r5, r1
 8006f5c:	4640      	mov	r0, r8
 8006f5e:	4649      	mov	r1, r9
 8006f60:	f7f9 fab2 	bl	80004c8 <__aeabi_dmul>
 8006f64:	e0a5      	b.n	80070b2 <__ieee754_log+0x29a>
 8006f66:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006f6a:	f7f9 f8f7 	bl	800015c <__adddf3>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	460b      	mov	r3, r1
 8006f72:	4650      	mov	r0, sl
 8006f74:	4659      	mov	r1, fp
 8006f76:	f7f9 fbd1 	bl	800071c <__aeabi_ddiv>
 8006f7a:	e9cd 0100 	strd	r0, r1, [sp]
 8006f7e:	4620      	mov	r0, r4
 8006f80:	f7f9 fa38 	bl	80003f4 <__aeabi_i2d>
 8006f84:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f8c:	4610      	mov	r0, r2
 8006f8e:	4619      	mov	r1, r3
 8006f90:	f7f9 fa9a 	bl	80004c8 <__aeabi_dmul>
 8006f94:	4602      	mov	r2, r0
 8006f96:	460b      	mov	r3, r1
 8006f98:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006f9c:	f7f9 fa94 	bl	80004c8 <__aeabi_dmul>
 8006fa0:	a363      	add	r3, pc, #396	@ (adr r3, 8007130 <__ieee754_log+0x318>)
 8006fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa6:	4680      	mov	r8, r0
 8006fa8:	4689      	mov	r9, r1
 8006faa:	f7f9 fa8d 	bl	80004c8 <__aeabi_dmul>
 8006fae:	a362      	add	r3, pc, #392	@ (adr r3, 8007138 <__ieee754_log+0x320>)
 8006fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb4:	f7f9 f8d2 	bl	800015c <__adddf3>
 8006fb8:	4642      	mov	r2, r8
 8006fba:	464b      	mov	r3, r9
 8006fbc:	f7f9 fa84 	bl	80004c8 <__aeabi_dmul>
 8006fc0:	a35f      	add	r3, pc, #380	@ (adr r3, 8007140 <__ieee754_log+0x328>)
 8006fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc6:	f7f9 f8c9 	bl	800015c <__adddf3>
 8006fca:	4642      	mov	r2, r8
 8006fcc:	464b      	mov	r3, r9
 8006fce:	f7f9 fa7b 	bl	80004c8 <__aeabi_dmul>
 8006fd2:	a35d      	add	r3, pc, #372	@ (adr r3, 8007148 <__ieee754_log+0x330>)
 8006fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd8:	f7f9 f8c0 	bl	800015c <__adddf3>
 8006fdc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fe0:	f7f9 fa72 	bl	80004c8 <__aeabi_dmul>
 8006fe4:	a35a      	add	r3, pc, #360	@ (adr r3, 8007150 <__ieee754_log+0x338>)
 8006fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006fee:	4640      	mov	r0, r8
 8006ff0:	4649      	mov	r1, r9
 8006ff2:	f7f9 fa69 	bl	80004c8 <__aeabi_dmul>
 8006ff6:	a358      	add	r3, pc, #352	@ (adr r3, 8007158 <__ieee754_log+0x340>)
 8006ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffc:	f7f9 f8ae 	bl	800015c <__adddf3>
 8007000:	4642      	mov	r2, r8
 8007002:	464b      	mov	r3, r9
 8007004:	f7f9 fa60 	bl	80004c8 <__aeabi_dmul>
 8007008:	a355      	add	r3, pc, #340	@ (adr r3, 8007160 <__ieee754_log+0x348>)
 800700a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800700e:	f7f9 f8a5 	bl	800015c <__adddf3>
 8007012:	4642      	mov	r2, r8
 8007014:	464b      	mov	r3, r9
 8007016:	f7f9 fa57 	bl	80004c8 <__aeabi_dmul>
 800701a:	4602      	mov	r2, r0
 800701c:	460b      	mov	r3, r1
 800701e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007022:	f7f9 f89b 	bl	800015c <__adddf3>
 8007026:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800702a:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800702e:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 8007032:	3551      	adds	r5, #81	@ 0x51
 8007034:	4335      	orrs	r5, r6
 8007036:	2d00      	cmp	r5, #0
 8007038:	4680      	mov	r8, r0
 800703a:	4689      	mov	r9, r1
 800703c:	dd48      	ble.n	80070d0 <__ieee754_log+0x2b8>
 800703e:	2200      	movs	r2, #0
 8007040:	4b4d      	ldr	r3, [pc, #308]	@ (8007178 <__ieee754_log+0x360>)
 8007042:	4650      	mov	r0, sl
 8007044:	4659      	mov	r1, fp
 8007046:	f7f9 fa3f 	bl	80004c8 <__aeabi_dmul>
 800704a:	4652      	mov	r2, sl
 800704c:	465b      	mov	r3, fp
 800704e:	f7f9 fa3b 	bl	80004c8 <__aeabi_dmul>
 8007052:	4602      	mov	r2, r0
 8007054:	460b      	mov	r3, r1
 8007056:	4606      	mov	r6, r0
 8007058:	460f      	mov	r7, r1
 800705a:	4640      	mov	r0, r8
 800705c:	4649      	mov	r1, r9
 800705e:	f7f9 f87d 	bl	800015c <__adddf3>
 8007062:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007066:	f7f9 fa2f 	bl	80004c8 <__aeabi_dmul>
 800706a:	4680      	mov	r8, r0
 800706c:	4689      	mov	r9, r1
 800706e:	b964      	cbnz	r4, 800708a <__ieee754_log+0x272>
 8007070:	4602      	mov	r2, r0
 8007072:	460b      	mov	r3, r1
 8007074:	4630      	mov	r0, r6
 8007076:	4639      	mov	r1, r7
 8007078:	f7f9 f86e 	bl	8000158 <__aeabi_dsub>
 800707c:	4602      	mov	r2, r0
 800707e:	460b      	mov	r3, r1
 8007080:	4650      	mov	r0, sl
 8007082:	4659      	mov	r1, fp
 8007084:	f7f9 f868 	bl	8000158 <__aeabi_dsub>
 8007088:	e6d9      	b.n	8006e3e <__ieee754_log+0x26>
 800708a:	a323      	add	r3, pc, #140	@ (adr r3, 8007118 <__ieee754_log+0x300>)
 800708c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007090:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007094:	f7f9 fa18 	bl	80004c8 <__aeabi_dmul>
 8007098:	a321      	add	r3, pc, #132	@ (adr r3, 8007120 <__ieee754_log+0x308>)
 800709a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800709e:	4604      	mov	r4, r0
 80070a0:	460d      	mov	r5, r1
 80070a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070a6:	f7f9 fa0f 	bl	80004c8 <__aeabi_dmul>
 80070aa:	4642      	mov	r2, r8
 80070ac:	464b      	mov	r3, r9
 80070ae:	f7f9 f855 	bl	800015c <__adddf3>
 80070b2:	4602      	mov	r2, r0
 80070b4:	460b      	mov	r3, r1
 80070b6:	4630      	mov	r0, r6
 80070b8:	4639      	mov	r1, r7
 80070ba:	f7f9 f84d 	bl	8000158 <__aeabi_dsub>
 80070be:	4652      	mov	r2, sl
 80070c0:	465b      	mov	r3, fp
 80070c2:	f7f9 f849 	bl	8000158 <__aeabi_dsub>
 80070c6:	4602      	mov	r2, r0
 80070c8:	460b      	mov	r3, r1
 80070ca:	4620      	mov	r0, r4
 80070cc:	4629      	mov	r1, r5
 80070ce:	e7d9      	b.n	8007084 <__ieee754_log+0x26c>
 80070d0:	4602      	mov	r2, r0
 80070d2:	460b      	mov	r3, r1
 80070d4:	4650      	mov	r0, sl
 80070d6:	4659      	mov	r1, fp
 80070d8:	f7f9 f83e 	bl	8000158 <__aeabi_dsub>
 80070dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070e0:	f7f9 f9f2 	bl	80004c8 <__aeabi_dmul>
 80070e4:	4606      	mov	r6, r0
 80070e6:	460f      	mov	r7, r1
 80070e8:	2c00      	cmp	r4, #0
 80070ea:	f43f af25 	beq.w	8006f38 <__ieee754_log+0x120>
 80070ee:	a30a      	add	r3, pc, #40	@ (adr r3, 8007118 <__ieee754_log+0x300>)
 80070f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070f8:	f7f9 f9e6 	bl	80004c8 <__aeabi_dmul>
 80070fc:	a308      	add	r3, pc, #32	@ (adr r3, 8007120 <__ieee754_log+0x308>)
 80070fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007102:	4604      	mov	r4, r0
 8007104:	460d      	mov	r5, r1
 8007106:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800710a:	e729      	b.n	8006f60 <__ieee754_log+0x148>
 800710c:	2000      	movs	r0, #0
 800710e:	2100      	movs	r1, #0
 8007110:	e695      	b.n	8006e3e <__ieee754_log+0x26>
 8007112:	bf00      	nop
 8007114:	f3af 8000 	nop.w
 8007118:	fee00000 	.word	0xfee00000
 800711c:	3fe62e42 	.word	0x3fe62e42
 8007120:	35793c76 	.word	0x35793c76
 8007124:	3dea39ef 	.word	0x3dea39ef
 8007128:	55555555 	.word	0x55555555
 800712c:	3fd55555 	.word	0x3fd55555
 8007130:	df3e5244 	.word	0xdf3e5244
 8007134:	3fc2f112 	.word	0x3fc2f112
 8007138:	96cb03de 	.word	0x96cb03de
 800713c:	3fc74664 	.word	0x3fc74664
 8007140:	94229359 	.word	0x94229359
 8007144:	3fd24924 	.word	0x3fd24924
 8007148:	55555593 	.word	0x55555593
 800714c:	3fe55555 	.word	0x3fe55555
 8007150:	d078c69f 	.word	0xd078c69f
 8007154:	3fc39a09 	.word	0x3fc39a09
 8007158:	1d8e78af 	.word	0x1d8e78af
 800715c:	3fcc71c5 	.word	0x3fcc71c5
 8007160:	9997fa04 	.word	0x9997fa04
 8007164:	3fd99999 	.word	0x3fd99999
 8007168:	c3500000 	.word	0xc3500000
 800716c:	43500000 	.word	0x43500000
 8007170:	7fefffff 	.word	0x7fefffff
 8007174:	3ff00000 	.word	0x3ff00000
 8007178:	3fe00000 	.word	0x3fe00000

0800717c <_init>:
 800717c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800717e:	bf00      	nop
 8007180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007182:	bc08      	pop	{r3}
 8007184:	469e      	mov	lr, r3
 8007186:	4770      	bx	lr

08007188 <_fini>:
 8007188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800718a:	bf00      	nop
 800718c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800718e:	bc08      	pop	{r3}
 8007190:	469e      	mov	lr, r3
 8007192:	4770      	bx	lr
