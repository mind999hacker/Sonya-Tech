
Sonya Tech Menu Cpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050f4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08005294  08005294  00006294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053d4  080053d4  0000706c  2**0
                  CONTENTS
  4 .ARM          00000008  080053d4  080053d4  000063d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053dc  080053dc  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080053dc  080053dc  000063dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  080053e4  080053e4  000063e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080053ec  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008d0  2000006c  08005458  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000093c  08005458  0000793c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d641  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003342  00000000  00000000  000246dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d0  00000000  00000000  00027a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000df0  00000000  00000000  00028bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b9d5  00000000  00000000  000299e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c54  00000000  00000000  000453b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a18cd  00000000  00000000  0005a009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fb8d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006630  00000000  00000000  000fb91c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  00101f4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800527c 	.word	0x0800527c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	0800527c 	.word	0x0800527c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <_ZN10SimpleMenuC1EiPS_>:



/******************* SETUP *******************/

SimpleMenu::SimpleMenu(int _numberMenuItems, SimpleMenu *_submenus) //defult
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	4618      	mov	r0, r3
 8000590:	f004 f8d4 	bl	800473c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	2200      	movs	r2, #0
 8000598:	761a      	strb	r2, [r3, #24]
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	2200      	movs	r2, #0
 800059e:	61da      	str	r2, [r3, #28]
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	2200      	movs	r2, #0
 80005a4:	621a      	str	r2, [r3, #32]
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	2200      	movs	r2, #0
 80005aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	2200      	movs	r2, #0
 80005b0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	2200      	movs	r2, #0
 80005b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	2200      	movs	r2, #0
 80005bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	2200      	movs	r2, #0
 80005c2:	639a      	str	r2, [r3, #56]	@ 0x38
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	2200      	movs	r2, #0
 80005c8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	2200      	movs	r2, #0
 80005ce:	641a      	str	r2, [r3, #64]	@ 0x40
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	2200      	movs	r2, #0
 80005d4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
{
 numberMenuItems = _numberMenuItems;
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	68ba      	ldr	r2, [r7, #8]
 80005dc:	625a      	str	r2, [r3, #36]	@ 0x24
 submenus = _submenus;
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	687a      	ldr	r2, [r7, #4]
 80005e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	4618      	mov	r0, r3
 80005e8:	3710      	adds	r7, #16
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}

080005ee <_ZN10SimpleMenuC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiPS_>:
{
  CallBack = _CallBack;
  ListCallBack = _ListCallBack;
}

SimpleMenu::SimpleMenu(std::string _name,int _numberMenuItems, SimpleMenu *_submenus) //sub menu
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b084      	sub	sp, #16
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	60f8      	str	r0, [r7, #12]
 80005f6:	60b9      	str	r1, [r7, #8]
 80005f8:	607a      	str	r2, [r7, #4]
 80005fa:	603b      	str	r3, [r7, #0]
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	4618      	mov	r0, r3
 8000600:	f004 f89c 	bl	800473c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	2200      	movs	r2, #0
 8000608:	761a      	strb	r2, [r3, #24]
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	2200      	movs	r2, #0
 800060e:	61da      	str	r2, [r3, #28]
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	2200      	movs	r2, #0
 8000614:	621a      	str	r2, [r3, #32]
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	2200      	movs	r2, #0
 800061a:	629a      	str	r2, [r3, #40]	@ 0x28
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	2200      	movs	r2, #0
 8000620:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	2200      	movs	r2, #0
 8000626:	631a      	str	r2, [r3, #48]	@ 0x30
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	2200      	movs	r2, #0
 800062c:	635a      	str	r2, [r3, #52]	@ 0x34
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	2200      	movs	r2, #0
 8000632:	639a      	str	r2, [r3, #56]	@ 0x38
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	2200      	movs	r2, #0
 8000638:	63da      	str	r2, [r3, #60]	@ 0x3c
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	2200      	movs	r2, #0
 800063e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	2200      	movs	r2, #0
 8000644:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
{
 name = _name;
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	68b9      	ldr	r1, [r7, #8]
 800064c:	4618      	mov	r0, r3
 800064e:	f004 f8b2 	bl	80047b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 numberMenuItems = _numberMenuItems;
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	625a      	str	r2, [r3, #36]	@ 0x24
 submenus = _submenus;
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	683a      	ldr	r2, [r7, #0]
 800065c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	4618      	mov	r0, r3
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <_ZN10SimpleMenuC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPiii>:
{
 name = _name;
 value = _value;
}

SimpleMenu::SimpleMenu(std::string _name,int *_value, int _min, int _max) //Value menu
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	60f8      	str	r0, [r7, #12]
 8000670:	60b9      	str	r1, [r7, #8]
 8000672:	607a      	str	r2, [r7, #4]
 8000674:	603b      	str	r3, [r7, #0]
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	4618      	mov	r0, r3
 800067a:	f004 f85f 	bl	800473c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	2200      	movs	r2, #0
 8000682:	761a      	strb	r2, [r3, #24]
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	2200      	movs	r2, #0
 8000688:	61da      	str	r2, [r3, #28]
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	2200      	movs	r2, #0
 800068e:	621a      	str	r2, [r3, #32]
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	2200      	movs	r2, #0
 8000694:	629a      	str	r2, [r3, #40]	@ 0x28
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	2200      	movs	r2, #0
 800069a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	2200      	movs	r2, #0
 80006a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	2200      	movs	r2, #0
 80006a6:	635a      	str	r2, [r3, #52]	@ 0x34
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	2200      	movs	r2, #0
 80006ac:	639a      	str	r2, [r3, #56]	@ 0x38
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	2200      	movs	r2, #0
 80006b2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	2200      	movs	r2, #0
 80006b8:	641a      	str	r2, [r3, #64]	@ 0x40
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	2200      	movs	r2, #0
 80006be:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
{
  name = _name;
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	68b9      	ldr	r1, [r7, #8]
 80006c6:	4618      	mov	r0, r3
 80006c8:	f004 f875 	bl	80047b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
  value = _value;
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	687a      	ldr	r2, [r7, #4]
 80006d0:	631a      	str	r2, [r3, #48]	@ 0x30
  min = _min;
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	683a      	ldr	r2, [r7, #0]
 80006d6:	645a      	str	r2, [r3, #68]	@ 0x44
  max = _max;
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	69ba      	ldr	r2, [r7, #24]
 80006dc:	649a      	str	r2, [r3, #72]	@ 0x48
  minMaxSet = true;
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	2201      	movs	r2, #1
 80006e2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	4618      	mov	r0, r3
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <_ZN10SimpleMenuC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvvE>:

SimpleMenu::SimpleMenu(std::string _name, void (*_CallBack)()) //function menu
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	607a      	str	r2, [r7, #4]
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	4618      	mov	r0, r3
 8000700:	f004 f81c 	bl	800473c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	2200      	movs	r2, #0
 8000708:	761a      	strb	r2, [r3, #24]
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	2200      	movs	r2, #0
 800070e:	61da      	str	r2, [r3, #28]
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	2200      	movs	r2, #0
 8000714:	621a      	str	r2, [r3, #32]
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	2200      	movs	r2, #0
 800071a:	629a      	str	r2, [r3, #40]	@ 0x28
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	2200      	movs	r2, #0
 8000720:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	2200      	movs	r2, #0
 8000726:	631a      	str	r2, [r3, #48]	@ 0x30
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	2200      	movs	r2, #0
 800072c:	635a      	str	r2, [r3, #52]	@ 0x34
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	2200      	movs	r2, #0
 8000732:	639a      	str	r2, [r3, #56]	@ 0x38
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	2200      	movs	r2, #0
 8000738:	63da      	str	r2, [r3, #60]	@ 0x3c
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	2200      	movs	r2, #0
 800073e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	2200      	movs	r2, #0
 8000744:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
{
  name = _name;
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	68b9      	ldr	r1, [r7, #8]
 800074c:	4618      	mov	r0, r3
 800074e:	f004 f832 	bl	80047b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
  CallBack = _CallBack;
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	687a      	ldr	r2, [r7, #4]
 8000756:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	4618      	mov	r0, r3
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}

08000762 <_ZN10SimpleMenu5beginEPFvPS_ES2_>:
    displayCallBack = _displayCallBack;
  this->print();
}

void SimpleMenu::begin(void (*_displayCallBack)(SimpleMenu *_menu),void (*_valueCallBack)(SimpleMenu *_menu))
{
 8000762:	b580      	push	{r7, lr}
 8000764:	b084      	sub	sp, #16
 8000766:	af00      	add	r7, sp, #0
 8000768:	60f8      	str	r0, [r7, #12]
 800076a:	60b9      	str	r1, [r7, #8]
 800076c:	607a      	str	r2, [r7, #4]
  selectMenu = false;
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	2200      	movs	r2, #0
 8000772:	761a      	strb	r2, [r3, #24]
  menuLocation = 0;
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
  if(displayCallBack  == NULL)
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800077e:	2b00      	cmp	r3, #0
 8000780:	d102      	bne.n	8000788 <_ZN10SimpleMenu5beginEPFvPS_ES2_+0x26>
    displayCallBack = _displayCallBack;
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	68ba      	ldr	r2, [r7, #8]
 8000786:	63da      	str	r2, [r3, #60]	@ 0x3c
  if(valueCallBack  == NULL)
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800078c:	2b00      	cmp	r3, #0
 800078e:	d102      	bne.n	8000796 <_ZN10SimpleMenu5beginEPFvPS_ES2_+0x34>
    valueCallBack = _valueCallBack;
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	641a      	str	r2, [r3, #64]	@ 0x40
  this->print();
 8000796:	68f8      	ldr	r0, [r7, #12]
 8000798:	f000 f9e8 	bl	8000b6c <_ZN10SimpleMenu5printEv>
}
 800079c:	bf00      	nop
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <_ZN10SimpleMenu5beginEPS_PFvS0_ES2_>:

void SimpleMenu::begin(SimpleMenu *_Top,void (*_displayCallBack)(SimpleMenu *_menu),void (*_valueCallBack)(SimpleMenu *_menu))
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	60b9      	str	r1, [r7, #8]
 80007ae:	607a      	str	r2, [r7, #4]
 80007b0:	603b      	str	r3, [r7, #0]
  selectMenu = false;
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	2200      	movs	r2, #0
 80007b6:	761a      	strb	r2, [r3, #24]
  menuLocation = 0;
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  Top_menu = _Top;
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	68ba      	ldr	r2, [r7, #8]
 80007c2:	621a      	str	r2, [r3, #32]

  if(displayCallBack  == NULL)
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d102      	bne.n	80007d2 <_ZN10SimpleMenu5beginEPS_PFvS0_ES2_+0x2e>
    displayCallBack = _displayCallBack;
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	63da      	str	r2, [r3, #60]	@ 0x3c
  if(valueCallBack  == NULL)
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d102      	bne.n	80007e0 <_ZN10SimpleMenu5beginEPS_PFvS0_ES2_+0x3c>
    valueCallBack = _valueCallBack;
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	683a      	ldr	r2, [r7, #0]
 80007de:	641a      	str	r2, [r3, #64]	@ 0x40

  if(CallBack != NULL && ListCallBack == NULL)
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d00b      	beq.n	8000800 <_ZN10SimpleMenu5beginEPS_PFvS0_ES2_+0x5c>
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d107      	bne.n	8000800 <_ZN10SimpleMenu5beginEPS_PFvS0_ES2_+0x5c>
  {
    CallBack();
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007f4:	4798      	blx	r3
    Top_menu->returned();
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	6a1b      	ldr	r3, [r3, #32]
 80007fa:	4618      	mov	r0, r3
 80007fc:	f000 f8d6 	bl	80009ac <_ZN10SimpleMenu8returnedEv>
  }

  this->print();
 8000800:	68f8      	ldr	r0, [r7, #12]
 8000802:	f000 f9b3 	bl	8000b6c <_ZN10SimpleMenu5printEv>
}
 8000806:	bf00      	nop
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <_ZN10SimpleMenu6selectEv>:
  }
  this->print();
}

void SimpleMenu::select()
{
 800080e:	b580      	push	{r7, lr}
 8000810:	b082      	sub	sp, #8
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]
  if(menuLocation == -1)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	69db      	ldr	r3, [r3, #28]
 800081a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800081e:	d105      	bne.n	800082c <_ZN10SimpleMenu6selectEv+0x1e>
  {
    Top_menu->returned();
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	6a1b      	ldr	r3, [r3, #32]
 8000824:	4618      	mov	r0, r3
 8000826:	f000 f8c1 	bl	80009ac <_ZN10SimpleMenu8returnedEv>
 800082a:	e066      	b.n	80008fa <_ZN10SimpleMenu6selectEv+0xec>
  }
  else if(CallBack != NULL && ListCallBack != NULL)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000830:	2b00      	cmp	r3, #0
 8000832:	d007      	beq.n	8000844 <_ZN10SimpleMenu6selectEv+0x36>
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000838:	2b00      	cmp	r3, #0
 800083a:	d003      	beq.n	8000844 <_ZN10SimpleMenu6selectEv+0x36>
  {
    CallBack();
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000840:	4798      	blx	r3
 8000842:	e05a      	b.n	80008fa <_ZN10SimpleMenu6selectEv+0xec>
  }
  else if(selectMenu && submenus != NULL)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	7e1b      	ldrb	r3, [r3, #24]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d011      	beq.n	8000870 <_ZN10SimpleMenu6selectEv+0x62>
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000850:	2b00      	cmp	r3, #0
 8000852:	d00d      	beq.n	8000870 <_ZN10SimpleMenu6selectEv+0x62>
  {
    submenus[menuLocation].select();
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	69db      	ldr	r3, [r3, #28]
 800085c:	4619      	mov	r1, r3
 800085e:	460b      	mov	r3, r1
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	440b      	add	r3, r1
 8000864:	011b      	lsls	r3, r3, #4
 8000866:	4413      	add	r3, r2
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff ffd0 	bl	800080e <_ZN10SimpleMenu6selectEv>
 800086e:	e044      	b.n	80008fa <_ZN10SimpleMenu6selectEv+0xec>
  }
  else if(submenus != NULL)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000874:	2b00      	cmp	r3, #0
 8000876:	d014      	beq.n	80008a2 <_ZN10SimpleMenu6selectEv+0x94>
  {
    selectMenu = true;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2201      	movs	r2, #1
 800087c:	761a      	strb	r2, [r3, #24]
    submenus[menuLocation].begin(this,displayCallBack,valueCallBack);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	69db      	ldr	r3, [r3, #28]
 8000886:	4619      	mov	r1, r3
 8000888:	460b      	mov	r3, r1
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	440b      	add	r3, r1
 800088e:	011b      	lsls	r3, r3, #4
 8000890:	18d0      	adds	r0, r2, r3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800089a:	6879      	ldr	r1, [r7, #4]
 800089c:	f7ff ff82 	bl	80007a4 <_ZN10SimpleMenu5beginEPS_PFvS0_ES2_>
 80008a0:	e02b      	b.n	80008fa <_ZN10SimpleMenu6selectEv+0xec>
  }
  else if(selectMenu && subListmenus != NULL)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	7e1b      	ldrb	r3, [r3, #24]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d009      	beq.n	80008be <_ZN10SimpleMenu6selectEv+0xb0>
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d005      	beq.n	80008be <_ZN10SimpleMenu6selectEv+0xb0>
  {
    subListmenus->select();
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff ffa9 	bl	800080e <_ZN10SimpleMenu6selectEv>
 80008bc:	e01d      	b.n	80008fa <_ZN10SimpleMenu6selectEv+0xec>
  }
  else if(subListmenus != NULL)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d00c      	beq.n	80008e0 <_ZN10SimpleMenu6selectEv+0xd2>
  {
    selectMenu = true;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2201      	movs	r2, #1
 80008ca:	761a      	strb	r2, [r3, #24]
    subListmenus->begin(this,displayCallBack,valueCallBack);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d8:	6879      	ldr	r1, [r7, #4]
 80008da:	f7ff ff63 	bl	80007a4 <_ZN10SimpleMenu5beginEPS_PFvS0_ES2_>
 80008de:	e00c      	b.n	80008fa <_ZN10SimpleMenu6selectEv+0xec>
  }
  else if(value != NULL && Top_menu != NULL)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d008      	beq.n	80008fa <_ZN10SimpleMenu6selectEv+0xec>
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	6a1b      	ldr	r3, [r3, #32]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d004      	beq.n	80008fa <_ZN10SimpleMenu6selectEv+0xec>
  {
    Top_menu->returned();
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	6a1b      	ldr	r3, [r3, #32]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 f859 	bl	80009ac <_ZN10SimpleMenu8returnedEv>
  }
  this->print();
 80008fa:	6878      	ldr	r0, [r7, #4]
 80008fc:	f000 f936 	bl	8000b6c <_ZN10SimpleMenu5printEv>
}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <_ZN10SimpleMenu4backEv>:

void SimpleMenu::back()
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  if(selectMenu && subListmenus != NULL && subListmenus->selectMenu)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	7e1b      	ldrb	r3, [r3, #24]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d00e      	beq.n	8000936 <_ZN10SimpleMenu4backEv+0x2e>
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800091c:	2b00      	cmp	r3, #0
 800091e:	d00a      	beq.n	8000936 <_ZN10SimpleMenu4backEv+0x2e>
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000924:	7e1b      	ldrb	r3, [r3, #24]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d005      	beq.n	8000936 <_ZN10SimpleMenu4backEv+0x2e>
  {
    subListmenus->back();
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff ffea 	bl	8000908 <_ZN10SimpleMenu4backEv>
 8000934:	e033      	b.n	800099e <_ZN10SimpleMenu4backEv+0x96>
  }
  else if(selectMenu && submenus != NULL && submenus[menuLocation].selectMenu)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	7e1b      	ldrb	r3, [r3, #24]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d01e      	beq.n	800097c <_ZN10SimpleMenu4backEv+0x74>
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000942:	2b00      	cmp	r3, #0
 8000944:	d01a      	beq.n	800097c <_ZN10SimpleMenu4backEv+0x74>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	69db      	ldr	r3, [r3, #28]
 800094e:	4619      	mov	r1, r3
 8000950:	460b      	mov	r3, r1
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	440b      	add	r3, r1
 8000956:	011b      	lsls	r3, r3, #4
 8000958:	4413      	add	r3, r2
 800095a:	7e1b      	ldrb	r3, [r3, #24]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d00d      	beq.n	800097c <_ZN10SimpleMenu4backEv+0x74>
  {
    submenus[menuLocation].back();
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	69db      	ldr	r3, [r3, #28]
 8000968:	4619      	mov	r1, r3
 800096a:	460b      	mov	r3, r1
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	440b      	add	r3, r1
 8000970:	011b      	lsls	r3, r3, #4
 8000972:	4413      	add	r3, r2
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff ffc7 	bl	8000908 <_ZN10SimpleMenu4backEv>
 800097a:	e010      	b.n	800099e <_ZN10SimpleMenu4backEv+0x96>
  }
  else if(submenus != NULL)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000980:	2b00      	cmp	r3, #0
 8000982:	d003      	beq.n	800098c <_ZN10SimpleMenu4backEv+0x84>
  {
    selectMenu = false;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2200      	movs	r2, #0
 8000988:	761a      	strb	r2, [r3, #24]
 800098a:	e008      	b.n	800099e <_ZN10SimpleMenu4backEv+0x96>
  }
  else if(Top_menu != NULL)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	6a1b      	ldr	r3, [r3, #32]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d004      	beq.n	800099e <_ZN10SimpleMenu4backEv+0x96>
  {
    Top_menu->returned();
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	6a1b      	ldr	r3, [r3, #32]
 8000998:	4618      	mov	r0, r3
 800099a:	f000 f807 	bl	80009ac <_ZN10SimpleMenu8returnedEv>
  }
  this->print();
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	f000 f8e4 	bl	8000b6c <_ZN10SimpleMenu5printEv>
}
 80009a4:	bf00      	nop
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <_ZN10SimpleMenu8returnedEv>:

void SimpleMenu::returned()
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  selectMenu = false;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2200      	movs	r2, #0
 80009b8:	761a      	strb	r2, [r3, #24]
  this->print();
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f000 f8d6 	bl	8000b6c <_ZN10SimpleMenu5printEv>
}
 80009c0:	bf00      	nop
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <_ZN10SimpleMenu2upEv>:

void SimpleMenu::up()
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  if(selectMenu && subListmenus != NULL)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	7e1b      	ldrb	r3, [r3, #24]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d009      	beq.n	80009ec <_ZN10SimpleMenu2upEv+0x24>
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d005      	beq.n	80009ec <_ZN10SimpleMenu2upEv+0x24>
  {
    subListmenus->up();
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff ffef 	bl	80009c8 <_ZN10SimpleMenu2upEv>
 80009ea:	e022      	b.n	8000a32 <_ZN10SimpleMenu2upEv+0x6a>
  }
  else if(selectMenu)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	7e1b      	ldrb	r3, [r3, #24]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d00d      	beq.n	8000a10 <_ZN10SimpleMenu2upEv+0x48>
  {
    submenus[menuLocation].up();
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	69db      	ldr	r3, [r3, #28]
 80009fc:	4619      	mov	r1, r3
 80009fe:	460b      	mov	r3, r1
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	440b      	add	r3, r1
 8000a04:	011b      	lsls	r3, r3, #4
 8000a06:	4413      	add	r3, r2
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff ffdd 	bl	80009c8 <_ZN10SimpleMenu2upEv>
 8000a0e:	e010      	b.n	8000a32 <_ZN10SimpleMenu2upEv+0x6a>
  }
  else if(value != NULL)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d007      	beq.n	8000a28 <_ZN10SimpleMenu2upEv+0x60>
  {
    *value = *value + 1;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	3201      	adds	r2, #1
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	e004      	b.n	8000a32 <_ZN10SimpleMenu2upEv+0x6a>
  }
  else
  {
    menuLocation--;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	69db      	ldr	r3, [r3, #28]
 8000a2c:	1e5a      	subs	r2, r3, #1
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	61da      	str	r2, [r3, #28]
  }
  this->print();
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f000 f89a 	bl	8000b6c <_ZN10SimpleMenu5printEv>
}
 8000a38:	bf00      	nop
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <_ZN10SimpleMenu4downEv>:

void SimpleMenu::down()
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  if(selectMenu && subListmenus != NULL)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	7e1b      	ldrb	r3, [r3, #24]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d009      	beq.n	8000a64 <_ZN10SimpleMenu4downEv+0x24>
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d005      	beq.n	8000a64 <_ZN10SimpleMenu4downEv+0x24>
  {
    subListmenus->down();
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff ffef 	bl	8000a40 <_ZN10SimpleMenu4downEv>
 8000a62:	e022      	b.n	8000aaa <_ZN10SimpleMenu4downEv+0x6a>
  }
  else if(selectMenu)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	7e1b      	ldrb	r3, [r3, #24]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d00d      	beq.n	8000a88 <_ZN10SimpleMenu4downEv+0x48>
  {
    submenus[menuLocation].down();
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	69db      	ldr	r3, [r3, #28]
 8000a74:	4619      	mov	r1, r3
 8000a76:	460b      	mov	r3, r1
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	440b      	add	r3, r1
 8000a7c:	011b      	lsls	r3, r3, #4
 8000a7e:	4413      	add	r3, r2
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff ffdd 	bl	8000a40 <_ZN10SimpleMenu4downEv>
 8000a86:	e010      	b.n	8000aaa <_ZN10SimpleMenu4downEv+0x6a>
  }
  else if(value != NULL)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d007      	beq.n	8000aa0 <_ZN10SimpleMenu4downEv+0x60>
  {
    *value = *value - 1;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	3a01      	subs	r2, #1
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	e004      	b.n	8000aaa <_ZN10SimpleMenu4downEv+0x6a>
  }
  else
  {
    menuLocation++;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	69db      	ldr	r3, [r3, #28]
 8000aa4:	1c5a      	adds	r2, r3, #1
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	61da      	str	r2, [r3, #28]
  }
  this->print();
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f000 f85e 	bl	8000b6c <_ZN10SimpleMenu5printEv>
}
 8000ab0:	bf00      	nop
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <_ZN10SimpleMenu4nextEv>:
  }
  this->print();
}

SimpleMenu *SimpleMenu::next()
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  return this->next(1);
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f000 f805 	bl	8000ad2 <_ZN10SimpleMenu4nextEi>
 8000ac8:	4603      	mov	r3, r0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <_ZN10SimpleMenu4nextEi>:

SimpleMenu *SimpleMenu::next(int index)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b082      	sub	sp, #8
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
 8000ada:	6039      	str	r1, [r7, #0]
  if(selectMenu && submenus != NULL)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	7e1b      	ldrb	r3, [r3, #24]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d013      	beq.n	8000b0c <_ZN10SimpleMenu4nextEi+0x3a>
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d00f      	beq.n	8000b0c <_ZN10SimpleMenu4nextEi+0x3a>
  {
    return  submenus[menuLocation].next(index);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	69db      	ldr	r3, [r3, #28]
 8000af4:	4619      	mov	r1, r3
 8000af6:	460b      	mov	r3, r1
 8000af8:	009b      	lsls	r3, r3, #2
 8000afa:	440b      	add	r3, r1
 8000afc:	011b      	lsls	r3, r3, #4
 8000afe:	4413      	add	r3, r2
 8000b00:	6839      	ldr	r1, [r7, #0]
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff ffe5 	bl	8000ad2 <_ZN10SimpleMenu4nextEi>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	e02b      	b.n	8000b64 <_ZN10SimpleMenu4nextEi+0x92>
  }
  else if(menuLocation+index>=0 && menuLocation+index < numberMenuItems)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	69da      	ldr	r2, [r3, #28]
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	4413      	add	r3, r2
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	db14      	blt.n	8000b42 <_ZN10SimpleMenu4nextEi+0x70>
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	69da      	ldr	r2, [r3, #28]
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	441a      	add	r2, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b24:	429a      	cmp	r2, r3
 8000b26:	da0c      	bge.n	8000b42 <_ZN10SimpleMenu4nextEi+0x70>
  {
    return  &submenus[menuLocation+index];
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	69d9      	ldr	r1, [r3, #28]
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	440b      	add	r3, r1
 8000b34:	4619      	mov	r1, r3
 8000b36:	460b      	mov	r3, r1
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	440b      	add	r3, r1
 8000b3c:	011b      	lsls	r3, r3, #4
 8000b3e:	4413      	add	r3, r2
 8000b40:	e010      	b.n	8000b64 <_ZN10SimpleMenu4nextEi+0x92>
  }
  else if(selectMenu && subListmenus != NULL)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	7e1b      	ldrb	r3, [r3, #24]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d00b      	beq.n	8000b62 <_ZN10SimpleMenu4nextEi+0x90>
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d007      	beq.n	8000b62 <_ZN10SimpleMenu4nextEi+0x90>
  {
    return  subListmenus->next(index);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b56:	6839      	ldr	r1, [r7, #0]
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff ffba 	bl	8000ad2 <_ZN10SimpleMenu4nextEi>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	e000      	b.n	8000b64 <_ZN10SimpleMenu4nextEi+0x92>
  }
  return NULL;
 8000b62:	2300      	movs	r3, #0
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <_ZN10SimpleMenu5printEv>:

void SimpleMenu::print()
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  if(minMaxSet && *value<min)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d00b      	beq.n	8000b96 <_ZN10SimpleMenu5printEv+0x2a>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	da04      	bge.n	8000b96 <_ZN10SimpleMenu5printEv+0x2a>
  {
    *value = min;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000b94:	601a      	str	r2, [r3, #0]
  }

  if(minMaxSet && *value>max)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d00b      	beq.n	8000bb8 <_ZN10SimpleMenu5printEv+0x4c>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000baa:	429a      	cmp	r2, r3
 8000bac:	dd04      	ble.n	8000bb8 <_ZN10SimpleMenu5printEv+0x4c>
  {
    *value = max;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8000bb6:	601a      	str	r2, [r3, #0]
  }

  if(/*ListCallBack == NULL &&*/ menuLocation<0)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	69db      	ldr	r3, [r3, #28]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	da02      	bge.n	8000bc6 <_ZN10SimpleMenu5printEv+0x5a>
  {
    menuLocation = 0;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]
  }


  if(submenus != NULL && menuLocation >= numberMenuItems)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d00a      	beq.n	8000be4 <_ZN10SimpleMenu5printEv+0x78>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	69da      	ldr	r2, [r3, #28]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	db04      	blt.n	8000be4 <_ZN10SimpleMenu5printEv+0x78>
  {
    menuLocation = numberMenuItems-1;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bde:	1e5a      	subs	r2, r3, #1
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	61da      	str	r2, [r3, #28]
  }

  if(selectMenu && submenus != NULL )
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	7e1b      	ldrb	r3, [r3, #24]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d011      	beq.n	8000c10 <_ZN10SimpleMenu5printEv+0xa4>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d00d      	beq.n	8000c10 <_ZN10SimpleMenu5printEv+0xa4>
  {
    submenus[menuLocation].print();
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	69db      	ldr	r3, [r3, #28]
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	460b      	mov	r3, r1
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	440b      	add	r3, r1
 8000c04:	011b      	lsls	r3, r3, #4
 8000c06:	4413      	add	r3, r2
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff ffaf 	bl	8000b6c <_ZN10SimpleMenu5printEv>
 8000c0e:	e05b      	b.n	8000cc8 <_ZN10SimpleMenu5printEv+0x15c>
  }
  else if(selectMenu && subListmenus != NULL && ListCallBack != NULL )
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	7e1b      	ldrb	r3, [r3, #24]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d00d      	beq.n	8000c34 <_ZN10SimpleMenu5printEv+0xc8>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d009      	beq.n	8000c34 <_ZN10SimpleMenu5printEv+0xc8>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d005      	beq.n	8000c34 <_ZN10SimpleMenu5printEv+0xc8>
  {
    subListmenus->print();
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff ff9d 	bl	8000b6c <_ZN10SimpleMenu5printEv>
 8000c32:	e049      	b.n	8000cc8 <_ZN10SimpleMenu5printEv+0x15c>
  }
  else if(value != NULL)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d004      	beq.n	8000c46 <_ZN10SimpleMenu5printEv+0xda>
  {
    valueCallBack(this);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	4798      	blx	r3
  else if(submenus != NULL)
  {
    displayCallBack(&submenus[menuLocation]);
  }

}
 8000c44:	e040      	b.n	8000cc8 <_ZN10SimpleMenu5printEv+0x15c>
  else if(ListCallBack != NULL)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d029      	beq.n	8000ca2 <_ZN10SimpleMenu5printEv+0x136>
    bool LocationExists = ListCallBack(menuLocation);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	69d2      	ldr	r2, [r2, #28]
 8000c56:	4610      	mov	r0, r2
 8000c58:	4798      	blx	r3
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	73fb      	strb	r3, [r7, #15]
    while(LocationExists == false && menuLocation > -1 )
 8000c5e:	e00c      	b.n	8000c7a <_ZN10SimpleMenu5printEv+0x10e>
      menuLocation--;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	69db      	ldr	r3, [r3, #28]
 8000c64:	1e5a      	subs	r2, r3, #1
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	61da      	str	r2, [r3, #28]
      LocationExists = ListCallBack(menuLocation);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	69d2      	ldr	r2, [r2, #28]
 8000c72:	4610      	mov	r0, r2
 8000c74:	4798      	blx	r3
 8000c76:	4603      	mov	r3, r0
 8000c78:	73fb      	strb	r3, [r7, #15]
    while(LocationExists == false && menuLocation > -1 )
 8000c7a:	7bfb      	ldrb	r3, [r7, #15]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d103      	bne.n	8000c88 <_ZN10SimpleMenu5printEv+0x11c>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	69db      	ldr	r3, [r3, #28]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	daeb      	bge.n	8000c60 <_ZN10SimpleMenu5printEv+0xf4>
    if(menuLocation < -1)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	69db      	ldr	r3, [r3, #28]
 8000c8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000c90:	da1a      	bge.n	8000cc8 <_ZN10SimpleMenu5printEv+0x15c>
      menuLocation = -1;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c98:	61da      	str	r2, [r3, #28]
      this->back();
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff fe34 	bl	8000908 <_ZN10SimpleMenu4backEv>
}
 8000ca0:	e012      	b.n	8000cc8 <_ZN10SimpleMenu5printEv+0x15c>
  else if(submenus != NULL)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d00e      	beq.n	8000cc8 <_ZN10SimpleMenu5printEv+0x15c>
    displayCallBack(&submenus[menuLocation]);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	69db      	ldr	r3, [r3, #28]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	4603      	mov	r3, r0
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	4403      	add	r3, r0
 8000cbe:	011b      	lsls	r3, r3, #4
 8000cc0:	440b      	add	r3, r1
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	4790      	blx	r2
}
 8000cc6:	e7ff      	b.n	8000cc8 <_ZN10SimpleMenu5printEv+0x15c>
 8000cc8:	bf00      	nop
 8000cca:	3710      	adds	r7, #16
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <_ZN10SimpleMenu8getValueEv>:
{
  return value != NULL;
}

int SimpleMenu::getValue()
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  return *value;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cdc:	681b      	ldr	r3, [r3, #0]
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <_Z17stringToCharArrayRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
{
  return menuLocation;
}


char* stringToCharArray(const std::string& input) {
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b084      	sub	sp, #16
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
  char* output = new char[input.size() + 1];
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f003 fd2f 	bl	8004756 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f003 fcd1 	bl	80046a4 <_Znaj>
 8000d02:	4603      	mov	r3, r0
 8000d04:	60fb      	str	r3, [r7, #12]
  std::strcpy(output, input.c_str());
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f003 fd5b 	bl	80047c2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	4619      	mov	r1, r3
 8000d10:	68f8      	ldr	r0, [r7, #12]
 8000d12:	f003 ff45 	bl	8004ba0 <strcpy>
  return output;
 8000d16:	68fb      	ldr	r3, [r7, #12]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <_Z12HD44780_Inith>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000d2a:	4a38      	ldr	r2, [pc, #224]	@ (8000e0c <_Z12HD44780_Inith+0xec>)
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000d30:	4b37      	ldr	r3, [pc, #220]	@ (8000e10 <_Z12HD44780_Inith+0xf0>)
 8000d32:	2208      	movs	r2, #8
 8000d34:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000d36:	4b37      	ldr	r3, [pc, #220]	@ (8000e14 <_Z12HD44780_Inith+0xf4>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000d3c:	4b33      	ldr	r3, [pc, #204]	@ (8000e0c <_Z12HD44780_Inith+0xec>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d907      	bls.n	8000d54 <_Z12HD44780_Inith+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000d44:	4b33      	ldr	r3, [pc, #204]	@ (8000e14 <_Z12HD44780_Inith+0xf4>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	f043 0308 	orr.w	r3, r3, #8
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	4b31      	ldr	r3, [pc, #196]	@ (8000e14 <_Z12HD44780_Inith+0xf4>)
 8000d50:	701a      	strb	r2, [r3, #0]
 8000d52:	e006      	b.n	8000d62 <_Z12HD44780_Inith+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000d54:	4b2f      	ldr	r3, [pc, #188]	@ (8000e14 <_Z12HD44780_Inith+0xf4>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	f043 0304 	orr.w	r3, r3, #4
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	4b2d      	ldr	r3, [pc, #180]	@ (8000e14 <_Z12HD44780_Inith+0xf4>)
 8000d60:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000d62:	f000 f985 	bl	8001070 <_ZL9DelayInitv>
  HAL_Delay(50);
 8000d66:	2032      	movs	r0, #50	@ 0x32
 8000d68:	f001 fa32 	bl	80021d0 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000d6c:	4b28      	ldr	r3, [pc, #160]	@ (8000e10 <_Z12HD44780_Inith+0xf0>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f000 f943 	bl	8000ffc <_ZL13ExpanderWriteh>
  HAL_Delay(1000);
 8000d76:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d7a:	f001 fa29 	bl	80021d0 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000d7e:	2030      	movs	r0, #48	@ 0x30
 8000d80:	f000 f92b 	bl	8000fda <_ZL10Write4Bitsh>
  DelayUS(4500);
 8000d84:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000d88:	f000 f99c 	bl	80010c4 <_ZL7DelayUSm>

  Write4Bits(0x03 << 4);
 8000d8c:	2030      	movs	r0, #48	@ 0x30
 8000d8e:	f000 f924 	bl	8000fda <_ZL10Write4Bitsh>
  DelayUS(4500);
 8000d92:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000d96:	f000 f995 	bl	80010c4 <_ZL7DelayUSm>

  Write4Bits(0x03 << 4);
 8000d9a:	2030      	movs	r0, #48	@ 0x30
 8000d9c:	f000 f91d 	bl	8000fda <_ZL10Write4Bitsh>
  DelayUS(4500);
 8000da0:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000da4:	f000 f98e 	bl	80010c4 <_ZL7DelayUSm>

  Write4Bits(0x02 << 4);
 8000da8:	2020      	movs	r0, #32
 8000daa:	f000 f916 	bl	8000fda <_ZL10Write4Bitsh>
  DelayUS(100);
 8000dae:	2064      	movs	r0, #100	@ 0x64
 8000db0:	f000 f988 	bl	80010c4 <_ZL7DelayUSm>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000db4:	4b17      	ldr	r3, [pc, #92]	@ (8000e14 <_Z12HD44780_Inith+0xf4>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	f043 0320 	orr.w	r3, r3, #32
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f000 f8ce 	bl	8000f60 <_ZL11SendCommandh>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000dc4:	4b14      	ldr	r3, [pc, #80]	@ (8000e18 <_Z12HD44780_Inith+0xf8>)
 8000dc6:	2204      	movs	r2, #4
 8000dc8:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000dca:	f000 f875 	bl	8000eb8 <_Z15HD44780_Displayv>
  HD44780_Clear();
 8000dce:	f000 f82b 	bl	8000e28 <_Z13HD44780_Clearv>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000dd2:	4b12      	ldr	r3, [pc, #72]	@ (8000e1c <_Z12HD44780_Inith+0xfc>)
 8000dd4:	2202      	movs	r2, #2
 8000dd6:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000dd8:	4b10      	ldr	r3, [pc, #64]	@ (8000e1c <_Z12HD44780_Inith+0xfc>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	f043 0304 	orr.w	r3, r3, #4
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	4618      	mov	r0, r3
 8000de4:	f000 f8bc 	bl	8000f60 <_ZL11SendCommandh>
  DelayUS(4500);
 8000de8:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000dec:	f000 f96a 	bl	80010c4 <_ZL7DelayUSm>

  HD44780_CreateSpecialChar(0, special1);
 8000df0:	490b      	ldr	r1, [pc, #44]	@ (8000e20 <_Z12HD44780_Inith+0x100>)
 8000df2:	2000      	movs	r0, #0
 8000df4:	f000 f876 	bl	8000ee4 <_Z25HD44780_CreateSpecialCharhPh>
  HD44780_CreateSpecialChar(1, special2);
 8000df8:	490a      	ldr	r1, [pc, #40]	@ (8000e24 <_Z12HD44780_Inith+0x104>)
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	f000 f872 	bl	8000ee4 <_Z25HD44780_CreateSpecialCharhPh>

  HD44780_Home();
 8000e00:	f000 f81d 	bl	8000e3e <_Z12HD44780_Homev>
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	2000008b 	.word	0x2000008b
 8000e10:	2000008c 	.word	0x2000008c
 8000e14:	20000088 	.word	0x20000088
 8000e18:	20000089 	.word	0x20000089
 8000e1c:	2000008a 	.word	0x2000008a
 8000e20:	20000000 	.word	0x20000000
 8000e24:	20000008 	.word	0x20000008

08000e28 <_Z13HD44780_Clearv>:

void HD44780_Clear()
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	f000 f897 	bl	8000f60 <_ZL11SendCommandh>
  DelayUS(2000);
 8000e32:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e36:	f000 f945 	bl	80010c4 <_ZL7DelayUSm>
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <_Z12HD44780_Homev>:

void HD44780_Home()
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000e42:	2002      	movs	r0, #2
 8000e44:	f000 f88c 	bl	8000f60 <_ZL11SendCommandh>
  DelayUS(2000);
 8000e48:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e4c:	f000 f93a 	bl	80010c4 <_ZL7DelayUSm>
}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <_Z17HD44780_SetCursorhh>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000e54:	b590      	push	{r4, r7, lr}
 8000e56:	b087      	sub	sp, #28
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	460a      	mov	r2, r1
 8000e5e:	71fb      	strb	r3, [r7, #7]
 8000e60:	4613      	mov	r3, r2
 8000e62:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000e64:	4b12      	ldr	r3, [pc, #72]	@ (8000eb0 <_Z17HD44780_SetCursorhh+0x5c>)
 8000e66:	f107 0408 	add.w	r4, r7, #8
 8000e6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000e70:	4b10      	ldr	r3, [pc, #64]	@ (8000eb4 <_Z17HD44780_SetCursorhh+0x60>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	79ba      	ldrb	r2, [r7, #6]
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d303      	bcc.n	8000e82 <_Z17HD44780_SetCursorhh+0x2e>
  {
    row = dpRows-1;
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb4 <_Z17HD44780_SetCursorhh+0x60>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000e82:	79bb      	ldrb	r3, [r7, #6]
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	3318      	adds	r3, #24
 8000e88:	443b      	add	r3, r7
 8000e8a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	4413      	add	r3, r2
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	b25b      	sxtb	r3, r3
 8000e98:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e9c:	b25b      	sxtb	r3, r3
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f000 f85d 	bl	8000f60 <_ZL11SendCommandh>
}
 8000ea6:	bf00      	nop
 8000ea8:	371c      	adds	r7, #28
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd90      	pop	{r4, r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	08005294 	.word	0x08005294
 8000eb4:	2000008b 	.word	0x2000008b

08000eb8 <_Z15HD44780_Displayv>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000ebc:	4b08      	ldr	r3, [pc, #32]	@ (8000ee0 <_Z15HD44780_Displayv+0x28>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	f043 0304 	orr.w	r3, r3, #4
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	4b06      	ldr	r3, [pc, #24]	@ (8000ee0 <_Z15HD44780_Displayv+0x28>)
 8000ec8:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000eca:	4b05      	ldr	r3, [pc, #20]	@ (8000ee0 <_Z15HD44780_Displayv+0x28>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	f043 0308 	orr.w	r3, r3, #8
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f000 f843 	bl	8000f60 <_ZL11SendCommandh>
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000089 	.word	0x20000089

08000ee4 <_Z25HD44780_CreateSpecialCharhPh>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	6039      	str	r1, [r7, #0]
 8000eee:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	00db      	lsls	r3, r3, #3
 8000efc:	b25b      	sxtb	r3, r3
 8000efe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f02:	b25b      	sxtb	r3, r3
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 f82a 	bl	8000f60 <_ZL11SendCommandh>
  for (int i=0; i<8; i++)
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	e009      	b.n	8000f26 <_Z25HD44780_CreateSpecialCharhPh+0x42>
  {
    SendChar(charmap[i]);
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	683a      	ldr	r2, [r7, #0]
 8000f16:	4413      	add	r3, r2
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 f82e 	bl	8000f7c <_ZL8SendCharh>
  for (int i=0; i<8; i++)
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	3301      	adds	r3, #1
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	2b07      	cmp	r3, #7
 8000f2a:	ddf2      	ble.n	8000f12 <_Z25HD44780_CreateSpecialCharhPh+0x2e>
  }
}
 8000f2c:	bf00      	nop
 8000f2e:	bf00      	nop
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <_Z16HD44780_PrintStrPKc>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000f3e:	e006      	b.n	8000f4e <_Z16HD44780_PrintStrPKc+0x18>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	1c5a      	adds	r2, r3, #1
 8000f44:	607a      	str	r2, [r7, #4]
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f000 f817 	bl	8000f7c <_ZL8SendCharh>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d1f4      	bne.n	8000f40 <_Z16HD44780_PrintStrPKc+0xa>
}
 8000f56:	bf00      	nop
 8000f58:	bf00      	nop
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <_ZL11SendCommandh>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f000 f812 	bl	8000f98 <_ZL4Sendhh>
}
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <_ZL8SendCharh>:

static void SendChar(uint8_t ch)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	2101      	movs	r1, #1
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 f804 	bl	8000f98 <_ZL4Sendhh>
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <_ZL4Sendhh>:

static void Send(uint8_t value, uint8_t mode)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	460a      	mov	r2, r1
 8000fa2:	71fb      	strb	r3, [r7, #7]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	f023 030f 	bic.w	r3, r3, #15
 8000fae:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	011b      	lsls	r3, r3, #4
 8000fb4:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000fb6:	7bfa      	ldrb	r2, [r7, #15]
 8000fb8:	79bb      	ldrb	r3, [r7, #6]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 f80b 	bl	8000fda <_ZL10Write4Bitsh>
  Write4Bits((lownib)|mode);
 8000fc4:	7bba      	ldrb	r2, [r7, #14]
 8000fc6:	79bb      	ldrb	r3, [r7, #6]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f000 f804 	bl	8000fda <_ZL10Write4Bitsh>
}
 8000fd2:	bf00      	nop
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <_ZL10Write4Bitsh>:

static void Write4Bits(uint8_t value)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b082      	sub	sp, #8
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f000 f808 	bl	8000ffc <_ZL13ExpanderWriteh>
  PulseEnable(value);
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 f820 	bl	8001034 <_ZL11PulseEnableh>
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <_ZL13ExpanderWriteh>:

static void ExpanderWrite(uint8_t _data)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af02      	add	r7, sp, #8
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8001006:	4b09      	ldr	r3, [pc, #36]	@ (800102c <_ZL13ExpanderWriteh+0x30>)
 8001008:	781a      	ldrb	r2, [r3, #0]
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	4313      	orrs	r3, r2
 800100e:	b2db      	uxtb	r3, r3
 8001010:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8001012:	f107 020f 	add.w	r2, r7, #15
 8001016:	230a      	movs	r3, #10
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	2301      	movs	r3, #1
 800101c:	214e      	movs	r1, #78	@ 0x4e
 800101e:	4804      	ldr	r0, [pc, #16]	@ (8001030 <_ZL13ExpanderWriteh+0x34>)
 8001020:	f001 fcbc 	bl	800299c <HAL_I2C_Master_Transmit>
}
 8001024:	bf00      	nop
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	2000008c 	.word	0x2000008c
 8001030:	20000090 	.word	0x20000090

08001034 <_ZL11PulseEnableh>:

static void PulseEnable(uint8_t _data)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	f043 0304 	orr.w	r3, r3, #4
 8001044:	b2db      	uxtb	r3, r3
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff ffd8 	bl	8000ffc <_ZL13ExpanderWriteh>
  DelayUS(20);
 800104c:	2014      	movs	r0, #20
 800104e:	f000 f839 	bl	80010c4 <_ZL7DelayUSm>

  ExpanderWrite(_data & ~ENABLE);
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	f023 0304 	bic.w	r3, r3, #4
 8001058:	b2db      	uxtb	r3, r3
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff ffce 	bl	8000ffc <_ZL13ExpanderWriteh>
  DelayUS(20);
 8001060:	2014      	movs	r0, #20
 8001062:	f000 f82f 	bl	80010c4 <_ZL7DelayUSm>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <_ZL9DelayInitv>:

static void DelayInit(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001074:	4b11      	ldr	r3, [pc, #68]	@ (80010bc <_ZL9DelayInitv+0x4c>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	4a10      	ldr	r2, [pc, #64]	@ (80010bc <_ZL9DelayInitv+0x4c>)
 800107a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800107e:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8001080:	4b0e      	ldr	r3, [pc, #56]	@ (80010bc <_ZL9DelayInitv+0x4c>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	4a0d      	ldr	r2, [pc, #52]	@ (80010bc <_ZL9DelayInitv+0x4c>)
 8001086:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800108a:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800108c:	4b0c      	ldr	r3, [pc, #48]	@ (80010c0 <_ZL9DelayInitv+0x50>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a0b      	ldr	r2, [pc, #44]	@ (80010c0 <_ZL9DelayInitv+0x50>)
 8001092:	f023 0301 	bic.w	r3, r3, #1
 8001096:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001098:	4b09      	ldr	r3, [pc, #36]	@ (80010c0 <_ZL9DelayInitv+0x50>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a08      	ldr	r2, [pc, #32]	@ (80010c0 <_ZL9DelayInitv+0x50>)
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80010a4:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <_ZL9DelayInitv+0x50>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80010aa:	bf00      	nop
  __ASM volatile ("NOP");
 80010ac:	bf00      	nop
  __ASM volatile ("NOP");
 80010ae:	bf00      	nop
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000edf0 	.word	0xe000edf0
 80010c0:	e0001000 	.word	0xe0001000

080010c4 <_ZL7DelayUSm>:

static void DelayUS(uint32_t us) {
 80010c4:	b480      	push	{r7}
 80010c6:	b087      	sub	sp, #28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80010cc:	4b10      	ldr	r3, [pc, #64]	@ (8001110 <_ZL7DelayUSm+0x4c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a10      	ldr	r2, [pc, #64]	@ (8001114 <_ZL7DelayUSm+0x50>)
 80010d2:	fba2 2303 	umull	r2, r3, r2, r3
 80010d6:	0c9a      	lsrs	r2, r3, #18
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	fb02 f303 	mul.w	r3, r2, r3
 80010de:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80010e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001118 <_ZL7DelayUSm+0x54>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80010e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001118 <_ZL7DelayUSm+0x54>)
 80010e8:	685a      	ldr	r2, [r3, #4]
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	697a      	ldr	r2, [r7, #20]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	bf8c      	ite	hi
 80010f8:	2301      	movhi	r3, #1
 80010fa:	2300      	movls	r3, #0
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d1f1      	bne.n	80010e6 <_ZL7DelayUSm+0x22>
}
 8001102:	bf00      	nop
 8001104:	bf00      	nop
 8001106:	371c      	adds	r7, #28
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	20000010 	.word	0x20000010
 8001114:	431bde83 	.word	0x431bde83
 8001118:	e0001000 	.word	0xe0001000

0800111c <_Z9toggleEggv>:
int topSteps, linearSteps, tiltSteps;
int dummyValue; // placeholder for unused ranges
char tx_buffer[16];

/*******ingrTogg**************/
void toggleEgg() { /* your toggle logic */ }
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <_Z10toggleBellv>:
void toggleBell() { /* your toggle logic */ }
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0
 800112e:	bf00      	nop
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <_Z13toggleGpepperv>:
void toggleGpepper() { /* your toggle logic */ }
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <_Z12toggleCheesev>:
void toggleCheese() { /* your toggle logic */ }
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0
 800114a:	bf00      	nop
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <_Z9toggleHamv>:
void toggleHam() { /* your toggle logic */ }
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
	...

08001164 <_Z8ingrToggv>:
void ingrTogg()
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
	sprintf(tx_buffer, "%d:%d\n", 1, 1);
 8001168:	2301      	movs	r3, #1
 800116a:	2201      	movs	r2, #1
 800116c:	4908      	ldr	r1, [pc, #32]	@ (8001190 <_Z8ingrToggv+0x2c>)
 800116e:	4809      	ldr	r0, [pc, #36]	@ (8001194 <_Z8ingrToggv+0x30>)
 8001170:	f003 fc46 	bl	8004a00 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)tx_buffer, strlen(tx_buffer), 1000);
 8001174:	4807      	ldr	r0, [pc, #28]	@ (8001194 <_Z8ingrToggv+0x30>)
 8001176:	f7ff f883 	bl	8000280 <strlen>
 800117a:	4603      	mov	r3, r0
 800117c:	b29a      	uxth	r2, r3
 800117e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001182:	4904      	ldr	r1, [pc, #16]	@ (8001194 <_Z8ingrToggv+0x30>)
 8001184:	4804      	ldr	r0, [pc, #16]	@ (8001198 <_Z8ingrToggv+0x34>)
 8001186:	f002 fed1 	bl	8003f2c <HAL_UART_Transmit>
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	080052a4 	.word	0x080052a4
 8001194:	2000014c 	.word	0x2000014c
 8001198:	200000e4 	.word	0x200000e4

0800119c <_Z14updateFunctionv>:


/*******ingrTim**************/
void updateFunction() { /* your update logic */ }
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <_Z9goStepperv>:

/*******stepperMenu**************/
void goStepper() { /* your go logic */ }
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	bf00      	nop
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <_Z13startFunctionv>:

/*******StartCycle**************/
void startFunction() { 
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
sprintf(tx_buffer, "%d:%d\n", 0, 1);
 80011bc:	2301      	movs	r3, #1
 80011be:	2200      	movs	r2, #0
 80011c0:	4908      	ldr	r1, [pc, #32]	@ (80011e4 <_Z13startFunctionv+0x2c>)
 80011c2:	4809      	ldr	r0, [pc, #36]	@ (80011e8 <_Z13startFunctionv+0x30>)
 80011c4:	f003 fc1c 	bl	8004a00 <siprintf>
HAL_UART_Transmit(&huart1, (uint8_t*)tx_buffer, strlen(tx_buffer), 1000);
 80011c8:	4807      	ldr	r0, [pc, #28]	@ (80011e8 <_Z13startFunctionv+0x30>)
 80011ca:	f7ff f859 	bl	8000280 <strlen>
 80011ce:	4603      	mov	r3, r0
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011d6:	4904      	ldr	r1, [pc, #16]	@ (80011e8 <_Z13startFunctionv+0x30>)
 80011d8:	4804      	ldr	r0, [pc, #16]	@ (80011ec <_Z13startFunctionv+0x34>)
 80011da:	f002 fea7 	bl	8003f2c <HAL_UART_Transmit>

/*uint8_t data[] = "Hello world\n";
HAL_UART_Transmit(&huart1, data, 12, 1000);*/
 }
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	080052a4 	.word	0x080052a4
 80011e8:	2000014c 	.word	0x2000014c
 80011ec:	200000e4 	.word	0x200000e4

080011f0 <_ZN10SimpleMenuD1Ev>:
#include <cstring>


char* stringToCharArray(const std::string& input);

class SimpleMenu
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f003 faa5 	bl	800474a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <_Z7displayP10SimpleMenu>:

// Initialize the top-level menu
SimpleMenu TopMenu(4, mainMenu);

void display(SimpleMenu *_menu)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  HD44780_Clear();
 8001214:	f7ff fe08 	bl	8000e28 <_Z13HD44780_Clearv>
  HD44780_SetCursor(0, 0);
 8001218:	2100      	movs	r1, #0
 800121a:	2000      	movs	r0, #0
 800121c:	f7ff fe1a 	bl	8000e54 <_Z17HD44780_SetCursorhh>
  HD44780_PrintStr(">");
 8001220:	4810      	ldr	r0, [pc, #64]	@ (8001264 <_Z7displayP10SimpleMenu+0x58>)
 8001222:	f7ff fe88 	bl	8000f36 <_Z16HD44780_PrintStrPKc>
  HD44780_PrintStr(stringToCharArray(_menu->name));
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff fd5e 	bl	8000cea <_Z17stringToCharArrayRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800122e:	4603      	mov	r3, r0
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff fe80 	bl	8000f36 <_Z16HD44780_PrintStrPKc>

  SimpleMenu *next = TopMenu.next();
 8001236:	480c      	ldr	r0, [pc, #48]	@ (8001268 <_Z7displayP10SimpleMenu+0x5c>)
 8001238:	f7ff fc3e 	bl	8000ab8 <_ZN10SimpleMenu4nextEv>
 800123c:	60f8      	str	r0, [r7, #12]
  if(next != NULL)
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d00b      	beq.n	800125c <_Z7displayP10SimpleMenu+0x50>
  {
    HD44780_SetCursor(0, 1);
 8001244:	2101      	movs	r1, #1
 8001246:	2000      	movs	r0, #0
 8001248:	f7ff fe04 	bl	8000e54 <_Z17HD44780_SetCursorhh>
    HD44780_PrintStr(stringToCharArray(next->name));
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff fd4b 	bl	8000cea <_Z17stringToCharArrayRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001254:	4603      	mov	r3, r0
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff fe6d 	bl	8000f36 <_Z16HD44780_PrintStrPKc>
  }
}
 800125c:	bf00      	nop
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	080052ac 	.word	0x080052ac
 8001268:	2000074c 	.word	0x2000074c

0800126c <_Z12displayValueP10SimpleMenu>:

void displayValue(SimpleMenu *_menu)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  HD44780_Clear();
 8001274:	f7ff fdd8 	bl	8000e28 <_Z13HD44780_Clearv>
  HD44780_SetCursor(0, 0);
 8001278:	2100      	movs	r1, #0
 800127a:	2000      	movs	r0, #0
 800127c:	f7ff fdea 	bl	8000e54 <_Z17HD44780_SetCursorhh>
  HD44780_PrintStr(stringToCharArray(_menu->name));
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff fd31 	bl	8000cea <_Z17stringToCharArrayRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001288:	4603      	mov	r3, r0
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff fe53 	bl	8000f36 <_Z16HD44780_PrintStrPKc>
  HD44780_SetCursor(0, 1);
 8001290:	2101      	movs	r1, #1
 8001292:	2000      	movs	r0, #0
 8001294:	f7ff fdde 	bl	8000e54 <_Z17HD44780_SetCursorhh>
  char valueStr[10];
  sprintf(valueStr, "%d", _menu->getValue());
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff fd19 	bl	8000cd0 <_ZN10SimpleMenu8getValueEv>
 800129e:	4602      	mov	r2, r0
 80012a0:	f107 030c 	add.w	r3, r7, #12
 80012a4:	4906      	ldr	r1, [pc, #24]	@ (80012c0 <_Z12displayValueP10SimpleMenu+0x54>)
 80012a6:	4618      	mov	r0, r3
 80012a8:	f003 fbaa 	bl	8004a00 <siprintf>
  HD44780_PrintStr(valueStr);
 80012ac:	f107 030c 	add.w	r3, r7, #12
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff fe40 	bl	8000f36 <_Z16HD44780_PrintStrPKc>
}
 80012b6:	bf00      	nop
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	080052b0 	.word	0x080052b0

080012c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ca:	f000 ff3f 	bl	800214c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012ce:	f000 f897 	bl	8001400 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012d2:	f000 f96b 	bl	80015ac <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 80012d6:	f000 f907 	bl	80014e8 <_ZL12MX_I2C1_Initv>
  MX_USART1_UART_Init();
 80012da:	f000 f939 	bl	8001550 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */

  HAL_Delay(1000);
 80012de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012e2:	f000 ff75 	bl	80021d0 <HAL_Delay>
  uint8_t data[] = "init\n";
 80012e6:	4a3f      	ldr	r2, [pc, #252]	@ (80013e4 <main+0x120>)
 80012e8:	463b      	mov	r3, r7
 80012ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012ee:	6018      	str	r0, [r3, #0]
 80012f0:	3304      	adds	r3, #4
 80012f2:	8019      	strh	r1, [r3, #0]
  HAL_UART_Transmit(&huart1, data, 5, 1000);
 80012f4:	4639      	mov	r1, r7
 80012f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012fa:	2205      	movs	r2, #5
 80012fc:	483a      	ldr	r0, [pc, #232]	@ (80013e8 <main+0x124>)
 80012fe:	f002 fe15 	bl	8003f2c <HAL_UART_Transmit>
  HAL_Delay(1000);
 8001302:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001306:	f000 ff63 	bl	80021d0 <HAL_Delay>
  HAL_UART_Transmit(&huart1, data, 5, 1000);
 800130a:	4639      	mov	r1, r7
 800130c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001310:	2205      	movs	r2, #5
 8001312:	4835      	ldr	r0, [pc, #212]	@ (80013e8 <main+0x124>)
 8001314:	f002 fe0a 	bl	8003f2c <HAL_UART_Transmit>
  HAL_Delay(1000);
 8001318:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800131c:	f000 ff58 	bl	80021d0 <HAL_Delay>

  HD44780_Init(2);
 8001320:	2002      	movs	r0, #2
 8001322:	f7ff fcfd 	bl	8000d20 <_Z12HD44780_Inith>
  HD44780_Clear();
 8001326:	f7ff fd7f 	bl	8000e28 <_Z13HD44780_Clearv>
  TopMenu.begin(display,displayValue);
 800132a:	4a30      	ldr	r2, [pc, #192]	@ (80013ec <main+0x128>)
 800132c:	4930      	ldr	r1, [pc, #192]	@ (80013f0 <main+0x12c>)
 800132e:	4831      	ldr	r0, [pc, #196]	@ (80013f4 <main+0x130>)
 8001330:	f7ff fa17 	bl	8000762 <_ZN10SimpleMenu5beginEPFvPS_ES2_>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  pinb5 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);   //digital read on STM32
 8001334:	2108      	movs	r1, #8
 8001336:	4830      	ldr	r0, [pc, #192]	@ (80013f8 <main+0x134>)
 8001338:	f001 f9d4 	bl	80026e4 <HAL_GPIO_ReadPin>
 800133c:	4603      	mov	r3, r0
 800133e:	60fb      	str	r3, [r7, #12]
	  pinb6 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);   //digital read on STM32
 8001340:	2110      	movs	r1, #16
 8001342:	482d      	ldr	r0, [pc, #180]	@ (80013f8 <main+0x134>)
 8001344:	f001 f9ce 	bl	80026e4 <HAL_GPIO_ReadPin>
 8001348:	4603      	mov	r3, r0
 800134a:	60bb      	str	r3, [r7, #8]

    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 0)
 800134c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001350:	482a      	ldr	r0, [pc, #168]	@ (80013fc <main+0x138>)
 8001352:	f001 f9c7 	bl	80026e4 <HAL_GPIO_ReadPin>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	bf0c      	ite	eq
 800135c:	2301      	moveq	r3, #1
 800135e:	2300      	movne	r3, #0
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	d02a      	beq.n	80013bc <main+0xf8>
    {
      HAL_Delay(200);
 8001366:	20c8      	movs	r0, #200	@ 0xc8
 8001368:	f000 ff32 	bl	80021d0 <HAL_Delay>
      if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 1)
 800136c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001370:	4822      	ldr	r0, [pc, #136]	@ (80013fc <main+0x138>)
 8001372:	f001 f9b7 	bl	80026e4 <HAL_GPIO_ReadPin>
 8001376:	4603      	mov	r3, r0
 8001378:	2b01      	cmp	r3, #1
 800137a:	bf0c      	ite	eq
 800137c:	2301      	moveq	r3, #1
 800137e:	2300      	movne	r3, #0
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b00      	cmp	r3, #0
 8001384:	d002      	beq.n	800138c <main+0xc8>
      {
        TopMenu.select();
 8001386:	481b      	ldr	r0, [pc, #108]	@ (80013f4 <main+0x130>)
 8001388:	f7ff fa41 	bl	800080e <_ZN10SimpleMenu6selectEv>
      }
      HAL_Delay(300); //Long Press
 800138c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001390:	f000 ff1e 	bl	80021d0 <HAL_Delay>
      if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == 0)
 8001394:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001398:	4818      	ldr	r0, [pc, #96]	@ (80013fc <main+0x138>)
 800139a:	f001 f9a3 	bl	80026e4 <HAL_GPIO_ReadPin>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	bf0c      	ite	eq
 80013a4:	2301      	moveq	r3, #1
 80013a6:	2300      	movne	r3, #0
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d002      	beq.n	80013b4 <main+0xf0>
      {
        TopMenu.back();
 80013ae:	4811      	ldr	r0, [pc, #68]	@ (80013f4 <main+0x130>)
 80013b0:	f7ff faaa 	bl	8000908 <_ZN10SimpleMenu4backEv>
      }
      HAL_Delay(300);
 80013b4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80013b8:	f000 ff0a 	bl	80021d0 <HAL_Delay>
    }
    

    result = Pin_process(pinb5,pinb6);
 80013bc:	68b9      	ldr	r1, [r7, #8]
 80013be:	68f8      	ldr	r0, [r7, #12]
 80013c0:	f000 fc9e 	bl	8001d00 <_Z11Pin_processjj>
 80013c4:	4603      	mov	r3, r0
 80013c6:	71fb      	strb	r3, [r7, #7]
    if (result == DIR_CW) {
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	2b10      	cmp	r3, #16
 80013cc:	d103      	bne.n	80013d6 <main+0x112>
      TopMenu.down();
 80013ce:	4809      	ldr	r0, [pc, #36]	@ (80013f4 <main+0x130>)
 80013d0:	f7ff fb36 	bl	8000a40 <_ZN10SimpleMenu4downEv>
 80013d4:	e7ae      	b.n	8001334 <main+0x70>
    }
    else if (result == DIR_CCW) {
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	2b20      	cmp	r3, #32
 80013da:	d1ab      	bne.n	8001334 <main+0x70>
            TopMenu.up();
 80013dc:	4805      	ldr	r0, [pc, #20]	@ (80013f4 <main+0x130>)
 80013de:	f7ff faf3 	bl	80009c8 <_ZN10SimpleMenu2upEv>
	  pinb5 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);   //digital read on STM32
 80013e2:	e7a7      	b.n	8001334 <main+0x70>
 80013e4:	080052b4 	.word	0x080052b4
 80013e8:	200000e4 	.word	0x200000e4
 80013ec:	0800126d 	.word	0x0800126d
 80013f0:	0800120d 	.word	0x0800120d
 80013f4:	2000074c 	.word	0x2000074c
 80013f8:	40020400 	.word	0x40020400
 80013fc:	40020000 	.word	0x40020000

08001400 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b094      	sub	sp, #80	@ 0x50
 8001404:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001406:	f107 0320 	add.w	r3, r7, #32
 800140a:	2230      	movs	r2, #48	@ 0x30
 800140c:	2100      	movs	r1, #0
 800140e:	4618      	mov	r0, r3
 8001410:	f003 fb30 	bl	8004a74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001414:	f107 030c 	add.w	r3, r7, #12
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001424:	2300      	movs	r3, #0
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	4b2d      	ldr	r3, [pc, #180]	@ (80014e0 <_Z18SystemClock_Configv+0xe0>)
 800142a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142c:	4a2c      	ldr	r2, [pc, #176]	@ (80014e0 <_Z18SystemClock_Configv+0xe0>)
 800142e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001432:	6413      	str	r3, [r2, #64]	@ 0x40
 8001434:	4b2a      	ldr	r3, [pc, #168]	@ (80014e0 <_Z18SystemClock_Configv+0xe0>)
 8001436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001438:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800143c:	60bb      	str	r3, [r7, #8]
 800143e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001440:	2300      	movs	r3, #0
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	4b27      	ldr	r3, [pc, #156]	@ (80014e4 <_Z18SystemClock_Configv+0xe4>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a26      	ldr	r2, [pc, #152]	@ (80014e4 <_Z18SystemClock_Configv+0xe4>)
 800144a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800144e:	6013      	str	r3, [r2, #0]
 8001450:	4b24      	ldr	r3, [pc, #144]	@ (80014e4 <_Z18SystemClock_Configv+0xe4>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001458:	607b      	str	r3, [r7, #4]
 800145a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800145c:	2301      	movs	r3, #1
 800145e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001460:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001464:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001466:	2302      	movs	r3, #2
 8001468:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800146a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800146e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001470:	230c      	movs	r3, #12
 8001472:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001474:	2360      	movs	r3, #96	@ 0x60
 8001476:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001478:	2302      	movs	r3, #2
 800147a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800147c:	2304      	movs	r3, #4
 800147e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001480:	f107 0320 	add.w	r3, r7, #32
 8001484:	4618      	mov	r0, r3
 8001486:	f001 fde3 	bl	8003050 <HAL_RCC_OscConfig>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	bf14      	ite	ne
 8001490:	2301      	movne	r3, #1
 8001492:	2300      	moveq	r3, #0
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 800149a:	f000 f8ff 	bl	800169c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800149e:	230f      	movs	r3, #15
 80014a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014a2:	2302      	movs	r3, #2
 80014a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014a6:	2300      	movs	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80014b4:	f107 030c 	add.w	r3, r7, #12
 80014b8:	2103      	movs	r1, #3
 80014ba:	4618      	mov	r0, r3
 80014bc:	f002 f840 	bl	8003540 <HAL_RCC_ClockConfig>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	bf14      	ite	ne
 80014c6:	2301      	movne	r3, #1
 80014c8:	2300      	moveq	r3, #0
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 80014d0:	f000 f8e4 	bl	800169c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80014d4:	f002 f91a 	bl	800370c <HAL_RCC_EnableCSS>
}
 80014d8:	bf00      	nop
 80014da:	3750      	adds	r7, #80	@ 0x50
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40007000 	.word	0x40007000

080014e8 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014ec:	4b15      	ldr	r3, [pc, #84]	@ (8001544 <_ZL12MX_I2C1_Initv+0x5c>)
 80014ee:	4a16      	ldr	r2, [pc, #88]	@ (8001548 <_ZL12MX_I2C1_Initv+0x60>)
 80014f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014f2:	4b14      	ldr	r3, [pc, #80]	@ (8001544 <_ZL12MX_I2C1_Initv+0x5c>)
 80014f4:	4a15      	ldr	r2, [pc, #84]	@ (800154c <_ZL12MX_I2C1_Initv+0x64>)
 80014f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014f8:	4b12      	ldr	r3, [pc, #72]	@ (8001544 <_ZL12MX_I2C1_Initv+0x5c>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014fe:	4b11      	ldr	r3, [pc, #68]	@ (8001544 <_ZL12MX_I2C1_Initv+0x5c>)
 8001500:	2200      	movs	r2, #0
 8001502:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001504:	4b0f      	ldr	r3, [pc, #60]	@ (8001544 <_ZL12MX_I2C1_Initv+0x5c>)
 8001506:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800150a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800150c:	4b0d      	ldr	r3, [pc, #52]	@ (8001544 <_ZL12MX_I2C1_Initv+0x5c>)
 800150e:	2200      	movs	r2, #0
 8001510:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001512:	4b0c      	ldr	r3, [pc, #48]	@ (8001544 <_ZL12MX_I2C1_Initv+0x5c>)
 8001514:	2200      	movs	r2, #0
 8001516:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001518:	4b0a      	ldr	r3, [pc, #40]	@ (8001544 <_ZL12MX_I2C1_Initv+0x5c>)
 800151a:	2200      	movs	r2, #0
 800151c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800151e:	4b09      	ldr	r3, [pc, #36]	@ (8001544 <_ZL12MX_I2C1_Initv+0x5c>)
 8001520:	2200      	movs	r2, #0
 8001522:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001524:	4807      	ldr	r0, [pc, #28]	@ (8001544 <_ZL12MX_I2C1_Initv+0x5c>)
 8001526:	f001 f8f5 	bl	8002714 <HAL_I2C_Init>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	bf14      	ite	ne
 8001530:	2301      	movne	r3, #1
 8001532:	2300      	moveq	r3, #0
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800153a:	f000 f8af 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000090 	.word	0x20000090
 8001548:	40005400 	.word	0x40005400
 800154c:	000186a0 	.word	0x000186a0

08001550 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001554:	4b13      	ldr	r3, [pc, #76]	@ (80015a4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001556:	4a14      	ldr	r2, [pc, #80]	@ (80015a8 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001558:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800155a:	4b12      	ldr	r3, [pc, #72]	@ (80015a4 <_ZL19MX_USART1_UART_Initv+0x54>)
 800155c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001560:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001562:	4b10      	ldr	r3, [pc, #64]	@ (80015a4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001564:	2200      	movs	r2, #0
 8001566:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001568:	4b0e      	ldr	r3, [pc, #56]	@ (80015a4 <_ZL19MX_USART1_UART_Initv+0x54>)
 800156a:	2200      	movs	r2, #0
 800156c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800156e:	4b0d      	ldr	r3, [pc, #52]	@ (80015a4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001570:	2200      	movs	r2, #0
 8001572:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001574:	4b0b      	ldr	r3, [pc, #44]	@ (80015a4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001576:	220c      	movs	r2, #12
 8001578:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800157a:	4b0a      	ldr	r3, [pc, #40]	@ (80015a4 <_ZL19MX_USART1_UART_Initv+0x54>)
 800157c:	2200      	movs	r2, #0
 800157e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001580:	4b08      	ldr	r3, [pc, #32]	@ (80015a4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001582:	2200      	movs	r2, #0
 8001584:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001586:	4807      	ldr	r0, [pc, #28]	@ (80015a4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001588:	f002 fc80 	bl	8003e8c <HAL_UART_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	bf14      	ite	ne
 8001592:	2301      	movne	r3, #1
 8001594:	2300      	moveq	r3, #0
 8001596:	b2db      	uxtb	r3, r3
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 800159c:	f000 f87e 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	200000e4 	.word	0x200000e4
 80015a8:	40011000 	.word	0x40011000

080015ac <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08a      	sub	sp, #40	@ 0x28
 80015b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b2:	f107 0314 	add.w	r3, r7, #20
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	609a      	str	r2, [r3, #8]
 80015be:	60da      	str	r2, [r3, #12]
 80015c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	613b      	str	r3, [r7, #16]
 80015c6:	4b29      	ldr	r3, [pc, #164]	@ (800166c <_ZL12MX_GPIO_Initv+0xc0>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ca:	4a28      	ldr	r2, [pc, #160]	@ (800166c <_ZL12MX_GPIO_Initv+0xc0>)
 80015cc:	f043 0304 	orr.w	r3, r3, #4
 80015d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015d2:	4b26      	ldr	r3, [pc, #152]	@ (800166c <_ZL12MX_GPIO_Initv+0xc0>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d6:	f003 0304 	and.w	r3, r3, #4
 80015da:	613b      	str	r3, [r7, #16]
 80015dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	4b22      	ldr	r3, [pc, #136]	@ (800166c <_ZL12MX_GPIO_Initv+0xc0>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	4a21      	ldr	r2, [pc, #132]	@ (800166c <_ZL12MX_GPIO_Initv+0xc0>)
 80015e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ee:	4b1f      	ldr	r3, [pc, #124]	@ (800166c <_ZL12MX_GPIO_Initv+0xc0>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	4b1b      	ldr	r3, [pc, #108]	@ (800166c <_ZL12MX_GPIO_Initv+0xc0>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	4a1a      	ldr	r2, [pc, #104]	@ (800166c <_ZL12MX_GPIO_Initv+0xc0>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6313      	str	r3, [r2, #48]	@ 0x30
 800160a:	4b18      	ldr	r3, [pc, #96]	@ (800166c <_ZL12MX_GPIO_Initv+0xc0>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	60bb      	str	r3, [r7, #8]
 8001614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	607b      	str	r3, [r7, #4]
 800161a:	4b14      	ldr	r3, [pc, #80]	@ (800166c <_ZL12MX_GPIO_Initv+0xc0>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	4a13      	ldr	r2, [pc, #76]	@ (800166c <_ZL12MX_GPIO_Initv+0xc0>)
 8001620:	f043 0302 	orr.w	r3, r3, #2
 8001624:	6313      	str	r3, [r2, #48]	@ 0x30
 8001626:	4b11      	ldr	r3, [pc, #68]	@ (800166c <_ZL12MX_GPIO_Initv+0xc0>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	607b      	str	r3, [r7, #4]
 8001630:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001632:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001636:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001638:	2300      	movs	r3, #0
 800163a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800163c:	2301      	movs	r3, #1
 800163e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	4619      	mov	r1, r3
 8001646:	480a      	ldr	r0, [pc, #40]	@ (8001670 <_ZL12MX_GPIO_Initv+0xc4>)
 8001648:	f000 fec8 	bl	80023dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800164c:	2318      	movs	r3, #24
 800164e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001650:	2300      	movs	r3, #0
 8001652:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	4619      	mov	r1, r3
 800165e:	4805      	ldr	r0, [pc, #20]	@ (8001674 <_ZL12MX_GPIO_Initv+0xc8>)
 8001660:	f000 febc 	bl	80023dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001664:	bf00      	nop
 8001666:	3728      	adds	r7, #40	@ 0x28
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40023800 	.word	0x40023800
 8001670:	40020000 	.word	0x40020000
 8001674:	40020400 	.word	0x40020400

08001678 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a04      	ldr	r2, [pc, #16]	@ (8001698 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d101      	bne.n	800168e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800168a:	f000 fd81 	bl	8002190 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40010000 	.word	0x40010000

0800169c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a0:	b672      	cpsid	i
}
 80016a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016a4:	bf00      	nop
 80016a6:	e7fd      	b.n	80016a4 <Error_Handler+0x8>

080016a8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80016a8:	b5b0      	push	{r4, r5, r7, lr}
 80016aa:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 80016ae:	af02      	add	r7, sp, #8
 80016b0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80016b4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80016b8:	6018      	str	r0, [r3, #0]
 80016ba:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80016be:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80016c2:	6019      	str	r1, [r3, #0]
 80016c4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80016c8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	f040 82ac 	bne.w	8001c2c <_Z41__static_initialization_and_destruction_0ii+0x584>
 80016d4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80016d8:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016e2:	4293      	cmp	r3, r2
 80016e4:	f040 82a2 	bne.w	8001c2c <_Z41__static_initialization_and_destruction_0ii+0x584>
};
 80016e8:	4ce9      	ldr	r4, [pc, #932]	@ (8001a90 <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 80016ea:	4625      	mov	r5, r4
 80016ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016f0:	4618      	mov	r0, r3
 80016f2:	f002 ffd9 	bl	80046a8 <_ZNSaIcEC1Ev>
 80016f6:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80016fa:	f107 030c 	add.w	r3, r7, #12
 80016fe:	49e5      	ldr	r1, [pc, #916]	@ (8001a94 <_Z41__static_initialization_and_destruction_0ii+0x3ec>)
 8001700:	4618      	mov	r0, r3
 8001702:	f003 f87b 	bl	80047fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001706:	f107 030c 	add.w	r3, r7, #12
 800170a:	4ae3      	ldr	r2, [pc, #908]	@ (8001a98 <_Z41__static_initialization_and_destruction_0ii+0x3f0>)
 800170c:	4619      	mov	r1, r3
 800170e:	4628      	mov	r0, r5
 8001710:	f7fe ffee 	bl	80006f0 <_ZN10SimpleMenuC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvvE>
 8001714:	3450      	adds	r4, #80	@ 0x50
 8001716:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800171a:	4618      	mov	r0, r3
 800171c:	f002 ffc4 	bl	80046a8 <_ZNSaIcEC1Ev>
 8001720:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001724:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001728:	49dc      	ldr	r1, [pc, #880]	@ (8001a9c <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 800172a:	4618      	mov	r0, r3
 800172c:	f003 f866 	bl	80047fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001730:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001734:	233c      	movs	r3, #60	@ 0x3c
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	2300      	movs	r3, #0
 800173a:	4ad9      	ldr	r2, [pc, #868]	@ (8001aa0 <_Z41__static_initialization_and_destruction_0ii+0x3f8>)
 800173c:	4620      	mov	r0, r4
 800173e:	f7fe ff93 	bl	8000668 <_ZN10SimpleMenuC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPiii>
 8001742:	3450      	adds	r4, #80	@ 0x50
 8001744:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001748:	4618      	mov	r0, r3
 800174a:	f002 ffad 	bl	80046a8 <_ZNSaIcEC1Ev>
 800174e:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8001752:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001756:	49d3      	ldr	r1, [pc, #844]	@ (8001aa4 <_Z41__static_initialization_and_destruction_0ii+0x3fc>)
 8001758:	4618      	mov	r0, r3
 800175a:	f003 f84f 	bl	80047fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800175e:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8001762:	233c      	movs	r3, #60	@ 0x3c
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	2300      	movs	r3, #0
 8001768:	4acf      	ldr	r2, [pc, #828]	@ (8001aa8 <_Z41__static_initialization_and_destruction_0ii+0x400>)
 800176a:	4620      	mov	r0, r4
 800176c:	f7fe ff7c 	bl	8000668 <_ZN10SimpleMenuC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPiii>
 8001770:	3450      	adds	r4, #80	@ 0x50
 8001772:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001776:	4618      	mov	r0, r3
 8001778:	f002 ff96 	bl	80046a8 <_ZNSaIcEC1Ev>
 800177c:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8001780:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001784:	49c9      	ldr	r1, [pc, #804]	@ (8001aac <_Z41__static_initialization_and_destruction_0ii+0x404>)
 8001786:	4618      	mov	r0, r3
 8001788:	f003 f838 	bl	80047fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800178c:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8001790:	233c      	movs	r3, #60	@ 0x3c
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	2300      	movs	r3, #0
 8001796:	4ac6      	ldr	r2, [pc, #792]	@ (8001ab0 <_Z41__static_initialization_and_destruction_0ii+0x408>)
 8001798:	4620      	mov	r0, r4
 800179a:	f7fe ff65 	bl	8000668 <_ZN10SimpleMenuC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPiii>
 800179e:	3450      	adds	r4, #80	@ 0x50
 80017a0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80017a4:	4618      	mov	r0, r3
 80017a6:	f002 ff7f 	bl	80046a8 <_ZNSaIcEC1Ev>
 80017aa:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 80017ae:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80017b2:	49c0      	ldr	r1, [pc, #768]	@ (8001ab4 <_Z41__static_initialization_and_destruction_0ii+0x40c>)
 80017b4:	4618      	mov	r0, r3
 80017b6:	f003 f821 	bl	80047fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80017ba:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 80017be:	233c      	movs	r3, #60	@ 0x3c
 80017c0:	9300      	str	r3, [sp, #0]
 80017c2:	2300      	movs	r3, #0
 80017c4:	4abc      	ldr	r2, [pc, #752]	@ (8001ab8 <_Z41__static_initialization_and_destruction_0ii+0x410>)
 80017c6:	4620      	mov	r0, r4
 80017c8:	f7fe ff4e 	bl	8000668 <_ZN10SimpleMenuC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPiii>
 80017cc:	3450      	adds	r4, #80	@ 0x50
 80017ce:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 80017d2:	4618      	mov	r0, r3
 80017d4:	f002 ff68 	bl	80046a8 <_ZNSaIcEC1Ev>
 80017d8:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 80017dc:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80017e0:	49b6      	ldr	r1, [pc, #728]	@ (8001abc <_Z41__static_initialization_and_destruction_0ii+0x414>)
 80017e2:	4618      	mov	r0, r3
 80017e4:	f003 f80a 	bl	80047fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80017e8:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 80017ec:	233c      	movs	r3, #60	@ 0x3c
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	2300      	movs	r3, #0
 80017f2:	4ab3      	ldr	r2, [pc, #716]	@ (8001ac0 <_Z41__static_initialization_and_destruction_0ii+0x418>)
 80017f4:	4620      	mov	r0, r4
 80017f6:	f7fe ff37 	bl	8000668 <_ZN10SimpleMenuC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPiii>
 80017fa:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80017fe:	4618      	mov	r0, r3
 8001800:	f002 ffa3 	bl	800474a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001804:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8001808:	4618      	mov	r0, r3
 800180a:	f002 ff4e 	bl	80046aa <_ZNSaIcED1Ev>
 800180e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001812:	4618      	mov	r0, r3
 8001814:	f002 ff99 	bl	800474a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001818:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800181c:	4618      	mov	r0, r3
 800181e:	f002 ff44 	bl	80046aa <_ZNSaIcED1Ev>
 8001822:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001826:	4618      	mov	r0, r3
 8001828:	f002 ff8f 	bl	800474a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800182c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001830:	4618      	mov	r0, r3
 8001832:	f002 ff3a 	bl	80046aa <_ZNSaIcED1Ev>
 8001836:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800183a:	4618      	mov	r0, r3
 800183c:	f002 ff85 	bl	800474a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001840:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001844:	4618      	mov	r0, r3
 8001846:	f002 ff30 	bl	80046aa <_ZNSaIcED1Ev>
 800184a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800184e:	4618      	mov	r0, r3
 8001850:	f002 ff7b 	bl	800474a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001854:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001858:	4618      	mov	r0, r3
 800185a:	f002 ff26 	bl	80046aa <_ZNSaIcED1Ev>
 800185e:	f107 030c 	add.w	r3, r7, #12
 8001862:	4618      	mov	r0, r3
 8001864:	f002 ff71 	bl	800474a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001868:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800186c:	4618      	mov	r0, r3
 800186e:	f002 ff1c 	bl	80046aa <_ZNSaIcED1Ev>
};
 8001872:	4c94      	ldr	r4, [pc, #592]	@ (8001ac4 <_Z41__static_initialization_and_destruction_0ii+0x41c>)
 8001874:	4625      	mov	r5, r4
 8001876:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800187a:	4618      	mov	r0, r3
 800187c:	f002 ff14 	bl	80046a8 <_ZNSaIcEC1Ev>
 8001880:	f107 02cc 	add.w	r2, r7, #204	@ 0xcc
 8001884:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001888:	4984      	ldr	r1, [pc, #528]	@ (8001a9c <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 800188a:	4618      	mov	r0, r3
 800188c:	f002 ffb6 	bl	80047fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001890:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001894:	4a8c      	ldr	r2, [pc, #560]	@ (8001ac8 <_Z41__static_initialization_and_destruction_0ii+0x420>)
 8001896:	4619      	mov	r1, r3
 8001898:	4628      	mov	r0, r5
 800189a:	f7fe ff29 	bl	80006f0 <_ZN10SimpleMenuC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvvE>
 800189e:	3450      	adds	r4, #80	@ 0x50
 80018a0:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 80018a4:	4618      	mov	r0, r3
 80018a6:	f002 feff 	bl	80046a8 <_ZNSaIcEC1Ev>
 80018aa:	f107 02e8 	add.w	r2, r7, #232	@ 0xe8
 80018ae:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80018b2:	497c      	ldr	r1, [pc, #496]	@ (8001aa4 <_Z41__static_initialization_and_destruction_0ii+0x3fc>)
 80018b4:	4618      	mov	r0, r3
 80018b6:	f002 ffa1 	bl	80047fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80018ba:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80018be:	4a83      	ldr	r2, [pc, #524]	@ (8001acc <_Z41__static_initialization_and_destruction_0ii+0x424>)
 80018c0:	4619      	mov	r1, r3
 80018c2:	4620      	mov	r0, r4
 80018c4:	f7fe ff14 	bl	80006f0 <_ZN10SimpleMenuC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvvE>
 80018c8:	3450      	adds	r4, #80	@ 0x50
 80018ca:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80018ce:	4618      	mov	r0, r3
 80018d0:	f002 feea 	bl	80046a8 <_ZNSaIcEC1Ev>
 80018d4:	f507 7282 	add.w	r2, r7, #260	@ 0x104
 80018d8:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80018dc:	4973      	ldr	r1, [pc, #460]	@ (8001aac <_Z41__static_initialization_and_destruction_0ii+0x404>)
 80018de:	4618      	mov	r0, r3
 80018e0:	f002 ff8c 	bl	80047fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80018e4:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80018e8:	4a79      	ldr	r2, [pc, #484]	@ (8001ad0 <_Z41__static_initialization_and_destruction_0ii+0x428>)
 80018ea:	4619      	mov	r1, r3
 80018ec:	4620      	mov	r0, r4
 80018ee:	f7fe feff 	bl	80006f0 <_ZN10SimpleMenuC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvvE>
 80018f2:	3450      	adds	r4, #80	@ 0x50
 80018f4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80018f8:	4618      	mov	r0, r3
 80018fa:	f002 fed5 	bl	80046a8 <_ZNSaIcEC1Ev>
 80018fe:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001902:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001906:	496b      	ldr	r1, [pc, #428]	@ (8001ab4 <_Z41__static_initialization_and_destruction_0ii+0x40c>)
 8001908:	4618      	mov	r0, r3
 800190a:	f002 ff77 	bl	80047fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800190e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001912:	4a70      	ldr	r2, [pc, #448]	@ (8001ad4 <_Z41__static_initialization_and_destruction_0ii+0x42c>)
 8001914:	4619      	mov	r1, r3
 8001916:	4620      	mov	r0, r4
 8001918:	f7fe feea 	bl	80006f0 <_ZN10SimpleMenuC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvvE>
 800191c:	3450      	adds	r4, #80	@ 0x50
 800191e:	f507 739e 	add.w	r3, r7, #316	@ 0x13c
 8001922:	4618      	mov	r0, r3
 8001924:	f002 fec0 	bl	80046a8 <_ZNSaIcEC1Ev>
 8001928:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 800192c:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001930:	4962      	ldr	r1, [pc, #392]	@ (8001abc <_Z41__static_initialization_and_destruction_0ii+0x414>)
 8001932:	4618      	mov	r0, r3
 8001934:	f002 ff62 	bl	80047fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001938:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 800193c:	4a66      	ldr	r2, [pc, #408]	@ (8001ad8 <_Z41__static_initialization_and_destruction_0ii+0x430>)
 800193e:	4619      	mov	r1, r3
 8001940:	4620      	mov	r0, r4
 8001942:	f7fe fed5 	bl	80006f0 <_ZN10SimpleMenuC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvvE>
 8001946:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 800194a:	4618      	mov	r0, r3
 800194c:	f002 fefd 	bl	800474a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001950:	f507 739e 	add.w	r3, r7, #316	@ 0x13c
 8001954:	4618      	mov	r0, r3
 8001956:	f002 fea8 	bl	80046aa <_ZNSaIcED1Ev>
 800195a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800195e:	4618      	mov	r0, r3
 8001960:	f002 fef3 	bl	800474a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001964:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001968:	4618      	mov	r0, r3
 800196a:	f002 fe9e 	bl	80046aa <_ZNSaIcED1Ev>
 800196e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001972:	4618      	mov	r0, r3
 8001974:	f002 fee9 	bl	800474a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001978:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800197c:	4618      	mov	r0, r3
 800197e:	f002 fe94 	bl	80046aa <_ZNSaIcED1Ev>
 8001982:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001986:	4618      	mov	r0, r3
 8001988:	f002 fedf 	bl	800474a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800198c:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8001990:	4618      	mov	r0, r3
 8001992:	f002 fe8a 	bl	80046aa <_ZNSaIcED1Ev>
 8001996:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800199a:	4618      	mov	r0, r3
 800199c:	f002 fed5 	bl	800474a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80019a0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80019a4:	4618      	mov	r0, r3
 80019a6:	f002 fe80 	bl	80046aa <_ZNSaIcED1Ev>
};
 80019aa:	4c4c      	ldr	r4, [pc, #304]	@ (8001adc <_Z41__static_initialization_and_destruction_0ii+0x434>)
 80019ac:	4625      	mov	r5, r4
 80019ae:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80019b2:	4618      	mov	r0, r3
 80019b4:	f002 fe78 	bl	80046a8 <_ZNSaIcEC1Ev>
 80019b8:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 80019bc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80019c0:	4947      	ldr	r1, [pc, #284]	@ (8001ae0 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 80019c2:	4618      	mov	r0, r3
 80019c4:	f002 ff1a 	bl	80047fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80019c8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80019cc:	4a45      	ldr	r2, [pc, #276]	@ (8001ae4 <_Z41__static_initialization_and_destruction_0ii+0x43c>)
 80019ce:	4619      	mov	r1, r3
 80019d0:	4628      	mov	r0, r5
 80019d2:	f7fe fe8d 	bl	80006f0 <_ZN10SimpleMenuC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvvE>
 80019d6:	3450      	adds	r4, #80	@ 0x50
 80019d8:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 80019dc:	4618      	mov	r0, r3
 80019de:	f002 fe63 	bl	80046a8 <_ZNSaIcEC1Ev>
 80019e2:	f507 72ba 	add.w	r2, r7, #372	@ 0x174
 80019e6:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 80019ea:	493f      	ldr	r1, [pc, #252]	@ (8001ae8 <_Z41__static_initialization_and_destruction_0ii+0x440>)
 80019ec:	4618      	mov	r0, r3
 80019ee:	f002 ff05 	bl	80047fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80019f2:	f507 71ae 	add.w	r1, r7, #348	@ 0x15c
 80019f6:	2332      	movs	r3, #50	@ 0x32
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	f06f 0331 	mvn.w	r3, #49	@ 0x31
 80019fe:	4a3b      	ldr	r2, [pc, #236]	@ (8001aec <_Z41__static_initialization_and_destruction_0ii+0x444>)
 8001a00:	4620      	mov	r0, r4
 8001a02:	f7fe fe31 	bl	8000668 <_ZN10SimpleMenuC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPiii>
 8001a06:	3450      	adds	r4, #80	@ 0x50
 8001a08:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f002 fe4b 	bl	80046a8 <_ZNSaIcEC1Ev>
 8001a12:	f507 72c8 	add.w	r2, r7, #400	@ 0x190
 8001a16:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001a1a:	4935      	ldr	r1, [pc, #212]	@ (8001af0 <_Z41__static_initialization_and_destruction_0ii+0x448>)
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f002 feed 	bl	80047fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001a22:	f507 71bc 	add.w	r1, r7, #376	@ 0x178
 8001a26:	2364      	movs	r3, #100	@ 0x64
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	f06f 0331 	mvn.w	r3, #49	@ 0x31
 8001a2e:	4a31      	ldr	r2, [pc, #196]	@ (8001af4 <_Z41__static_initialization_and_destruction_0ii+0x44c>)
 8001a30:	4620      	mov	r0, r4
 8001a32:	f7fe fe19 	bl	8000668 <_ZN10SimpleMenuC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPiii>
 8001a36:	3450      	adds	r4, #80	@ 0x50
 8001a38:	f507 73d6 	add.w	r3, r7, #428	@ 0x1ac
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f002 fe33 	bl	80046a8 <_ZNSaIcEC1Ev>
 8001a42:	f507 72d6 	add.w	r2, r7, #428	@ 0x1ac
 8001a46:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 8001a4a:	492b      	ldr	r1, [pc, #172]	@ (8001af8 <_Z41__static_initialization_and_destruction_0ii+0x450>)
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f002 fed5 	bl	80047fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001a52:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001a56:	2332      	movs	r3, #50	@ 0x32
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	f06f 0331 	mvn.w	r3, #49	@ 0x31
 8001a5e:	4a27      	ldr	r2, [pc, #156]	@ (8001afc <_Z41__static_initialization_and_destruction_0ii+0x454>)
 8001a60:	4620      	mov	r0, r4
 8001a62:	f7fe fe01 	bl	8000668 <_ZN10SimpleMenuC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPiii>
 8001a66:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f002 fe6d 	bl	800474a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001a70:	f507 73d6 	add.w	r3, r7, #428	@ 0x1ac
 8001a74:	4618      	mov	r0, r3
 8001a76:	f002 fe18 	bl	80046aa <_ZNSaIcED1Ev>
 8001a7a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f002 fe63 	bl	800474a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001a84:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f002 fe0e 	bl	80046aa <_ZNSaIcED1Ev>
 8001a8e:	e037      	b.n	8001b00 <_Z41__static_initialization_and_destruction_0ii+0x458>
 8001a90:	2000015c 	.word	0x2000015c
 8001a94:	080052bc 	.word	0x080052bc
 8001a98:	0800119d 	.word	0x0800119d
 8001a9c:	080052c4 	.word	0x080052c4
 8001aa0:	2000012c 	.word	0x2000012c
 8001aa4:	080052c8 	.word	0x080052c8
 8001aa8:	20000130 	.word	0x20000130
 8001aac:	080052d0 	.word	0x080052d0
 8001ab0:	20000134 	.word	0x20000134
 8001ab4:	080052d8 	.word	0x080052d8
 8001ab8:	20000138 	.word	0x20000138
 8001abc:	080052e0 	.word	0x080052e0
 8001ac0:	2000013c 	.word	0x2000013c
 8001ac4:	2000033c 	.word	0x2000033c
 8001ac8:	0800111d 	.word	0x0800111d
 8001acc:	0800112b 	.word	0x0800112b
 8001ad0:	08001139 	.word	0x08001139
 8001ad4:	08001147 	.word	0x08001147
 8001ad8:	08001155 	.word	0x08001155
 8001adc:	200004cc 	.word	0x200004cc
 8001ae0:	080052e4 	.word	0x080052e4
 8001ae4:	080011ab 	.word	0x080011ab
 8001ae8:	080052e8 	.word	0x080052e8
 8001aec:	20000140 	.word	0x20000140
 8001af0:	080052ec 	.word	0x080052ec
 8001af4:	20000144 	.word	0x20000144
 8001af8:	080052f4 	.word	0x080052f4
 8001afc:	20000148 	.word	0x20000148
 8001b00:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 8001b04:	4618      	mov	r0, r3
 8001b06:	f002 fe20 	bl	800474a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001b0a:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f002 fdcb 	bl	80046aa <_ZNSaIcED1Ev>
 8001b14:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f002 fe16 	bl	800474a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001b1e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001b22:	4618      	mov	r0, r3
 8001b24:	f002 fdc1 	bl	80046aa <_ZNSaIcED1Ev>
};
 8001b28:	4c5e      	ldr	r4, [pc, #376]	@ (8001ca4 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 8001b2a:	4625      	mov	r5, r4
 8001b2c:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8001b30:	4618      	mov	r0, r3
 8001b32:	f002 fdb9 	bl	80046a8 <_ZNSaIcEC1Ev>
 8001b36:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 8001b3a:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8001b3e:	495a      	ldr	r1, [pc, #360]	@ (8001ca8 <_Z41__static_initialization_and_destruction_0ii+0x600>)
 8001b40:	4618      	mov	r0, r3
 8001b42:	f002 fe5b 	bl	80047fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001b46:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8001b4a:	4a58      	ldr	r2, [pc, #352]	@ (8001cac <_Z41__static_initialization_and_destruction_0ii+0x604>)
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4628      	mov	r0, r5
 8001b50:	f7fe fdce 	bl	80006f0 <_ZN10SimpleMenuC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvvE>
 8001b54:	3450      	adds	r4, #80	@ 0x50
 8001b56:	f507 73f2 	add.w	r3, r7, #484	@ 0x1e4
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f002 fda4 	bl	80046a8 <_ZNSaIcEC1Ev>
 8001b60:	f507 72f2 	add.w	r2, r7, #484	@ 0x1e4
 8001b64:	f507 73e6 	add.w	r3, r7, #460	@ 0x1cc
 8001b68:	4951      	ldr	r1, [pc, #324]	@ (8001cb0 <_Z41__static_initialization_and_destruction_0ii+0x608>)
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f002 fe46 	bl	80047fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001b70:	f507 73e6 	add.w	r3, r7, #460	@ 0x1cc
 8001b74:	4a4f      	ldr	r2, [pc, #316]	@ (8001cb4 <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 8001b76:	4619      	mov	r1, r3
 8001b78:	4620      	mov	r0, r4
 8001b7a:	f7fe fdb9 	bl	80006f0 <_ZN10SimpleMenuC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvvE>
 8001b7e:	3450      	adds	r4, #80	@ 0x50
 8001b80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b84:	4618      	mov	r0, r3
 8001b86:	f002 fd8f 	bl	80046a8 <_ZNSaIcEC1Ev>
 8001b8a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b8e:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8001b92:	4949      	ldr	r1, [pc, #292]	@ (8001cb8 <_Z41__static_initialization_and_destruction_0ii+0x610>)
 8001b94:	4618      	mov	r0, r3
 8001b96:	f002 fe31 	bl	80047fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001b9a:	f507 71f4 	add.w	r1, r7, #488	@ 0x1e8
 8001b9e:	4b47      	ldr	r3, [pc, #284]	@ (8001cbc <_Z41__static_initialization_and_destruction_0ii+0x614>)
 8001ba0:	2206      	movs	r2, #6
 8001ba2:	4620      	mov	r0, r4
 8001ba4:	f7fe fd23 	bl	80005ee <_ZN10SimpleMenuC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiPS_>
 8001ba8:	3450      	adds	r4, #80	@ 0x50
 8001baa:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f002 fd7a 	bl	80046a8 <_ZNSaIcEC1Ev>
 8001bb4:	f507 7207 	add.w	r2, r7, #540	@ 0x21c
 8001bb8:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8001bbc:	4940      	ldr	r1, [pc, #256]	@ (8001cc0 <_Z41__static_initialization_and_destruction_0ii+0x618>)
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f002 fe1c 	bl	80047fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001bc4:	f507 7101 	add.w	r1, r7, #516	@ 0x204
 8001bc8:	4b3e      	ldr	r3, [pc, #248]	@ (8001cc4 <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 8001bca:	2204      	movs	r2, #4
 8001bcc:	4620      	mov	r0, r4
 8001bce:	f7fe fd0e 	bl	80005ee <_ZN10SimpleMenuC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiPS_>
 8001bd2:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f002 fdb7 	bl	800474a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001bdc:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
 8001be0:	4618      	mov	r0, r3
 8001be2:	f002 fd62 	bl	80046aa <_ZNSaIcED1Ev>
 8001be6:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8001bea:	4618      	mov	r0, r3
 8001bec:	f002 fdad 	bl	800474a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001bf0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f002 fd58 	bl	80046aa <_ZNSaIcED1Ev>
 8001bfa:	f507 73e6 	add.w	r3, r7, #460	@ 0x1cc
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f002 fda3 	bl	800474a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001c04:	f507 73f2 	add.w	r3, r7, #484	@ 0x1e4
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f002 fd4e 	bl	80046aa <_ZNSaIcED1Ev>
 8001c0e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8001c12:	4618      	mov	r0, r3
 8001c14:	f002 fd99 	bl	800474a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001c18:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f002 fd44 	bl	80046aa <_ZNSaIcED1Ev>
SimpleMenu TopMenu(4, mainMenu);
 8001c22:	4a20      	ldr	r2, [pc, #128]	@ (8001ca4 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 8001c24:	2104      	movs	r1, #4
 8001c26:	4828      	ldr	r0, [pc, #160]	@ (8001cc8 <_Z41__static_initialization_and_destruction_0ii+0x620>)
 8001c28:	f7fe fcaa 	bl	8000580 <_ZN10SimpleMenuC1EiPS_>
 8001c2c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001c30:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d12f      	bne.n	8001c9a <_Z41__static_initialization_and_destruction_0ii+0x5f2>
 8001c3a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001c3e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d126      	bne.n	8001c9a <_Z41__static_initialization_and_destruction_0ii+0x5f2>
 8001c4c:	481e      	ldr	r0, [pc, #120]	@ (8001cc8 <_Z41__static_initialization_and_destruction_0ii+0x620>)
 8001c4e:	f7ff facf 	bl	80011f0 <_ZN10SimpleMenuD1Ev>
SimpleMenu mainMenu[] = {
 8001c52:	4c1e      	ldr	r4, [pc, #120]	@ (8001ccc <_Z41__static_initialization_and_destruction_0ii+0x624>)
 8001c54:	4b13      	ldr	r3, [pc, #76]	@ (8001ca4 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 8001c56:	429c      	cmp	r4, r3
 8001c58:	d004      	beq.n	8001c64 <_Z41__static_initialization_and_destruction_0ii+0x5bc>
 8001c5a:	3c50      	subs	r4, #80	@ 0x50
 8001c5c:	4620      	mov	r0, r4
 8001c5e:	f7ff fac7 	bl	80011f0 <_ZN10SimpleMenuD1Ev>
 8001c62:	e7f7      	b.n	8001c54 <_Z41__static_initialization_and_destruction_0ii+0x5ac>
SimpleMenu stepperMenu[4] = {
 8001c64:	4c1a      	ldr	r4, [pc, #104]	@ (8001cd0 <_Z41__static_initialization_and_destruction_0ii+0x628>)
 8001c66:	4b17      	ldr	r3, [pc, #92]	@ (8001cc4 <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 8001c68:	429c      	cmp	r4, r3
 8001c6a:	d004      	beq.n	8001c76 <_Z41__static_initialization_and_destruction_0ii+0x5ce>
 8001c6c:	3c50      	subs	r4, #80	@ 0x50
 8001c6e:	4620      	mov	r0, r4
 8001c70:	f7ff fabe 	bl	80011f0 <_ZN10SimpleMenuD1Ev>
 8001c74:	e7f7      	b.n	8001c66 <_Z41__static_initialization_and_destruction_0ii+0x5be>
SimpleMenu ingrToggMenu[5] = {
 8001c76:	4c17      	ldr	r4, [pc, #92]	@ (8001cd4 <_Z41__static_initialization_and_destruction_0ii+0x62c>)
 8001c78:	4b17      	ldr	r3, [pc, #92]	@ (8001cd8 <_Z41__static_initialization_and_destruction_0ii+0x630>)
 8001c7a:	429c      	cmp	r4, r3
 8001c7c:	d004      	beq.n	8001c88 <_Z41__static_initialization_and_destruction_0ii+0x5e0>
 8001c7e:	3c50      	subs	r4, #80	@ 0x50
 8001c80:	4620      	mov	r0, r4
 8001c82:	f7ff fab5 	bl	80011f0 <_ZN10SimpleMenuD1Ev>
 8001c86:	e7f7      	b.n	8001c78 <_Z41__static_initialization_and_destruction_0ii+0x5d0>
SimpleMenu ingrTimMenu[6] = {
 8001c88:	4c14      	ldr	r4, [pc, #80]	@ (8001cdc <_Z41__static_initialization_and_destruction_0ii+0x634>)
 8001c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8001cbc <_Z41__static_initialization_and_destruction_0ii+0x614>)
 8001c8c:	429c      	cmp	r4, r3
 8001c8e:	d004      	beq.n	8001c9a <_Z41__static_initialization_and_destruction_0ii+0x5f2>
 8001c90:	3c50      	subs	r4, #80	@ 0x50
 8001c92:	4620      	mov	r0, r4
 8001c94:	f7ff faac 	bl	80011f0 <_ZN10SimpleMenuD1Ev>
 8001c98:	e7f7      	b.n	8001c8a <_Z41__static_initialization_and_destruction_0ii+0x5e2>
}
 8001c9a:	bf00      	nop
 8001c9c:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ca4:	2000060c 	.word	0x2000060c
 8001ca8:	080052fc 	.word	0x080052fc
 8001cac:	080011b9 	.word	0x080011b9
 8001cb0:	08005304 	.word	0x08005304
 8001cb4:	08001165 	.word	0x08001165
 8001cb8:	08005310 	.word	0x08005310
 8001cbc:	2000015c 	.word	0x2000015c
 8001cc0:	0800531c 	.word	0x0800531c
 8001cc4:	200004cc 	.word	0x200004cc
 8001cc8:	2000074c 	.word	0x2000074c
 8001ccc:	2000074c 	.word	0x2000074c
 8001cd0:	2000060c 	.word	0x2000060c
 8001cd4:	200004cc 	.word	0x200004cc
 8001cd8:	2000033c 	.word	0x2000033c
 8001cdc:	2000033c 	.word	0x2000033c

08001ce0 <_GLOBAL__sub_I_hi2c1>:
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001ce8:	2001      	movs	r0, #1
 8001cea:	f7ff fcdd 	bl	80016a8 <_Z41__static_initialization_and_destruction_0ii>
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <_GLOBAL__sub_D_hi2c1>:
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	f7ff fcd5 	bl	80016a8 <_Z41__static_initialization_and_destruction_0ii>
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <_Z11Pin_processjj>:
};
#endif

unsigned int state = R_START;

unsigned char Pin_process(unsigned int _pin1,unsigned int  _pin2) {
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  // Grab state of input pins.
  unsigned char pinstate = (_pin2 << 1) | _pin1;
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	4313      	orrs	r3, r2
 8001d18:	73fb      	strb	r3, [r7, #15]
  // Determine new state from the pins and state table.
  state = ttable[state & 0xf][pinstate];
 8001d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d4c <_Z11Pin_processjj+0x4c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 020f 	and.w	r2, r3, #15
 8001d22:	7bfb      	ldrb	r3, [r7, #15]
 8001d24:	490a      	ldr	r1, [pc, #40]	@ (8001d50 <_Z11Pin_processjj+0x50>)
 8001d26:	0092      	lsls	r2, r2, #2
 8001d28:	440a      	add	r2, r1
 8001d2a:	4413      	add	r3, r2
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	4b06      	ldr	r3, [pc, #24]	@ (8001d4c <_Z11Pin_processjj+0x4c>)
 8001d32:	601a      	str	r2, [r3, #0]
  // Return emit bits, ie the generated event.
  return state & 0x30;
 8001d34:	4b05      	ldr	r3, [pc, #20]	@ (8001d4c <_Z11Pin_processjj+0x4c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001d3e:	b2db      	uxtb	r3, r3
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	2000079c 	.word	0x2000079c
 8001d50:	08005324 	.word	0x08005324

08001d54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	607b      	str	r3, [r7, #4]
 8001d5e:	4b10      	ldr	r3, [pc, #64]	@ (8001da0 <HAL_MspInit+0x4c>)
 8001d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d62:	4a0f      	ldr	r2, [pc, #60]	@ (8001da0 <HAL_MspInit+0x4c>)
 8001d64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d68:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001da0 <HAL_MspInit+0x4c>)
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d72:	607b      	str	r3, [r7, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	603b      	str	r3, [r7, #0]
 8001d7a:	4b09      	ldr	r3, [pc, #36]	@ (8001da0 <HAL_MspInit+0x4c>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7e:	4a08      	ldr	r2, [pc, #32]	@ (8001da0 <HAL_MspInit+0x4c>)
 8001d80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d84:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d86:	4b06      	ldr	r3, [pc, #24]	@ (8001da0 <HAL_MspInit+0x4c>)
 8001d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d8e:	603b      	str	r3, [r7, #0]
 8001d90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	40023800 	.word	0x40023800

08001da4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08a      	sub	sp, #40	@ 0x28
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dac:	f107 0314 	add.w	r3, r7, #20
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]
 8001dba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a19      	ldr	r2, [pc, #100]	@ (8001e28 <HAL_I2C_MspInit+0x84>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d12b      	bne.n	8001e1e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	613b      	str	r3, [r7, #16]
 8001dca:	4b18      	ldr	r3, [pc, #96]	@ (8001e2c <HAL_I2C_MspInit+0x88>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dce:	4a17      	ldr	r2, [pc, #92]	@ (8001e2c <HAL_I2C_MspInit+0x88>)
 8001dd0:	f043 0302 	orr.w	r3, r3, #2
 8001dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dd6:	4b15      	ldr	r3, [pc, #84]	@ (8001e2c <HAL_I2C_MspInit+0x88>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	613b      	str	r3, [r7, #16]
 8001de0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001de2:	23c0      	movs	r3, #192	@ 0xc0
 8001de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001de6:	2312      	movs	r3, #18
 8001de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dee:	2303      	movs	r3, #3
 8001df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001df2:	2304      	movs	r3, #4
 8001df4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df6:	f107 0314 	add.w	r3, r7, #20
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	480c      	ldr	r0, [pc, #48]	@ (8001e30 <HAL_I2C_MspInit+0x8c>)
 8001dfe:	f000 faed 	bl	80023dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	4b09      	ldr	r3, [pc, #36]	@ (8001e2c <HAL_I2C_MspInit+0x88>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0a:	4a08      	ldr	r2, [pc, #32]	@ (8001e2c <HAL_I2C_MspInit+0x88>)
 8001e0c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e10:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e12:	4b06      	ldr	r3, [pc, #24]	@ (8001e2c <HAL_I2C_MspInit+0x88>)
 8001e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001e1e:	bf00      	nop
 8001e20:	3728      	adds	r7, #40	@ 0x28
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40005400 	.word	0x40005400
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	40020400 	.word	0x40020400

08001e34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08a      	sub	sp, #40	@ 0x28
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3c:	f107 0314 	add.w	r3, r7, #20
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a19      	ldr	r2, [pc, #100]	@ (8001eb8 <HAL_UART_MspInit+0x84>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d12c      	bne.n	8001eb0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	613b      	str	r3, [r7, #16]
 8001e5a:	4b18      	ldr	r3, [pc, #96]	@ (8001ebc <HAL_UART_MspInit+0x88>)
 8001e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e5e:	4a17      	ldr	r2, [pc, #92]	@ (8001ebc <HAL_UART_MspInit+0x88>)
 8001e60:	f043 0310 	orr.w	r3, r3, #16
 8001e64:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e66:	4b15      	ldr	r3, [pc, #84]	@ (8001ebc <HAL_UART_MspInit+0x88>)
 8001e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e6a:	f003 0310 	and.w	r3, r3, #16
 8001e6e:	613b      	str	r3, [r7, #16]
 8001e70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	4b11      	ldr	r3, [pc, #68]	@ (8001ebc <HAL_UART_MspInit+0x88>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7a:	4a10      	ldr	r2, [pc, #64]	@ (8001ebc <HAL_UART_MspInit+0x88>)
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e82:	4b0e      	ldr	r3, [pc, #56]	@ (8001ebc <HAL_UART_MspInit+0x88>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8001e8e:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8001e92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e94:	2302      	movs	r3, #2
 8001e96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ea0:	2307      	movs	r3, #7
 8001ea2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea4:	f107 0314 	add.w	r3, r7, #20
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4805      	ldr	r0, [pc, #20]	@ (8001ec0 <HAL_UART_MspInit+0x8c>)
 8001eac:	f000 fa96 	bl	80023dc <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001eb0:	bf00      	nop
 8001eb2:	3728      	adds	r7, #40	@ 0x28
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40011000 	.word	0x40011000
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40020000 	.word	0x40020000

08001ec4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08c      	sub	sp, #48	@ 0x30
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60bb      	str	r3, [r7, #8]
 8001ed8:	4b2e      	ldr	r3, [pc, #184]	@ (8001f94 <HAL_InitTick+0xd0>)
 8001eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001edc:	4a2d      	ldr	r2, [pc, #180]	@ (8001f94 <HAL_InitTick+0xd0>)
 8001ede:	f043 0301 	orr.w	r3, r3, #1
 8001ee2:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ee4:	4b2b      	ldr	r3, [pc, #172]	@ (8001f94 <HAL_InitTick+0xd0>)
 8001ee6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	60bb      	str	r3, [r7, #8]
 8001eee:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ef0:	f107 020c 	add.w	r2, r7, #12
 8001ef4:	f107 0310 	add.w	r3, r7, #16
 8001ef8:	4611      	mov	r1, r2
 8001efa:	4618      	mov	r0, r3
 8001efc:	f001 fd0c 	bl	8003918 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001f00:	f001 fcf6 	bl	80038f0 <HAL_RCC_GetPCLK2Freq>
 8001f04:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f08:	4a23      	ldr	r2, [pc, #140]	@ (8001f98 <HAL_InitTick+0xd4>)
 8001f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0e:	0c9b      	lsrs	r3, r3, #18
 8001f10:	3b01      	subs	r3, #1
 8001f12:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001f14:	4b21      	ldr	r3, [pc, #132]	@ (8001f9c <HAL_InitTick+0xd8>)
 8001f16:	4a22      	ldr	r2, [pc, #136]	@ (8001fa0 <HAL_InitTick+0xdc>)
 8001f18:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001f1a:	4b20      	ldr	r3, [pc, #128]	@ (8001f9c <HAL_InitTick+0xd8>)
 8001f1c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f20:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001f22:	4a1e      	ldr	r2, [pc, #120]	@ (8001f9c <HAL_InitTick+0xd8>)
 8001f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f26:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001f28:	4b1c      	ldr	r3, [pc, #112]	@ (8001f9c <HAL_InitTick+0xd8>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f2e:	4b1b      	ldr	r3, [pc, #108]	@ (8001f9c <HAL_InitTick+0xd8>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f34:	4b19      	ldr	r3, [pc, #100]	@ (8001f9c <HAL_InitTick+0xd8>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001f3a:	4818      	ldr	r0, [pc, #96]	@ (8001f9c <HAL_InitTick+0xd8>)
 8001f3c:	f001 fd39 	bl	80039b2 <HAL_TIM_Base_Init>
 8001f40:	4603      	mov	r3, r0
 8001f42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001f46:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d11b      	bne.n	8001f86 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001f4e:	4813      	ldr	r0, [pc, #76]	@ (8001f9c <HAL_InitTick+0xd8>)
 8001f50:	f001 fd88 	bl	8003a64 <HAL_TIM_Base_Start_IT>
 8001f54:	4603      	mov	r3, r0
 8001f56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001f5a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d111      	bne.n	8001f86 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001f62:	2019      	movs	r0, #25
 8001f64:	f000 fa2c 	bl	80023c0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b0f      	cmp	r3, #15
 8001f6c:	d808      	bhi.n	8001f80 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	2019      	movs	r0, #25
 8001f74:	f000 fa08 	bl	8002388 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f78:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa4 <HAL_InitTick+0xe0>)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6013      	str	r3, [r2, #0]
 8001f7e:	e002      	b.n	8001f86 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001f86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3730      	adds	r7, #48	@ 0x30
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40023800 	.word	0x40023800
 8001f98:	431bde83 	.word	0x431bde83
 8001f9c:	200007a0 	.word	0x200007a0
 8001fa0:	40010000 	.word	0x40010000
 8001fa4:	20000014 	.word	0x20000014

08001fa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001fac:	f001 fce6 	bl	800397c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fb0:	bf00      	nop
 8001fb2:	e7fd      	b.n	8001fb0 <NMI_Handler+0x8>

08001fb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fb8:	bf00      	nop
 8001fba:	e7fd      	b.n	8001fb8 <HardFault_Handler+0x4>

08001fbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fc0:	bf00      	nop
 8001fc2:	e7fd      	b.n	8001fc0 <MemManage_Handler+0x4>

08001fc4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fc8:	bf00      	nop
 8001fca:	e7fd      	b.n	8001fc8 <BusFault_Handler+0x4>

08001fcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fd0:	bf00      	nop
 8001fd2:	e7fd      	b.n	8001fd0 <UsageFault_Handler+0x4>

08001fd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002010:	4802      	ldr	r0, [pc, #8]	@ (800201c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002012:	f001 fd89 	bl	8003b28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	200007a0 	.word	0x200007a0

08002020 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  return 1;
 8002024:	2301      	movs	r3, #1
}
 8002026:	4618      	mov	r0, r3
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <_kill>:

int _kill(int pid, int sig)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800203a:	f002 fd77 	bl	8004b2c <__errno>
 800203e:	4603      	mov	r3, r0
 8002040:	2216      	movs	r2, #22
 8002042:	601a      	str	r2, [r3, #0]
  return -1;
 8002044:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002048:	4618      	mov	r0, r3
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <_exit>:

void _exit (int status)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002058:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f7ff ffe7 	bl	8002030 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002062:	bf00      	nop
 8002064:	e7fd      	b.n	8002062 <_exit+0x12>
	...

08002068 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002070:	4a14      	ldr	r2, [pc, #80]	@ (80020c4 <_sbrk+0x5c>)
 8002072:	4b15      	ldr	r3, [pc, #84]	@ (80020c8 <_sbrk+0x60>)
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800207c:	4b13      	ldr	r3, [pc, #76]	@ (80020cc <_sbrk+0x64>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d102      	bne.n	800208a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002084:	4b11      	ldr	r3, [pc, #68]	@ (80020cc <_sbrk+0x64>)
 8002086:	4a12      	ldr	r2, [pc, #72]	@ (80020d0 <_sbrk+0x68>)
 8002088:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800208a:	4b10      	ldr	r3, [pc, #64]	@ (80020cc <_sbrk+0x64>)
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4413      	add	r3, r2
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	429a      	cmp	r2, r3
 8002096:	d207      	bcs.n	80020a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002098:	f002 fd48 	bl	8004b2c <__errno>
 800209c:	4603      	mov	r3, r0
 800209e:	220c      	movs	r2, #12
 80020a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020a6:	e009      	b.n	80020bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020a8:	4b08      	ldr	r3, [pc, #32]	@ (80020cc <_sbrk+0x64>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020ae:	4b07      	ldr	r3, [pc, #28]	@ (80020cc <_sbrk+0x64>)
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4413      	add	r3, r2
 80020b6:	4a05      	ldr	r2, [pc, #20]	@ (80020cc <_sbrk+0x64>)
 80020b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ba:	68fb      	ldr	r3, [r7, #12]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	20020000 	.word	0x20020000
 80020c8:	00000400 	.word	0x00000400
 80020cc:	200007e8 	.word	0x200007e8
 80020d0:	20000940 	.word	0x20000940

080020d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020d8:	4b06      	ldr	r3, [pc, #24]	@ (80020f4 <SystemInit+0x20>)
 80020da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020de:	4a05      	ldr	r2, [pc, #20]	@ (80020f4 <SystemInit+0x20>)
 80020e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	e000ed00 	.word	0xe000ed00

080020f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80020f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002130 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020fc:	f7ff ffea 	bl	80020d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002100:	480c      	ldr	r0, [pc, #48]	@ (8002134 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002102:	490d      	ldr	r1, [pc, #52]	@ (8002138 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002104:	4a0d      	ldr	r2, [pc, #52]	@ (800213c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002106:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002108:	e002      	b.n	8002110 <LoopCopyDataInit>

0800210a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800210a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800210c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800210e:	3304      	adds	r3, #4

08002110 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002110:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002112:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002114:	d3f9      	bcc.n	800210a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002116:	4a0a      	ldr	r2, [pc, #40]	@ (8002140 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002118:	4c0a      	ldr	r4, [pc, #40]	@ (8002144 <LoopFillZerobss+0x22>)
  movs r3, #0
 800211a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800211c:	e001      	b.n	8002122 <LoopFillZerobss>

0800211e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800211e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002120:	3204      	adds	r2, #4

08002122 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002122:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002124:	d3fb      	bcc.n	800211e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002126:	f002 fd07 	bl	8004b38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800212a:	f7ff f8cb 	bl	80012c4 <main>
  bx  lr    
 800212e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002130:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002134:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002138:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800213c:	080053ec 	.word	0x080053ec
  ldr r2, =_sbss
 8002140:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002144:	2000093c 	.word	0x2000093c

08002148 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002148:	e7fe      	b.n	8002148 <ADC_IRQHandler>
	...

0800214c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002150:	4b0e      	ldr	r3, [pc, #56]	@ (800218c <HAL_Init+0x40>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a0d      	ldr	r2, [pc, #52]	@ (800218c <HAL_Init+0x40>)
 8002156:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800215a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800215c:	4b0b      	ldr	r3, [pc, #44]	@ (800218c <HAL_Init+0x40>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a0a      	ldr	r2, [pc, #40]	@ (800218c <HAL_Init+0x40>)
 8002162:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002166:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002168:	4b08      	ldr	r3, [pc, #32]	@ (800218c <HAL_Init+0x40>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a07      	ldr	r2, [pc, #28]	@ (800218c <HAL_Init+0x40>)
 800216e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002172:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002174:	2003      	movs	r0, #3
 8002176:	f000 f8fc 	bl	8002372 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800217a:	200f      	movs	r0, #15
 800217c:	f7ff fea2 	bl	8001ec4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002180:	f7ff fde8 	bl	8001d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40023c00 	.word	0x40023c00

08002190 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002194:	4b06      	ldr	r3, [pc, #24]	@ (80021b0 <HAL_IncTick+0x20>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	461a      	mov	r2, r3
 800219a:	4b06      	ldr	r3, [pc, #24]	@ (80021b4 <HAL_IncTick+0x24>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4413      	add	r3, r2
 80021a0:	4a04      	ldr	r2, [pc, #16]	@ (80021b4 <HAL_IncTick+0x24>)
 80021a2:	6013      	str	r3, [r2, #0]
}
 80021a4:	bf00      	nop
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	20000018 	.word	0x20000018
 80021b4:	200007ec 	.word	0x200007ec

080021b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  return uwTick;
 80021bc:	4b03      	ldr	r3, [pc, #12]	@ (80021cc <HAL_GetTick+0x14>)
 80021be:	681b      	ldr	r3, [r3, #0]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	200007ec 	.word	0x200007ec

080021d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021d8:	f7ff ffee 	bl	80021b8 <HAL_GetTick>
 80021dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80021e8:	d005      	beq.n	80021f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002214 <HAL_Delay+0x44>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	461a      	mov	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4413      	add	r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021f6:	bf00      	nop
 80021f8:	f7ff ffde 	bl	80021b8 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	429a      	cmp	r2, r3
 8002206:	d8f7      	bhi.n	80021f8 <HAL_Delay+0x28>
  {
  }
}
 8002208:	bf00      	nop
 800220a:	bf00      	nop
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	20000018 	.word	0x20000018

08002218 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002228:	4b0c      	ldr	r3, [pc, #48]	@ (800225c <__NVIC_SetPriorityGrouping+0x44>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002234:	4013      	ands	r3, r2
 8002236:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002240:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002244:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002248:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800224a:	4a04      	ldr	r2, [pc, #16]	@ (800225c <__NVIC_SetPriorityGrouping+0x44>)
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	60d3      	str	r3, [r2, #12]
}
 8002250:	bf00      	nop
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	e000ed00 	.word	0xe000ed00

08002260 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002264:	4b04      	ldr	r3, [pc, #16]	@ (8002278 <__NVIC_GetPriorityGrouping+0x18>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	0a1b      	lsrs	r3, r3, #8
 800226a:	f003 0307 	and.w	r3, r3, #7
}
 800226e:	4618      	mov	r0, r3
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	e000ed00 	.word	0xe000ed00

0800227c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	4603      	mov	r3, r0
 8002284:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228a:	2b00      	cmp	r3, #0
 800228c:	db0b      	blt.n	80022a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800228e:	79fb      	ldrb	r3, [r7, #7]
 8002290:	f003 021f 	and.w	r2, r3, #31
 8002294:	4907      	ldr	r1, [pc, #28]	@ (80022b4 <__NVIC_EnableIRQ+0x38>)
 8002296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229a:	095b      	lsrs	r3, r3, #5
 800229c:	2001      	movs	r0, #1
 800229e:	fa00 f202 	lsl.w	r2, r0, r2
 80022a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	e000e100 	.word	0xe000e100

080022b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	6039      	str	r1, [r7, #0]
 80022c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	db0a      	blt.n	80022e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	490c      	ldr	r1, [pc, #48]	@ (8002304 <__NVIC_SetPriority+0x4c>)
 80022d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d6:	0112      	lsls	r2, r2, #4
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	440b      	add	r3, r1
 80022dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022e0:	e00a      	b.n	80022f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	4908      	ldr	r1, [pc, #32]	@ (8002308 <__NVIC_SetPriority+0x50>)
 80022e8:	79fb      	ldrb	r3, [r7, #7]
 80022ea:	f003 030f 	and.w	r3, r3, #15
 80022ee:	3b04      	subs	r3, #4
 80022f0:	0112      	lsls	r2, r2, #4
 80022f2:	b2d2      	uxtb	r2, r2
 80022f4:	440b      	add	r3, r1
 80022f6:	761a      	strb	r2, [r3, #24]
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	e000e100 	.word	0xe000e100
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800230c:	b480      	push	{r7}
 800230e:	b089      	sub	sp, #36	@ 0x24
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	f1c3 0307 	rsb	r3, r3, #7
 8002326:	2b04      	cmp	r3, #4
 8002328:	bf28      	it	cs
 800232a:	2304      	movcs	r3, #4
 800232c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	3304      	adds	r3, #4
 8002332:	2b06      	cmp	r3, #6
 8002334:	d902      	bls.n	800233c <NVIC_EncodePriority+0x30>
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	3b03      	subs	r3, #3
 800233a:	e000      	b.n	800233e <NVIC_EncodePriority+0x32>
 800233c:	2300      	movs	r3, #0
 800233e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002340:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43da      	mvns	r2, r3
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	401a      	ands	r2, r3
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002354:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	fa01 f303 	lsl.w	r3, r1, r3
 800235e:	43d9      	mvns	r1, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002364:	4313      	orrs	r3, r2
         );
}
 8002366:	4618      	mov	r0, r3
 8002368:	3724      	adds	r7, #36	@ 0x24
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b082      	sub	sp, #8
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7ff ff4c 	bl	8002218 <__NVIC_SetPriorityGrouping>
}
 8002380:	bf00      	nop
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
 800238e:	4603      	mov	r3, r0
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
 8002394:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002396:	2300      	movs	r3, #0
 8002398:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800239a:	f7ff ff61 	bl	8002260 <__NVIC_GetPriorityGrouping>
 800239e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	68b9      	ldr	r1, [r7, #8]
 80023a4:	6978      	ldr	r0, [r7, #20]
 80023a6:	f7ff ffb1 	bl	800230c <NVIC_EncodePriority>
 80023aa:	4602      	mov	r2, r0
 80023ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023b0:	4611      	mov	r1, r2
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff ff80 	bl	80022b8 <__NVIC_SetPriority>
}
 80023b8:	bf00      	nop
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff ff54 	bl	800227c <__NVIC_EnableIRQ>
}
 80023d4:	bf00      	nop
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023dc:	b480      	push	{r7}
 80023de:	b089      	sub	sp, #36	@ 0x24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023e6:	2300      	movs	r3, #0
 80023e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023ea:	2300      	movs	r3, #0
 80023ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023ee:	2300      	movs	r3, #0
 80023f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023f2:	2300      	movs	r3, #0
 80023f4:	61fb      	str	r3, [r7, #28]
 80023f6:	e159      	b.n	80026ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023f8:	2201      	movs	r2, #1
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	4013      	ands	r3, r2
 800240a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	429a      	cmp	r2, r3
 8002412:	f040 8148 	bne.w	80026a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	2b01      	cmp	r3, #1
 8002420:	d005      	beq.n	800242e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800242a:	2b02      	cmp	r3, #2
 800242c:	d130      	bne.n	8002490 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	2203      	movs	r2, #3
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	43db      	mvns	r3, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4013      	ands	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	68da      	ldr	r2, [r3, #12]
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4313      	orrs	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002464:	2201      	movs	r2, #1
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	43db      	mvns	r3, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4013      	ands	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	091b      	lsrs	r3, r3, #4
 800247a:	f003 0201 	and.w	r2, r3, #1
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4313      	orrs	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f003 0303 	and.w	r3, r3, #3
 8002498:	2b03      	cmp	r3, #3
 800249a:	d017      	beq.n	80024cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	2203      	movs	r2, #3
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f003 0303 	and.w	r3, r3, #3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d123      	bne.n	8002520 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	08da      	lsrs	r2, r3, #3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3208      	adds	r2, #8
 80024e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	220f      	movs	r2, #15
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	43db      	mvns	r3, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4013      	ands	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	691a      	ldr	r2, [r3, #16]
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4313      	orrs	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	08da      	lsrs	r2, r3, #3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	3208      	adds	r2, #8
 800251a:	69b9      	ldr	r1, [r7, #24]
 800251c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	2203      	movs	r2, #3
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	43db      	mvns	r3, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4013      	ands	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f003 0203 	and.w	r2, r3, #3
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4313      	orrs	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800255c:	2b00      	cmp	r3, #0
 800255e:	f000 80a2 	beq.w	80026a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	60fb      	str	r3, [r7, #12]
 8002566:	4b57      	ldr	r3, [pc, #348]	@ (80026c4 <HAL_GPIO_Init+0x2e8>)
 8002568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800256a:	4a56      	ldr	r2, [pc, #344]	@ (80026c4 <HAL_GPIO_Init+0x2e8>)
 800256c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002570:	6453      	str	r3, [r2, #68]	@ 0x44
 8002572:	4b54      	ldr	r3, [pc, #336]	@ (80026c4 <HAL_GPIO_Init+0x2e8>)
 8002574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002576:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800257e:	4a52      	ldr	r2, [pc, #328]	@ (80026c8 <HAL_GPIO_Init+0x2ec>)
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	089b      	lsrs	r3, r3, #2
 8002584:	3302      	adds	r3, #2
 8002586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800258a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	220f      	movs	r2, #15
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	43db      	mvns	r3, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4013      	ands	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a49      	ldr	r2, [pc, #292]	@ (80026cc <HAL_GPIO_Init+0x2f0>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d019      	beq.n	80025de <HAL_GPIO_Init+0x202>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a48      	ldr	r2, [pc, #288]	@ (80026d0 <HAL_GPIO_Init+0x2f4>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d013      	beq.n	80025da <HAL_GPIO_Init+0x1fe>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a47      	ldr	r2, [pc, #284]	@ (80026d4 <HAL_GPIO_Init+0x2f8>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d00d      	beq.n	80025d6 <HAL_GPIO_Init+0x1fa>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a46      	ldr	r2, [pc, #280]	@ (80026d8 <HAL_GPIO_Init+0x2fc>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d007      	beq.n	80025d2 <HAL_GPIO_Init+0x1f6>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a45      	ldr	r2, [pc, #276]	@ (80026dc <HAL_GPIO_Init+0x300>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d101      	bne.n	80025ce <HAL_GPIO_Init+0x1f2>
 80025ca:	2304      	movs	r3, #4
 80025cc:	e008      	b.n	80025e0 <HAL_GPIO_Init+0x204>
 80025ce:	2307      	movs	r3, #7
 80025d0:	e006      	b.n	80025e0 <HAL_GPIO_Init+0x204>
 80025d2:	2303      	movs	r3, #3
 80025d4:	e004      	b.n	80025e0 <HAL_GPIO_Init+0x204>
 80025d6:	2302      	movs	r3, #2
 80025d8:	e002      	b.n	80025e0 <HAL_GPIO_Init+0x204>
 80025da:	2301      	movs	r3, #1
 80025dc:	e000      	b.n	80025e0 <HAL_GPIO_Init+0x204>
 80025de:	2300      	movs	r3, #0
 80025e0:	69fa      	ldr	r2, [r7, #28]
 80025e2:	f002 0203 	and.w	r2, r2, #3
 80025e6:	0092      	lsls	r2, r2, #2
 80025e8:	4093      	lsls	r3, r2
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025f0:	4935      	ldr	r1, [pc, #212]	@ (80026c8 <HAL_GPIO_Init+0x2ec>)
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	089b      	lsrs	r3, r3, #2
 80025f6:	3302      	adds	r3, #2
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025fe:	4b38      	ldr	r3, [pc, #224]	@ (80026e0 <HAL_GPIO_Init+0x304>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	43db      	mvns	r3, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4013      	ands	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	4313      	orrs	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002622:	4a2f      	ldr	r2, [pc, #188]	@ (80026e0 <HAL_GPIO_Init+0x304>)
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002628:	4b2d      	ldr	r3, [pc, #180]	@ (80026e0 <HAL_GPIO_Init+0x304>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	43db      	mvns	r3, r3
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4013      	ands	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d003      	beq.n	800264c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	4313      	orrs	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800264c:	4a24      	ldr	r2, [pc, #144]	@ (80026e0 <HAL_GPIO_Init+0x304>)
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002652:	4b23      	ldr	r3, [pc, #140]	@ (80026e0 <HAL_GPIO_Init+0x304>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	43db      	mvns	r3, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4013      	ands	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	4313      	orrs	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002676:	4a1a      	ldr	r2, [pc, #104]	@ (80026e0 <HAL_GPIO_Init+0x304>)
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800267c:	4b18      	ldr	r3, [pc, #96]	@ (80026e0 <HAL_GPIO_Init+0x304>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	43db      	mvns	r3, r3
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4013      	ands	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	4313      	orrs	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026a0:	4a0f      	ldr	r2, [pc, #60]	@ (80026e0 <HAL_GPIO_Init+0x304>)
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	3301      	adds	r3, #1
 80026aa:	61fb      	str	r3, [r7, #28]
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	2b0f      	cmp	r3, #15
 80026b0:	f67f aea2 	bls.w	80023f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026b4:	bf00      	nop
 80026b6:	bf00      	nop
 80026b8:	3724      	adds	r7, #36	@ 0x24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	40023800 	.word	0x40023800
 80026c8:	40013800 	.word	0x40013800
 80026cc:	40020000 	.word	0x40020000
 80026d0:	40020400 	.word	0x40020400
 80026d4:	40020800 	.word	0x40020800
 80026d8:	40020c00 	.word	0x40020c00
 80026dc:	40021000 	.word	0x40021000
 80026e0:	40013c00 	.word	0x40013c00

080026e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	460b      	mov	r3, r1
 80026ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691a      	ldr	r2, [r3, #16]
 80026f4:	887b      	ldrh	r3, [r7, #2]
 80026f6:	4013      	ands	r3, r2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d002      	beq.n	8002702 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026fc:	2301      	movs	r3, #1
 80026fe:	73fb      	strb	r3, [r7, #15]
 8002700:	e001      	b.n	8002706 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002702:	2300      	movs	r3, #0
 8002704:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002706:	7bfb      	ldrb	r3, [r7, #15]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3714      	adds	r7, #20
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e12b      	b.n	800297e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d106      	bne.n	8002740 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7ff fb32 	bl	8001da4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2224      	movs	r2, #36	@ 0x24
 8002744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 0201 	bic.w	r2, r2, #1
 8002756:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002766:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002776:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002778:	f001 f8a6 	bl	80038c8 <HAL_RCC_GetPCLK1Freq>
 800277c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	4a81      	ldr	r2, [pc, #516]	@ (8002988 <HAL_I2C_Init+0x274>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d807      	bhi.n	8002798 <HAL_I2C_Init+0x84>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	4a80      	ldr	r2, [pc, #512]	@ (800298c <HAL_I2C_Init+0x278>)
 800278c:	4293      	cmp	r3, r2
 800278e:	bf94      	ite	ls
 8002790:	2301      	movls	r3, #1
 8002792:	2300      	movhi	r3, #0
 8002794:	b2db      	uxtb	r3, r3
 8002796:	e006      	b.n	80027a6 <HAL_I2C_Init+0x92>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	4a7d      	ldr	r2, [pc, #500]	@ (8002990 <HAL_I2C_Init+0x27c>)
 800279c:	4293      	cmp	r3, r2
 800279e:	bf94      	ite	ls
 80027a0:	2301      	movls	r3, #1
 80027a2:	2300      	movhi	r3, #0
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e0e7      	b.n	800297e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	4a78      	ldr	r2, [pc, #480]	@ (8002994 <HAL_I2C_Init+0x280>)
 80027b2:	fba2 2303 	umull	r2, r3, r2, r3
 80027b6:	0c9b      	lsrs	r3, r3, #18
 80027b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68ba      	ldr	r2, [r7, #8]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6a1b      	ldr	r3, [r3, #32]
 80027d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	4a6a      	ldr	r2, [pc, #424]	@ (8002988 <HAL_I2C_Init+0x274>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d802      	bhi.n	80027e8 <HAL_I2C_Init+0xd4>
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	3301      	adds	r3, #1
 80027e6:	e009      	b.n	80027fc <HAL_I2C_Init+0xe8>
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80027ee:	fb02 f303 	mul.w	r3, r2, r3
 80027f2:	4a69      	ldr	r2, [pc, #420]	@ (8002998 <HAL_I2C_Init+0x284>)
 80027f4:	fba2 2303 	umull	r2, r3, r2, r3
 80027f8:	099b      	lsrs	r3, r3, #6
 80027fa:	3301      	adds	r3, #1
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6812      	ldr	r2, [r2, #0]
 8002800:	430b      	orrs	r3, r1
 8002802:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800280e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	495c      	ldr	r1, [pc, #368]	@ (8002988 <HAL_I2C_Init+0x274>)
 8002818:	428b      	cmp	r3, r1
 800281a:	d819      	bhi.n	8002850 <HAL_I2C_Init+0x13c>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	1e59      	subs	r1, r3, #1
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	fbb1 f3f3 	udiv	r3, r1, r3
 800282a:	1c59      	adds	r1, r3, #1
 800282c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002830:	400b      	ands	r3, r1
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00a      	beq.n	800284c <HAL_I2C_Init+0x138>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	1e59      	subs	r1, r3, #1
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	fbb1 f3f3 	udiv	r3, r1, r3
 8002844:	3301      	adds	r3, #1
 8002846:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800284a:	e051      	b.n	80028f0 <HAL_I2C_Init+0x1dc>
 800284c:	2304      	movs	r3, #4
 800284e:	e04f      	b.n	80028f0 <HAL_I2C_Init+0x1dc>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d111      	bne.n	800287c <HAL_I2C_Init+0x168>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	1e58      	subs	r0, r3, #1
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6859      	ldr	r1, [r3, #4]
 8002860:	460b      	mov	r3, r1
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	440b      	add	r3, r1
 8002866:	fbb0 f3f3 	udiv	r3, r0, r3
 800286a:	3301      	adds	r3, #1
 800286c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002870:	2b00      	cmp	r3, #0
 8002872:	bf0c      	ite	eq
 8002874:	2301      	moveq	r3, #1
 8002876:	2300      	movne	r3, #0
 8002878:	b2db      	uxtb	r3, r3
 800287a:	e012      	b.n	80028a2 <HAL_I2C_Init+0x18e>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	1e58      	subs	r0, r3, #1
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6859      	ldr	r1, [r3, #4]
 8002884:	460b      	mov	r3, r1
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	440b      	add	r3, r1
 800288a:	0099      	lsls	r1, r3, #2
 800288c:	440b      	add	r3, r1
 800288e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002892:	3301      	adds	r3, #1
 8002894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002898:	2b00      	cmp	r3, #0
 800289a:	bf0c      	ite	eq
 800289c:	2301      	moveq	r3, #1
 800289e:	2300      	movne	r3, #0
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <HAL_I2C_Init+0x196>
 80028a6:	2301      	movs	r3, #1
 80028a8:	e022      	b.n	80028f0 <HAL_I2C_Init+0x1dc>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10e      	bne.n	80028d0 <HAL_I2C_Init+0x1bc>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	1e58      	subs	r0, r3, #1
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6859      	ldr	r1, [r3, #4]
 80028ba:	460b      	mov	r3, r1
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	440b      	add	r3, r1
 80028c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80028c4:	3301      	adds	r3, #1
 80028c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028ce:	e00f      	b.n	80028f0 <HAL_I2C_Init+0x1dc>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	1e58      	subs	r0, r3, #1
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6859      	ldr	r1, [r3, #4]
 80028d8:	460b      	mov	r3, r1
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	0099      	lsls	r1, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028e6:	3301      	adds	r3, #1
 80028e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028f0:	6879      	ldr	r1, [r7, #4]
 80028f2:	6809      	ldr	r1, [r1, #0]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69da      	ldr	r2, [r3, #28]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	431a      	orrs	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800291e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6911      	ldr	r1, [r2, #16]
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	68d2      	ldr	r2, [r2, #12]
 800292a:	4311      	orrs	r1, r2
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6812      	ldr	r2, [r2, #0]
 8002930:	430b      	orrs	r3, r1
 8002932:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	695a      	ldr	r2, [r3, #20]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	430a      	orrs	r2, r1
 800294e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f042 0201 	orr.w	r2, r2, #1
 800295e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2220      	movs	r2, #32
 800296a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	000186a0 	.word	0x000186a0
 800298c:	001e847f 	.word	0x001e847f
 8002990:	003d08ff 	.word	0x003d08ff
 8002994:	431bde83 	.word	0x431bde83
 8002998:	10624dd3 	.word	0x10624dd3

0800299c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b088      	sub	sp, #32
 80029a0:	af02      	add	r7, sp, #8
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	607a      	str	r2, [r7, #4]
 80029a6:	461a      	mov	r2, r3
 80029a8:	460b      	mov	r3, r1
 80029aa:	817b      	strh	r3, [r7, #10]
 80029ac:	4613      	mov	r3, r2
 80029ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029b0:	f7ff fc02 	bl	80021b8 <HAL_GetTick>
 80029b4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b20      	cmp	r3, #32
 80029c0:	f040 80e0 	bne.w	8002b84 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	2319      	movs	r3, #25
 80029ca:	2201      	movs	r2, #1
 80029cc:	4970      	ldr	r1, [pc, #448]	@ (8002b90 <HAL_I2C_Master_Transmit+0x1f4>)
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 f964 	bl	8002c9c <I2C_WaitOnFlagUntilTimeout>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80029da:	2302      	movs	r3, #2
 80029dc:	e0d3      	b.n	8002b86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d101      	bne.n	80029ec <HAL_I2C_Master_Transmit+0x50>
 80029e8:	2302      	movs	r3, #2
 80029ea:	e0cc      	b.n	8002b86 <HAL_I2C_Master_Transmit+0x1ea>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d007      	beq.n	8002a12 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f042 0201 	orr.w	r2, r2, #1
 8002a10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a20:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2221      	movs	r2, #33	@ 0x21
 8002a26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2210      	movs	r2, #16
 8002a2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	893a      	ldrh	r2, [r7, #8]
 8002a42:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	4a50      	ldr	r2, [pc, #320]	@ (8002b94 <HAL_I2C_Master_Transmit+0x1f8>)
 8002a52:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a54:	8979      	ldrh	r1, [r7, #10]
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	6a3a      	ldr	r2, [r7, #32]
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 f89c 	bl	8002b98 <I2C_MasterRequestWrite>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e08d      	b.n	8002b86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	613b      	str	r3, [r7, #16]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	613b      	str	r3, [r7, #16]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	613b      	str	r3, [r7, #16]
 8002a7e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002a80:	e066      	b.n	8002b50 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	6a39      	ldr	r1, [r7, #32]
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f000 fa22 	bl	8002ed0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00d      	beq.n	8002aae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	d107      	bne.n	8002aaa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002aa8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e06b      	b.n	8002b86 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab2:	781a      	ldrb	r2, [r3, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002abe:	1c5a      	adds	r2, r3, #1
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	3b01      	subs	r3, #1
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	2b04      	cmp	r3, #4
 8002aea:	d11b      	bne.n	8002b24 <HAL_I2C_Master_Transmit+0x188>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d017      	beq.n	8002b24 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af8:	781a      	ldrb	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b04:	1c5a      	adds	r2, r3, #1
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	3b01      	subs	r3, #1
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	6a39      	ldr	r1, [r7, #32]
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f000 fa19 	bl	8002f60 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00d      	beq.n	8002b50 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b38:	2b04      	cmp	r3, #4
 8002b3a:	d107      	bne.n	8002b4c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b4a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e01a      	b.n	8002b86 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d194      	bne.n	8002a82 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002b80:	2300      	movs	r3, #0
 8002b82:	e000      	b.n	8002b86 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002b84:	2302      	movs	r3, #2
  }
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3718      	adds	r7, #24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	00100002 	.word	0x00100002
 8002b94:	ffff0000 	.word	0xffff0000

08002b98 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b088      	sub	sp, #32
 8002b9c:	af02      	add	r7, sp, #8
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	607a      	str	r2, [r7, #4]
 8002ba2:	603b      	str	r3, [r7, #0]
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d006      	beq.n	8002bc2 <I2C_MasterRequestWrite+0x2a>
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d003      	beq.n	8002bc2 <I2C_MasterRequestWrite+0x2a>
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002bc0:	d108      	bne.n	8002bd4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	e00b      	b.n	8002bec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd8:	2b12      	cmp	r3, #18
 8002bda:	d107      	bne.n	8002bec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	9300      	str	r3, [sp, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f000 f84f 	bl	8002c9c <I2C_WaitOnFlagUntilTimeout>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00d      	beq.n	8002c20 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c12:	d103      	bne.n	8002c1c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c1a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e035      	b.n	8002c8c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c28:	d108      	bne.n	8002c3c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c2a:	897b      	ldrh	r3, [r7, #10]
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	461a      	mov	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c38:	611a      	str	r2, [r3, #16]
 8002c3a:	e01b      	b.n	8002c74 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c3c:	897b      	ldrh	r3, [r7, #10]
 8002c3e:	11db      	asrs	r3, r3, #7
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	f003 0306 	and.w	r3, r3, #6
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	f063 030f 	orn	r3, r3, #15
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	490e      	ldr	r1, [pc, #56]	@ (8002c94 <I2C_MasterRequestWrite+0xfc>)
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 f898 	bl	8002d90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e010      	b.n	8002c8c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c6a:	897b      	ldrh	r3, [r7, #10]
 8002c6c:	b2da      	uxtb	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	4907      	ldr	r1, [pc, #28]	@ (8002c98 <I2C_MasterRequestWrite+0x100>)
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f000 f888 	bl	8002d90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e000      	b.n	8002c8c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3718      	adds	r7, #24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	00010008 	.word	0x00010008
 8002c98:	00010002 	.word	0x00010002

08002c9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	603b      	str	r3, [r7, #0]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cac:	e048      	b.n	8002d40 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002cb4:	d044      	beq.n	8002d40 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cb6:	f7ff fa7f 	bl	80021b8 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d302      	bcc.n	8002ccc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d139      	bne.n	8002d40 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	0c1b      	lsrs	r3, r3, #16
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d10d      	bne.n	8002cf2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	43da      	mvns	r2, r3
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	bf0c      	ite	eq
 8002ce8:	2301      	moveq	r3, #1
 8002cea:	2300      	movne	r3, #0
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	461a      	mov	r2, r3
 8002cf0:	e00c      	b.n	8002d0c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	43da      	mvns	r2, r3
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	bf0c      	ite	eq
 8002d04:	2301      	moveq	r3, #1
 8002d06:	2300      	movne	r3, #0
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	79fb      	ldrb	r3, [r7, #7]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d116      	bne.n	8002d40 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2c:	f043 0220 	orr.w	r2, r3, #32
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e023      	b.n	8002d88 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	0c1b      	lsrs	r3, r3, #16
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d10d      	bne.n	8002d66 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	43da      	mvns	r2, r3
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	4013      	ands	r3, r2
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	bf0c      	ite	eq
 8002d5c:	2301      	moveq	r3, #1
 8002d5e:	2300      	movne	r3, #0
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	461a      	mov	r2, r3
 8002d64:	e00c      	b.n	8002d80 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	43da      	mvns	r2, r3
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	4013      	ands	r3, r2
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	bf0c      	ite	eq
 8002d78:	2301      	moveq	r3, #1
 8002d7a:	2300      	movne	r3, #0
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	461a      	mov	r2, r3
 8002d80:	79fb      	ldrb	r3, [r7, #7]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d093      	beq.n	8002cae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
 8002d9c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d9e:	e071      	b.n	8002e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002daa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dae:	d123      	bne.n	8002df8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dbe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002dc8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de4:	f043 0204 	orr.w	r2, r3, #4
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e067      	b.n	8002ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002dfe:	d041      	beq.n	8002e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e00:	f7ff f9da 	bl	80021b8 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d302      	bcc.n	8002e16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d136      	bne.n	8002e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	0c1b      	lsrs	r3, r3, #16
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d10c      	bne.n	8002e3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	43da      	mvns	r2, r3
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	bf14      	ite	ne
 8002e32:	2301      	movne	r3, #1
 8002e34:	2300      	moveq	r3, #0
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	e00b      	b.n	8002e52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	43da      	mvns	r2, r3
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	4013      	ands	r3, r2
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	bf14      	ite	ne
 8002e4c:	2301      	movne	r3, #1
 8002e4e:	2300      	moveq	r3, #0
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d016      	beq.n	8002e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2220      	movs	r2, #32
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e70:	f043 0220 	orr.w	r2, r3, #32
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e021      	b.n	8002ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	0c1b      	lsrs	r3, r3, #16
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d10c      	bne.n	8002ea8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	43da      	mvns	r2, r3
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	bf14      	ite	ne
 8002ea0:	2301      	movne	r3, #1
 8002ea2:	2300      	moveq	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	e00b      	b.n	8002ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	43da      	mvns	r2, r3
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	bf14      	ite	ne
 8002eba:	2301      	movne	r3, #1
 8002ebc:	2300      	moveq	r3, #0
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f47f af6d 	bne.w	8002da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3710      	adds	r7, #16
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002edc:	e034      	b.n	8002f48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 f886 	bl	8002ff0 <I2C_IsAcknowledgeFailed>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e034      	b.n	8002f58 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ef4:	d028      	beq.n	8002f48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ef6:	f7ff f95f 	bl	80021b8 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d302      	bcc.n	8002f0c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d11d      	bne.n	8002f48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f16:	2b80      	cmp	r3, #128	@ 0x80
 8002f18:	d016      	beq.n	8002f48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2220      	movs	r2, #32
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f34:	f043 0220 	orr.w	r2, r3, #32
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e007      	b.n	8002f58 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f52:	2b80      	cmp	r3, #128	@ 0x80
 8002f54:	d1c3      	bne.n	8002ede <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f6c:	e034      	b.n	8002fd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 f83e 	bl	8002ff0 <I2C_IsAcknowledgeFailed>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e034      	b.n	8002fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f84:	d028      	beq.n	8002fd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f86:	f7ff f917 	bl	80021b8 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	68ba      	ldr	r2, [r7, #8]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d302      	bcc.n	8002f9c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d11d      	bne.n	8002fd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	f003 0304 	and.w	r3, r3, #4
 8002fa6:	2b04      	cmp	r3, #4
 8002fa8:	d016      	beq.n	8002fd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc4:	f043 0220 	orr.w	r2, r3, #32
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e007      	b.n	8002fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	f003 0304 	and.w	r3, r3, #4
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	d1c3      	bne.n	8002f6e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003002:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003006:	d11b      	bne.n	8003040 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003010:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2220      	movs	r2, #32
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302c:	f043 0204 	orr.w	r2, r3, #4
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e000      	b.n	8003042 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
	...

08003050 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e267      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b00      	cmp	r3, #0
 800306c:	d075      	beq.n	800315a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800306e:	4b88      	ldr	r3, [pc, #544]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 030c 	and.w	r3, r3, #12
 8003076:	2b04      	cmp	r3, #4
 8003078:	d00c      	beq.n	8003094 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800307a:	4b85      	ldr	r3, [pc, #532]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003082:	2b08      	cmp	r3, #8
 8003084:	d112      	bne.n	80030ac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003086:	4b82      	ldr	r3, [pc, #520]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800308e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003092:	d10b      	bne.n	80030ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003094:	4b7e      	ldr	r3, [pc, #504]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d05b      	beq.n	8003158 <HAL_RCC_OscConfig+0x108>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d157      	bne.n	8003158 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e242      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030b4:	d106      	bne.n	80030c4 <HAL_RCC_OscConfig+0x74>
 80030b6:	4b76      	ldr	r3, [pc, #472]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a75      	ldr	r2, [pc, #468]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 80030bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	e01d      	b.n	8003100 <HAL_RCC_OscConfig+0xb0>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030cc:	d10c      	bne.n	80030e8 <HAL_RCC_OscConfig+0x98>
 80030ce:	4b70      	ldr	r3, [pc, #448]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a6f      	ldr	r2, [pc, #444]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 80030d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	4b6d      	ldr	r3, [pc, #436]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a6c      	ldr	r2, [pc, #432]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 80030e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030e4:	6013      	str	r3, [r2, #0]
 80030e6:	e00b      	b.n	8003100 <HAL_RCC_OscConfig+0xb0>
 80030e8:	4b69      	ldr	r3, [pc, #420]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a68      	ldr	r2, [pc, #416]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 80030ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030f2:	6013      	str	r3, [r2, #0]
 80030f4:	4b66      	ldr	r3, [pc, #408]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a65      	ldr	r2, [pc, #404]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 80030fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d013      	beq.n	8003130 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003108:	f7ff f856 	bl	80021b8 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003110:	f7ff f852 	bl	80021b8 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b64      	cmp	r3, #100	@ 0x64
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e207      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003122:	4b5b      	ldr	r3, [pc, #364]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0f0      	beq.n	8003110 <HAL_RCC_OscConfig+0xc0>
 800312e:	e014      	b.n	800315a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003130:	f7ff f842 	bl	80021b8 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003138:	f7ff f83e 	bl	80021b8 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b64      	cmp	r3, #100	@ 0x64
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e1f3      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800314a:	4b51      	ldr	r3, [pc, #324]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1f0      	bne.n	8003138 <HAL_RCC_OscConfig+0xe8>
 8003156:	e000      	b.n	800315a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d063      	beq.n	800322e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003166:	4b4a      	ldr	r3, [pc, #296]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 030c 	and.w	r3, r3, #12
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00b      	beq.n	800318a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003172:	4b47      	ldr	r3, [pc, #284]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800317a:	2b08      	cmp	r3, #8
 800317c:	d11c      	bne.n	80031b8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800317e:	4b44      	ldr	r3, [pc, #272]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d116      	bne.n	80031b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800318a:	4b41      	ldr	r3, [pc, #260]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d005      	beq.n	80031a2 <HAL_RCC_OscConfig+0x152>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d001      	beq.n	80031a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e1c7      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a2:	4b3b      	ldr	r3, [pc, #236]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	4937      	ldr	r1, [pc, #220]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031b6:	e03a      	b.n	800322e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d020      	beq.n	8003202 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031c0:	4b34      	ldr	r3, [pc, #208]	@ (8003294 <HAL_RCC_OscConfig+0x244>)
 80031c2:	2201      	movs	r2, #1
 80031c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c6:	f7fe fff7 	bl	80021b8 <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031cc:	e008      	b.n	80031e0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031ce:	f7fe fff3 	bl	80021b8 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e1a8      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e0:	4b2b      	ldr	r3, [pc, #172]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0f0      	beq.n	80031ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ec:	4b28      	ldr	r3, [pc, #160]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	4925      	ldr	r1, [pc, #148]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	600b      	str	r3, [r1, #0]
 8003200:	e015      	b.n	800322e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003202:	4b24      	ldr	r3, [pc, #144]	@ (8003294 <HAL_RCC_OscConfig+0x244>)
 8003204:	2200      	movs	r2, #0
 8003206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003208:	f7fe ffd6 	bl	80021b8 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003210:	f7fe ffd2 	bl	80021b8 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e187      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003222:	4b1b      	ldr	r3, [pc, #108]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f0      	bne.n	8003210 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b00      	cmp	r3, #0
 8003238:	d036      	beq.n	80032a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d016      	beq.n	8003270 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003242:	4b15      	ldr	r3, [pc, #84]	@ (8003298 <HAL_RCC_OscConfig+0x248>)
 8003244:	2201      	movs	r2, #1
 8003246:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003248:	f7fe ffb6 	bl	80021b8 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003250:	f7fe ffb2 	bl	80021b8 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e167      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003262:	4b0b      	ldr	r3, [pc, #44]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 8003264:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d0f0      	beq.n	8003250 <HAL_RCC_OscConfig+0x200>
 800326e:	e01b      	b.n	80032a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003270:	4b09      	ldr	r3, [pc, #36]	@ (8003298 <HAL_RCC_OscConfig+0x248>)
 8003272:	2200      	movs	r2, #0
 8003274:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003276:	f7fe ff9f 	bl	80021b8 <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800327c:	e00e      	b.n	800329c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800327e:	f7fe ff9b 	bl	80021b8 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d907      	bls.n	800329c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e150      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
 8003290:	40023800 	.word	0x40023800
 8003294:	42470000 	.word	0x42470000
 8003298:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800329c:	4b88      	ldr	r3, [pc, #544]	@ (80034c0 <HAL_RCC_OscConfig+0x470>)
 800329e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1ea      	bne.n	800327e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 8097 	beq.w	80033e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032b6:	2300      	movs	r3, #0
 80032b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ba:	4b81      	ldr	r3, [pc, #516]	@ (80034c0 <HAL_RCC_OscConfig+0x470>)
 80032bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10f      	bne.n	80032e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032c6:	2300      	movs	r3, #0
 80032c8:	60bb      	str	r3, [r7, #8]
 80032ca:	4b7d      	ldr	r3, [pc, #500]	@ (80034c0 <HAL_RCC_OscConfig+0x470>)
 80032cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ce:	4a7c      	ldr	r2, [pc, #496]	@ (80034c0 <HAL_RCC_OscConfig+0x470>)
 80032d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80032d6:	4b7a      	ldr	r3, [pc, #488]	@ (80034c0 <HAL_RCC_OscConfig+0x470>)
 80032d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032de:	60bb      	str	r3, [r7, #8]
 80032e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032e2:	2301      	movs	r3, #1
 80032e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e6:	4b77      	ldr	r3, [pc, #476]	@ (80034c4 <HAL_RCC_OscConfig+0x474>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d118      	bne.n	8003324 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032f2:	4b74      	ldr	r3, [pc, #464]	@ (80034c4 <HAL_RCC_OscConfig+0x474>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a73      	ldr	r2, [pc, #460]	@ (80034c4 <HAL_RCC_OscConfig+0x474>)
 80032f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032fe:	f7fe ff5b 	bl	80021b8 <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003306:	f7fe ff57 	bl	80021b8 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e10c      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003318:	4b6a      	ldr	r3, [pc, #424]	@ (80034c4 <HAL_RCC_OscConfig+0x474>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0f0      	beq.n	8003306 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d106      	bne.n	800333a <HAL_RCC_OscConfig+0x2ea>
 800332c:	4b64      	ldr	r3, [pc, #400]	@ (80034c0 <HAL_RCC_OscConfig+0x470>)
 800332e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003330:	4a63      	ldr	r2, [pc, #396]	@ (80034c0 <HAL_RCC_OscConfig+0x470>)
 8003332:	f043 0301 	orr.w	r3, r3, #1
 8003336:	6713      	str	r3, [r2, #112]	@ 0x70
 8003338:	e01c      	b.n	8003374 <HAL_RCC_OscConfig+0x324>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	2b05      	cmp	r3, #5
 8003340:	d10c      	bne.n	800335c <HAL_RCC_OscConfig+0x30c>
 8003342:	4b5f      	ldr	r3, [pc, #380]	@ (80034c0 <HAL_RCC_OscConfig+0x470>)
 8003344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003346:	4a5e      	ldr	r2, [pc, #376]	@ (80034c0 <HAL_RCC_OscConfig+0x470>)
 8003348:	f043 0304 	orr.w	r3, r3, #4
 800334c:	6713      	str	r3, [r2, #112]	@ 0x70
 800334e:	4b5c      	ldr	r3, [pc, #368]	@ (80034c0 <HAL_RCC_OscConfig+0x470>)
 8003350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003352:	4a5b      	ldr	r2, [pc, #364]	@ (80034c0 <HAL_RCC_OscConfig+0x470>)
 8003354:	f043 0301 	orr.w	r3, r3, #1
 8003358:	6713      	str	r3, [r2, #112]	@ 0x70
 800335a:	e00b      	b.n	8003374 <HAL_RCC_OscConfig+0x324>
 800335c:	4b58      	ldr	r3, [pc, #352]	@ (80034c0 <HAL_RCC_OscConfig+0x470>)
 800335e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003360:	4a57      	ldr	r2, [pc, #348]	@ (80034c0 <HAL_RCC_OscConfig+0x470>)
 8003362:	f023 0301 	bic.w	r3, r3, #1
 8003366:	6713      	str	r3, [r2, #112]	@ 0x70
 8003368:	4b55      	ldr	r3, [pc, #340]	@ (80034c0 <HAL_RCC_OscConfig+0x470>)
 800336a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800336c:	4a54      	ldr	r2, [pc, #336]	@ (80034c0 <HAL_RCC_OscConfig+0x470>)
 800336e:	f023 0304 	bic.w	r3, r3, #4
 8003372:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d015      	beq.n	80033a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800337c:	f7fe ff1c 	bl	80021b8 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003382:	e00a      	b.n	800339a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003384:	f7fe ff18 	bl	80021b8 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003392:	4293      	cmp	r3, r2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e0cb      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800339a:	4b49      	ldr	r3, [pc, #292]	@ (80034c0 <HAL_RCC_OscConfig+0x470>)
 800339c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d0ee      	beq.n	8003384 <HAL_RCC_OscConfig+0x334>
 80033a6:	e014      	b.n	80033d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a8:	f7fe ff06 	bl	80021b8 <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ae:	e00a      	b.n	80033c6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033b0:	f7fe ff02 	bl	80021b8 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033be:	4293      	cmp	r3, r2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e0b5      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033c6:	4b3e      	ldr	r3, [pc, #248]	@ (80034c0 <HAL_RCC_OscConfig+0x470>)
 80033c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1ee      	bne.n	80033b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033d2:	7dfb      	ldrb	r3, [r7, #23]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d105      	bne.n	80033e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033d8:	4b39      	ldr	r3, [pc, #228]	@ (80034c0 <HAL_RCC_OscConfig+0x470>)
 80033da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033dc:	4a38      	ldr	r2, [pc, #224]	@ (80034c0 <HAL_RCC_OscConfig+0x470>)
 80033de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 80a1 	beq.w	8003530 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033ee:	4b34      	ldr	r3, [pc, #208]	@ (80034c0 <HAL_RCC_OscConfig+0x470>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 030c 	and.w	r3, r3, #12
 80033f6:	2b08      	cmp	r3, #8
 80033f8:	d05c      	beq.n	80034b4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d141      	bne.n	8003486 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003402:	4b31      	ldr	r3, [pc, #196]	@ (80034c8 <HAL_RCC_OscConfig+0x478>)
 8003404:	2200      	movs	r2, #0
 8003406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003408:	f7fe fed6 	bl	80021b8 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003410:	f7fe fed2 	bl	80021b8 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e087      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003422:	4b27      	ldr	r3, [pc, #156]	@ (80034c0 <HAL_RCC_OscConfig+0x470>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1f0      	bne.n	8003410 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	69da      	ldr	r2, [r3, #28]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	431a      	orrs	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343c:	019b      	lsls	r3, r3, #6
 800343e:	431a      	orrs	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003444:	085b      	lsrs	r3, r3, #1
 8003446:	3b01      	subs	r3, #1
 8003448:	041b      	lsls	r3, r3, #16
 800344a:	431a      	orrs	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003450:	061b      	lsls	r3, r3, #24
 8003452:	491b      	ldr	r1, [pc, #108]	@ (80034c0 <HAL_RCC_OscConfig+0x470>)
 8003454:	4313      	orrs	r3, r2
 8003456:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003458:	4b1b      	ldr	r3, [pc, #108]	@ (80034c8 <HAL_RCC_OscConfig+0x478>)
 800345a:	2201      	movs	r2, #1
 800345c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345e:	f7fe feab 	bl	80021b8 <HAL_GetTick>
 8003462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003464:	e008      	b.n	8003478 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003466:	f7fe fea7 	bl	80021b8 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e05c      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003478:	4b11      	ldr	r3, [pc, #68]	@ (80034c0 <HAL_RCC_OscConfig+0x470>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0f0      	beq.n	8003466 <HAL_RCC_OscConfig+0x416>
 8003484:	e054      	b.n	8003530 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003486:	4b10      	ldr	r3, [pc, #64]	@ (80034c8 <HAL_RCC_OscConfig+0x478>)
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348c:	f7fe fe94 	bl	80021b8 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003494:	f7fe fe90 	bl	80021b8 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e045      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a6:	4b06      	ldr	r3, [pc, #24]	@ (80034c0 <HAL_RCC_OscConfig+0x470>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1f0      	bne.n	8003494 <HAL_RCC_OscConfig+0x444>
 80034b2:	e03d      	b.n	8003530 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d107      	bne.n	80034cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e038      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
 80034c0:	40023800 	.word	0x40023800
 80034c4:	40007000 	.word	0x40007000
 80034c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034cc:	4b1b      	ldr	r3, [pc, #108]	@ (800353c <HAL_RCC_OscConfig+0x4ec>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d028      	beq.n	800352c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d121      	bne.n	800352c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d11a      	bne.n	800352c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80034fc:	4013      	ands	r3, r2
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003502:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003504:	4293      	cmp	r3, r2
 8003506:	d111      	bne.n	800352c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003512:	085b      	lsrs	r3, r3, #1
 8003514:	3b01      	subs	r3, #1
 8003516:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003518:	429a      	cmp	r2, r3
 800351a:	d107      	bne.n	800352c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003526:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003528:	429a      	cmp	r2, r3
 800352a:	d001      	beq.n	8003530 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e000      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3718      	adds	r7, #24
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	40023800 	.word	0x40023800

08003540 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d101      	bne.n	8003554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e0cc      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003554:	4b68      	ldr	r3, [pc, #416]	@ (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0307 	and.w	r3, r3, #7
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	429a      	cmp	r2, r3
 8003560:	d90c      	bls.n	800357c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003562:	4b65      	ldr	r3, [pc, #404]	@ (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800356a:	4b63      	ldr	r3, [pc, #396]	@ (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0307 	and.w	r3, r3, #7
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	429a      	cmp	r2, r3
 8003576:	d001      	beq.n	800357c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e0b8      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d020      	beq.n	80035ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b00      	cmp	r3, #0
 8003592:	d005      	beq.n	80035a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003594:	4b59      	ldr	r3, [pc, #356]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	4a58      	ldr	r2, [pc, #352]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 800359a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800359e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0308 	and.w	r3, r3, #8
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d005      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035ac:	4b53      	ldr	r3, [pc, #332]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	4a52      	ldr	r2, [pc, #328]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80035b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80035b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035b8:	4b50      	ldr	r3, [pc, #320]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	494d      	ldr	r1, [pc, #308]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d044      	beq.n	8003660 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d107      	bne.n	80035ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035de:	4b47      	ldr	r3, [pc, #284]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d119      	bne.n	800361e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e07f      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d003      	beq.n	80035fe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035fa:	2b03      	cmp	r3, #3
 80035fc:	d107      	bne.n	800360e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035fe:	4b3f      	ldr	r3, [pc, #252]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d109      	bne.n	800361e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e06f      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800360e:	4b3b      	ldr	r3, [pc, #236]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e067      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800361e:	4b37      	ldr	r3, [pc, #220]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f023 0203 	bic.w	r2, r3, #3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	4934      	ldr	r1, [pc, #208]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 800362c:	4313      	orrs	r3, r2
 800362e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003630:	f7fe fdc2 	bl	80021b8 <HAL_GetTick>
 8003634:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003636:	e00a      	b.n	800364e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003638:	f7fe fdbe 	bl	80021b8 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003646:	4293      	cmp	r3, r2
 8003648:	d901      	bls.n	800364e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e04f      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800364e:	4b2b      	ldr	r3, [pc, #172]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 020c 	and.w	r2, r3, #12
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	429a      	cmp	r2, r3
 800365e:	d1eb      	bne.n	8003638 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003660:	4b25      	ldr	r3, [pc, #148]	@ (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0307 	and.w	r3, r3, #7
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	429a      	cmp	r2, r3
 800366c:	d20c      	bcs.n	8003688 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800366e:	4b22      	ldr	r3, [pc, #136]	@ (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	b2d2      	uxtb	r2, r2
 8003674:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003676:	4b20      	ldr	r3, [pc, #128]	@ (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0307 	and.w	r3, r3, #7
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	429a      	cmp	r2, r3
 8003682:	d001      	beq.n	8003688 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e032      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	d008      	beq.n	80036a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003694:	4b19      	ldr	r3, [pc, #100]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	4916      	ldr	r1, [pc, #88]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d009      	beq.n	80036c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036b2:	4b12      	ldr	r3, [pc, #72]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	490e      	ldr	r1, [pc, #56]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036c6:	f000 f82d 	bl	8003724 <HAL_RCC_GetSysClockFreq>
 80036ca:	4602      	mov	r2, r0
 80036cc:	4b0b      	ldr	r3, [pc, #44]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	091b      	lsrs	r3, r3, #4
 80036d2:	f003 030f 	and.w	r3, r3, #15
 80036d6:	490a      	ldr	r1, [pc, #40]	@ (8003700 <HAL_RCC_ClockConfig+0x1c0>)
 80036d8:	5ccb      	ldrb	r3, [r1, r3]
 80036da:	fa22 f303 	lsr.w	r3, r2, r3
 80036de:	4a09      	ldr	r2, [pc, #36]	@ (8003704 <HAL_RCC_ClockConfig+0x1c4>)
 80036e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80036e2:	4b09      	ldr	r3, [pc, #36]	@ (8003708 <HAL_RCC_ClockConfig+0x1c8>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fe fbec 	bl	8001ec4 <HAL_InitTick>

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40023c00 	.word	0x40023c00
 80036fc:	40023800 	.word	0x40023800
 8003700:	0800533c 	.word	0x0800533c
 8003704:	20000010 	.word	0x20000010
 8003708:	20000014 	.word	0x20000014

0800370c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8003710:	4b03      	ldr	r3, [pc, #12]	@ (8003720 <HAL_RCC_EnableCSS+0x14>)
 8003712:	2201      	movs	r2, #1
 8003714:	601a      	str	r2, [r3, #0]
}
 8003716:	bf00      	nop
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	4247004c 	.word	0x4247004c

08003724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003724:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003728:	b090      	sub	sp, #64	@ 0x40
 800372a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800372c:	2300      	movs	r3, #0
 800372e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003730:	2300      	movs	r3, #0
 8003732:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003734:	2300      	movs	r3, #0
 8003736:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003738:	2300      	movs	r3, #0
 800373a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800373c:	4b59      	ldr	r3, [pc, #356]	@ (80038a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f003 030c 	and.w	r3, r3, #12
 8003744:	2b08      	cmp	r3, #8
 8003746:	d00d      	beq.n	8003764 <HAL_RCC_GetSysClockFreq+0x40>
 8003748:	2b08      	cmp	r3, #8
 800374a:	f200 80a1 	bhi.w	8003890 <HAL_RCC_GetSysClockFreq+0x16c>
 800374e:	2b00      	cmp	r3, #0
 8003750:	d002      	beq.n	8003758 <HAL_RCC_GetSysClockFreq+0x34>
 8003752:	2b04      	cmp	r3, #4
 8003754:	d003      	beq.n	800375e <HAL_RCC_GetSysClockFreq+0x3a>
 8003756:	e09b      	b.n	8003890 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003758:	4b53      	ldr	r3, [pc, #332]	@ (80038a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800375a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800375c:	e09b      	b.n	8003896 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800375e:	4b53      	ldr	r3, [pc, #332]	@ (80038ac <HAL_RCC_GetSysClockFreq+0x188>)
 8003760:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003762:	e098      	b.n	8003896 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003764:	4b4f      	ldr	r3, [pc, #316]	@ (80038a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800376c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800376e:	4b4d      	ldr	r3, [pc, #308]	@ (80038a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d028      	beq.n	80037cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800377a:	4b4a      	ldr	r3, [pc, #296]	@ (80038a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	099b      	lsrs	r3, r3, #6
 8003780:	2200      	movs	r2, #0
 8003782:	623b      	str	r3, [r7, #32]
 8003784:	627a      	str	r2, [r7, #36]	@ 0x24
 8003786:	6a3b      	ldr	r3, [r7, #32]
 8003788:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800378c:	2100      	movs	r1, #0
 800378e:	4b47      	ldr	r3, [pc, #284]	@ (80038ac <HAL_RCC_GetSysClockFreq+0x188>)
 8003790:	fb03 f201 	mul.w	r2, r3, r1
 8003794:	2300      	movs	r3, #0
 8003796:	fb00 f303 	mul.w	r3, r0, r3
 800379a:	4413      	add	r3, r2
 800379c:	4a43      	ldr	r2, [pc, #268]	@ (80038ac <HAL_RCC_GetSysClockFreq+0x188>)
 800379e:	fba0 1202 	umull	r1, r2, r0, r2
 80037a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037a4:	460a      	mov	r2, r1
 80037a6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80037a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037aa:	4413      	add	r3, r2
 80037ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037b0:	2200      	movs	r2, #0
 80037b2:	61bb      	str	r3, [r7, #24]
 80037b4:	61fa      	str	r2, [r7, #28]
 80037b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80037be:	f7fc fd67 	bl	8000290 <__aeabi_uldivmod>
 80037c2:	4602      	mov	r2, r0
 80037c4:	460b      	mov	r3, r1
 80037c6:	4613      	mov	r3, r2
 80037c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037ca:	e053      	b.n	8003874 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037cc:	4b35      	ldr	r3, [pc, #212]	@ (80038a4 <HAL_RCC_GetSysClockFreq+0x180>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	099b      	lsrs	r3, r3, #6
 80037d2:	2200      	movs	r2, #0
 80037d4:	613b      	str	r3, [r7, #16]
 80037d6:	617a      	str	r2, [r7, #20]
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80037de:	f04f 0b00 	mov.w	fp, #0
 80037e2:	4652      	mov	r2, sl
 80037e4:	465b      	mov	r3, fp
 80037e6:	f04f 0000 	mov.w	r0, #0
 80037ea:	f04f 0100 	mov.w	r1, #0
 80037ee:	0159      	lsls	r1, r3, #5
 80037f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037f4:	0150      	lsls	r0, r2, #5
 80037f6:	4602      	mov	r2, r0
 80037f8:	460b      	mov	r3, r1
 80037fa:	ebb2 080a 	subs.w	r8, r2, sl
 80037fe:	eb63 090b 	sbc.w	r9, r3, fp
 8003802:	f04f 0200 	mov.w	r2, #0
 8003806:	f04f 0300 	mov.w	r3, #0
 800380a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800380e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003812:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003816:	ebb2 0408 	subs.w	r4, r2, r8
 800381a:	eb63 0509 	sbc.w	r5, r3, r9
 800381e:	f04f 0200 	mov.w	r2, #0
 8003822:	f04f 0300 	mov.w	r3, #0
 8003826:	00eb      	lsls	r3, r5, #3
 8003828:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800382c:	00e2      	lsls	r2, r4, #3
 800382e:	4614      	mov	r4, r2
 8003830:	461d      	mov	r5, r3
 8003832:	eb14 030a 	adds.w	r3, r4, sl
 8003836:	603b      	str	r3, [r7, #0]
 8003838:	eb45 030b 	adc.w	r3, r5, fp
 800383c:	607b      	str	r3, [r7, #4]
 800383e:	f04f 0200 	mov.w	r2, #0
 8003842:	f04f 0300 	mov.w	r3, #0
 8003846:	e9d7 4500 	ldrd	r4, r5, [r7]
 800384a:	4629      	mov	r1, r5
 800384c:	028b      	lsls	r3, r1, #10
 800384e:	4621      	mov	r1, r4
 8003850:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003854:	4621      	mov	r1, r4
 8003856:	028a      	lsls	r2, r1, #10
 8003858:	4610      	mov	r0, r2
 800385a:	4619      	mov	r1, r3
 800385c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800385e:	2200      	movs	r2, #0
 8003860:	60bb      	str	r3, [r7, #8]
 8003862:	60fa      	str	r2, [r7, #12]
 8003864:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003868:	f7fc fd12 	bl	8000290 <__aeabi_uldivmod>
 800386c:	4602      	mov	r2, r0
 800386e:	460b      	mov	r3, r1
 8003870:	4613      	mov	r3, r2
 8003872:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003874:	4b0b      	ldr	r3, [pc, #44]	@ (80038a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	0c1b      	lsrs	r3, r3, #16
 800387a:	f003 0303 	and.w	r3, r3, #3
 800387e:	3301      	adds	r3, #1
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003884:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003888:	fbb2 f3f3 	udiv	r3, r2, r3
 800388c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800388e:	e002      	b.n	8003896 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003890:	4b05      	ldr	r3, [pc, #20]	@ (80038a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003892:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003894:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003898:	4618      	mov	r0, r3
 800389a:	3740      	adds	r7, #64	@ 0x40
 800389c:	46bd      	mov	sp, r7
 800389e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038a2:	bf00      	nop
 80038a4:	40023800 	.word	0x40023800
 80038a8:	00f42400 	.word	0x00f42400
 80038ac:	017d7840 	.word	0x017d7840

080038b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038b4:	4b03      	ldr	r3, [pc, #12]	@ (80038c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80038b6:	681b      	ldr	r3, [r3, #0]
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	20000010 	.word	0x20000010

080038c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038cc:	f7ff fff0 	bl	80038b0 <HAL_RCC_GetHCLKFreq>
 80038d0:	4602      	mov	r2, r0
 80038d2:	4b05      	ldr	r3, [pc, #20]	@ (80038e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	0a9b      	lsrs	r3, r3, #10
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	4903      	ldr	r1, [pc, #12]	@ (80038ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80038de:	5ccb      	ldrb	r3, [r1, r3]
 80038e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	40023800 	.word	0x40023800
 80038ec:	0800534c 	.word	0x0800534c

080038f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038f4:	f7ff ffdc 	bl	80038b0 <HAL_RCC_GetHCLKFreq>
 80038f8:	4602      	mov	r2, r0
 80038fa:	4b05      	ldr	r3, [pc, #20]	@ (8003910 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	0b5b      	lsrs	r3, r3, #13
 8003900:	f003 0307 	and.w	r3, r3, #7
 8003904:	4903      	ldr	r1, [pc, #12]	@ (8003914 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003906:	5ccb      	ldrb	r3, [r1, r3]
 8003908:	fa22 f303 	lsr.w	r3, r2, r3
}
 800390c:	4618      	mov	r0, r3
 800390e:	bd80      	pop	{r7, pc}
 8003910:	40023800 	.word	0x40023800
 8003914:	0800534c 	.word	0x0800534c

08003918 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	220f      	movs	r2, #15
 8003926:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003928:	4b12      	ldr	r3, [pc, #72]	@ (8003974 <HAL_RCC_GetClockConfig+0x5c>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f003 0203 	and.w	r2, r3, #3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003934:	4b0f      	ldr	r3, [pc, #60]	@ (8003974 <HAL_RCC_GetClockConfig+0x5c>)
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003940:	4b0c      	ldr	r3, [pc, #48]	@ (8003974 <HAL_RCC_GetClockConfig+0x5c>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800394c:	4b09      	ldr	r3, [pc, #36]	@ (8003974 <HAL_RCC_GetClockConfig+0x5c>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	08db      	lsrs	r3, r3, #3
 8003952:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800395a:	4b07      	ldr	r3, [pc, #28]	@ (8003978 <HAL_RCC_GetClockConfig+0x60>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0207 	and.w	r2, r3, #7
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	601a      	str	r2, [r3, #0]
}
 8003966:	bf00      	nop
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	40023800 	.word	0x40023800
 8003978:	40023c00 	.word	0x40023c00

0800397c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003980:	4b06      	ldr	r3, [pc, #24]	@ (800399c <HAL_RCC_NMI_IRQHandler+0x20>)
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003988:	2b80      	cmp	r3, #128	@ 0x80
 800398a:	d104      	bne.n	8003996 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800398c:	f000 f80a 	bl	80039a4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003990:	4b03      	ldr	r3, [pc, #12]	@ (80039a0 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003992:	2280      	movs	r2, #128	@ 0x80
 8003994:	701a      	strb	r2, [r3, #0]
  }
}
 8003996:	bf00      	nop
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	40023800 	.word	0x40023800
 80039a0:	4002380e 	.word	0x4002380e

080039a4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80039a8:	bf00      	nop
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b082      	sub	sp, #8
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d101      	bne.n	80039c4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e041      	b.n	8003a48 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d106      	bne.n	80039de <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 f839 	bl	8003a50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2202      	movs	r2, #2
 80039e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	3304      	adds	r3, #4
 80039ee:	4619      	mov	r1, r3
 80039f0:	4610      	mov	r0, r2
 80039f2:	f000 f9b1 	bl	8003d58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2201      	movs	r2, #1
 8003a22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d001      	beq.n	8003a7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e044      	b.n	8003b06 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2202      	movs	r2, #2
 8003a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68da      	ldr	r2, [r3, #12]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f042 0201 	orr.w	r2, r2, #1
 8003a92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a1e      	ldr	r2, [pc, #120]	@ (8003b14 <HAL_TIM_Base_Start_IT+0xb0>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d018      	beq.n	8003ad0 <HAL_TIM_Base_Start_IT+0x6c>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aa6:	d013      	beq.n	8003ad0 <HAL_TIM_Base_Start_IT+0x6c>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a1a      	ldr	r2, [pc, #104]	@ (8003b18 <HAL_TIM_Base_Start_IT+0xb4>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d00e      	beq.n	8003ad0 <HAL_TIM_Base_Start_IT+0x6c>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a19      	ldr	r2, [pc, #100]	@ (8003b1c <HAL_TIM_Base_Start_IT+0xb8>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d009      	beq.n	8003ad0 <HAL_TIM_Base_Start_IT+0x6c>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a17      	ldr	r2, [pc, #92]	@ (8003b20 <HAL_TIM_Base_Start_IT+0xbc>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d004      	beq.n	8003ad0 <HAL_TIM_Base_Start_IT+0x6c>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a16      	ldr	r2, [pc, #88]	@ (8003b24 <HAL_TIM_Base_Start_IT+0xc0>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d111      	bne.n	8003af4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f003 0307 	and.w	r3, r3, #7
 8003ada:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2b06      	cmp	r3, #6
 8003ae0:	d010      	beq.n	8003b04 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f042 0201 	orr.w	r2, r2, #1
 8003af0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003af2:	e007      	b.n	8003b04 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f042 0201 	orr.w	r2, r2, #1
 8003b02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	40010000 	.word	0x40010000
 8003b18:	40000400 	.word	0x40000400
 8003b1c:	40000800 	.word	0x40000800
 8003b20:	40000c00 	.word	0x40000c00
 8003b24:	40014000 	.word	0x40014000

08003b28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d020      	beq.n	8003b8c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d01b      	beq.n	8003b8c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f06f 0202 	mvn.w	r2, #2
 8003b5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2201      	movs	r2, #1
 8003b62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	f003 0303 	and.w	r3, r3, #3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f8d2 	bl	8003d1c <HAL_TIM_IC_CaptureCallback>
 8003b78:	e005      	b.n	8003b86 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f8c4 	bl	8003d08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 f8d5 	bl	8003d30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	f003 0304 	and.w	r3, r3, #4
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d020      	beq.n	8003bd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f003 0304 	and.w	r3, r3, #4
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d01b      	beq.n	8003bd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f06f 0204 	mvn.w	r2, #4
 8003ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2202      	movs	r2, #2
 8003bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f8ac 	bl	8003d1c <HAL_TIM_IC_CaptureCallback>
 8003bc4:	e005      	b.n	8003bd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f89e 	bl	8003d08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 f8af 	bl	8003d30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	f003 0308 	and.w	r3, r3, #8
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d020      	beq.n	8003c24 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f003 0308 	and.w	r3, r3, #8
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d01b      	beq.n	8003c24 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f06f 0208 	mvn.w	r2, #8
 8003bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2204      	movs	r2, #4
 8003bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	69db      	ldr	r3, [r3, #28]
 8003c02:	f003 0303 	and.w	r3, r3, #3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d003      	beq.n	8003c12 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f886 	bl	8003d1c <HAL_TIM_IC_CaptureCallback>
 8003c10:	e005      	b.n	8003c1e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 f878 	bl	8003d08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 f889 	bl	8003d30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	f003 0310 	and.w	r3, r3, #16
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d020      	beq.n	8003c70 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f003 0310 	and.w	r3, r3, #16
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d01b      	beq.n	8003c70 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f06f 0210 	mvn.w	r2, #16
 8003c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2208      	movs	r2, #8
 8003c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	69db      	ldr	r3, [r3, #28]
 8003c4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d003      	beq.n	8003c5e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f860 	bl	8003d1c <HAL_TIM_IC_CaptureCallback>
 8003c5c:	e005      	b.n	8003c6a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f852 	bl	8003d08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 f863 	bl	8003d30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00c      	beq.n	8003c94 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d007      	beq.n	8003c94 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f06f 0201 	mvn.w	r2, #1
 8003c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7fd fcf2 	bl	8001678 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00c      	beq.n	8003cb8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d007      	beq.n	8003cb8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f8e0 	bl	8003e78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00c      	beq.n	8003cdc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d007      	beq.n	8003cdc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 f834 	bl	8003d44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	f003 0320 	and.w	r3, r3, #32
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00c      	beq.n	8003d00 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f003 0320 	and.w	r3, r3, #32
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d007      	beq.n	8003d00 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f06f 0220 	mvn.w	r2, #32
 8003cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f8b2 	bl	8003e64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d00:	bf00      	nop
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a37      	ldr	r2, [pc, #220]	@ (8003e48 <TIM_Base_SetConfig+0xf0>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d00f      	beq.n	8003d90 <TIM_Base_SetConfig+0x38>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d76:	d00b      	beq.n	8003d90 <TIM_Base_SetConfig+0x38>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a34      	ldr	r2, [pc, #208]	@ (8003e4c <TIM_Base_SetConfig+0xf4>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d007      	beq.n	8003d90 <TIM_Base_SetConfig+0x38>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a33      	ldr	r2, [pc, #204]	@ (8003e50 <TIM_Base_SetConfig+0xf8>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d003      	beq.n	8003d90 <TIM_Base_SetConfig+0x38>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a32      	ldr	r2, [pc, #200]	@ (8003e54 <TIM_Base_SetConfig+0xfc>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d108      	bne.n	8003da2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a28      	ldr	r2, [pc, #160]	@ (8003e48 <TIM_Base_SetConfig+0xf0>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d01b      	beq.n	8003de2 <TIM_Base_SetConfig+0x8a>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003db0:	d017      	beq.n	8003de2 <TIM_Base_SetConfig+0x8a>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a25      	ldr	r2, [pc, #148]	@ (8003e4c <TIM_Base_SetConfig+0xf4>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d013      	beq.n	8003de2 <TIM_Base_SetConfig+0x8a>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a24      	ldr	r2, [pc, #144]	@ (8003e50 <TIM_Base_SetConfig+0xf8>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d00f      	beq.n	8003de2 <TIM_Base_SetConfig+0x8a>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a23      	ldr	r2, [pc, #140]	@ (8003e54 <TIM_Base_SetConfig+0xfc>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d00b      	beq.n	8003de2 <TIM_Base_SetConfig+0x8a>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a22      	ldr	r2, [pc, #136]	@ (8003e58 <TIM_Base_SetConfig+0x100>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d007      	beq.n	8003de2 <TIM_Base_SetConfig+0x8a>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a21      	ldr	r2, [pc, #132]	@ (8003e5c <TIM_Base_SetConfig+0x104>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d003      	beq.n	8003de2 <TIM_Base_SetConfig+0x8a>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a20      	ldr	r2, [pc, #128]	@ (8003e60 <TIM_Base_SetConfig+0x108>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d108      	bne.n	8003df4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003de8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	689a      	ldr	r2, [r3, #8]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a0c      	ldr	r2, [pc, #48]	@ (8003e48 <TIM_Base_SetConfig+0xf0>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d103      	bne.n	8003e22 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	691a      	ldr	r2, [r3, #16]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f043 0204 	orr.w	r2, r3, #4
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2201      	movs	r2, #1
 8003e32:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	601a      	str	r2, [r3, #0]
}
 8003e3a:	bf00      	nop
 8003e3c:	3714      	adds	r7, #20
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	40010000 	.word	0x40010000
 8003e4c:	40000400 	.word	0x40000400
 8003e50:	40000800 	.word	0x40000800
 8003e54:	40000c00 	.word	0x40000c00
 8003e58:	40014000 	.word	0x40014000
 8003e5c:	40014400 	.word	0x40014400
 8003e60:	40014800 	.word	0x40014800

08003e64 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e042      	b.n	8003f24 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d106      	bne.n	8003eb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7fd ffbe 	bl	8001e34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2224      	movs	r2, #36	@ 0x24
 8003ebc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68da      	ldr	r2, [r3, #12]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ece:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 f973 	bl	80041bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	691a      	ldr	r2, [r3, #16]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ee4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	695a      	ldr	r2, [r3, #20]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ef4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68da      	ldr	r2, [r3, #12]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2220      	movs	r2, #32
 8003f18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3708      	adds	r7, #8
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b08a      	sub	sp, #40	@ 0x28
 8003f30:	af02      	add	r7, sp, #8
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	603b      	str	r3, [r7, #0]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b20      	cmp	r3, #32
 8003f4a:	d175      	bne.n	8004038 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d002      	beq.n	8003f58 <HAL_UART_Transmit+0x2c>
 8003f52:	88fb      	ldrh	r3, [r7, #6]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d101      	bne.n	8003f5c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e06e      	b.n	800403a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2221      	movs	r2, #33	@ 0x21
 8003f66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f6a:	f7fe f925 	bl	80021b8 <HAL_GetTick>
 8003f6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	88fa      	ldrh	r2, [r7, #6]
 8003f74:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	88fa      	ldrh	r2, [r7, #6]
 8003f7a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f84:	d108      	bne.n	8003f98 <HAL_UART_Transmit+0x6c>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d104      	bne.n	8003f98 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	61bb      	str	r3, [r7, #24]
 8003f96:	e003      	b.n	8003fa0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003fa0:	e02e      	b.n	8004000 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	2180      	movs	r1, #128	@ 0x80
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f000 f848 	bl	8004042 <UART_WaitOnFlagUntilTimeout>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d005      	beq.n	8003fc4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e03a      	b.n	800403a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10b      	bne.n	8003fe2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	881b      	ldrh	r3, [r3, #0]
 8003fce:	461a      	mov	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fd8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	3302      	adds	r3, #2
 8003fde:	61bb      	str	r3, [r7, #24]
 8003fe0:	e007      	b.n	8003ff2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	781a      	ldrb	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	3301      	adds	r3, #1
 8003ff0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004004:	b29b      	uxth	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1cb      	bne.n	8003fa2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	2200      	movs	r2, #0
 8004012:	2140      	movs	r1, #64	@ 0x40
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f000 f814 	bl	8004042 <UART_WaitOnFlagUntilTimeout>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d005      	beq.n	800402c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2220      	movs	r2, #32
 8004024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e006      	b.n	800403a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2220      	movs	r2, #32
 8004030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004034:	2300      	movs	r3, #0
 8004036:	e000      	b.n	800403a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004038:	2302      	movs	r3, #2
  }
}
 800403a:	4618      	mov	r0, r3
 800403c:	3720      	adds	r7, #32
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004042:	b580      	push	{r7, lr}
 8004044:	b086      	sub	sp, #24
 8004046:	af00      	add	r7, sp, #0
 8004048:	60f8      	str	r0, [r7, #12]
 800404a:	60b9      	str	r1, [r7, #8]
 800404c:	603b      	str	r3, [r7, #0]
 800404e:	4613      	mov	r3, r2
 8004050:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004052:	e03b      	b.n	80040cc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004054:	6a3b      	ldr	r3, [r7, #32]
 8004056:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800405a:	d037      	beq.n	80040cc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800405c:	f7fe f8ac 	bl	80021b8 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	6a3a      	ldr	r2, [r7, #32]
 8004068:	429a      	cmp	r2, r3
 800406a:	d302      	bcc.n	8004072 <UART_WaitOnFlagUntilTimeout+0x30>
 800406c:	6a3b      	ldr	r3, [r7, #32]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e03a      	b.n	80040ec <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f003 0304 	and.w	r3, r3, #4
 8004080:	2b00      	cmp	r3, #0
 8004082:	d023      	beq.n	80040cc <UART_WaitOnFlagUntilTimeout+0x8a>
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	2b80      	cmp	r3, #128	@ 0x80
 8004088:	d020      	beq.n	80040cc <UART_WaitOnFlagUntilTimeout+0x8a>
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	2b40      	cmp	r3, #64	@ 0x40
 800408e:	d01d      	beq.n	80040cc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0308 	and.w	r3, r3, #8
 800409a:	2b08      	cmp	r3, #8
 800409c:	d116      	bne.n	80040cc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800409e:	2300      	movs	r3, #0
 80040a0:	617b      	str	r3, [r7, #20]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	617b      	str	r3, [r7, #20]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	617b      	str	r3, [r7, #20]
 80040b2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f000 f81d 	bl	80040f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2208      	movs	r2, #8
 80040be:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e00f      	b.n	80040ec <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	4013      	ands	r3, r2
 80040d6:	68ba      	ldr	r2, [r7, #8]
 80040d8:	429a      	cmp	r2, r3
 80040da:	bf0c      	ite	eq
 80040dc:	2301      	moveq	r3, #1
 80040de:	2300      	movne	r3, #0
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	461a      	mov	r2, r3
 80040e4:	79fb      	ldrb	r3, [r7, #7]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d0b4      	beq.n	8004054 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3718      	adds	r7, #24
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b095      	sub	sp, #84	@ 0x54
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	330c      	adds	r3, #12
 8004102:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004104:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004106:	e853 3f00 	ldrex	r3, [r3]
 800410a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800410c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800410e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004112:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	330c      	adds	r3, #12
 800411a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800411c:	643a      	str	r2, [r7, #64]	@ 0x40
 800411e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004120:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004122:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004124:	e841 2300 	strex	r3, r2, [r1]
 8004128:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800412a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1e5      	bne.n	80040fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	3314      	adds	r3, #20
 8004136:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004138:	6a3b      	ldr	r3, [r7, #32]
 800413a:	e853 3f00 	ldrex	r3, [r3]
 800413e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	f023 0301 	bic.w	r3, r3, #1
 8004146:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	3314      	adds	r3, #20
 800414e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004150:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004152:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004154:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004156:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004158:	e841 2300 	strex	r3, r2, [r1]
 800415c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800415e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1e5      	bne.n	8004130 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004168:	2b01      	cmp	r3, #1
 800416a:	d119      	bne.n	80041a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	330c      	adds	r3, #12
 8004172:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	e853 3f00 	ldrex	r3, [r3]
 800417a:	60bb      	str	r3, [r7, #8]
   return(result);
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	f023 0310 	bic.w	r3, r3, #16
 8004182:	647b      	str	r3, [r7, #68]	@ 0x44
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	330c      	adds	r3, #12
 800418a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800418c:	61ba      	str	r2, [r7, #24]
 800418e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004190:	6979      	ldr	r1, [r7, #20]
 8004192:	69ba      	ldr	r2, [r7, #24]
 8004194:	e841 2300 	strex	r3, r2, [r1]
 8004198:	613b      	str	r3, [r7, #16]
   return(result);
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1e5      	bne.n	800416c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80041ae:	bf00      	nop
 80041b0:	3754      	adds	r7, #84	@ 0x54
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
	...

080041bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041c0:	b0c0      	sub	sp, #256	@ 0x100
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80041d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041d8:	68d9      	ldr	r1, [r3, #12]
 80041da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	ea40 0301 	orr.w	r3, r0, r1
 80041e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ea:	689a      	ldr	r2, [r3, #8]
 80041ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	431a      	orrs	r2, r3
 80041f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	431a      	orrs	r2, r3
 80041fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	4313      	orrs	r3, r2
 8004204:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004214:	f021 010c 	bic.w	r1, r1, #12
 8004218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004222:	430b      	orrs	r3, r1
 8004224:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004236:	6999      	ldr	r1, [r3, #24]
 8004238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	ea40 0301 	orr.w	r3, r0, r1
 8004242:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	4b8f      	ldr	r3, [pc, #572]	@ (8004488 <UART_SetConfig+0x2cc>)
 800424c:	429a      	cmp	r2, r3
 800424e:	d005      	beq.n	800425c <UART_SetConfig+0xa0>
 8004250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	4b8d      	ldr	r3, [pc, #564]	@ (800448c <UART_SetConfig+0x2d0>)
 8004258:	429a      	cmp	r2, r3
 800425a:	d104      	bne.n	8004266 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800425c:	f7ff fb48 	bl	80038f0 <HAL_RCC_GetPCLK2Freq>
 8004260:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004264:	e003      	b.n	800426e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004266:	f7ff fb2f 	bl	80038c8 <HAL_RCC_GetPCLK1Freq>
 800426a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800426e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004272:	69db      	ldr	r3, [r3, #28]
 8004274:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004278:	f040 810c 	bne.w	8004494 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800427c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004280:	2200      	movs	r2, #0
 8004282:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004286:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800428a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800428e:	4622      	mov	r2, r4
 8004290:	462b      	mov	r3, r5
 8004292:	1891      	adds	r1, r2, r2
 8004294:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004296:	415b      	adcs	r3, r3
 8004298:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800429a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800429e:	4621      	mov	r1, r4
 80042a0:	eb12 0801 	adds.w	r8, r2, r1
 80042a4:	4629      	mov	r1, r5
 80042a6:	eb43 0901 	adc.w	r9, r3, r1
 80042aa:	f04f 0200 	mov.w	r2, #0
 80042ae:	f04f 0300 	mov.w	r3, #0
 80042b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042be:	4690      	mov	r8, r2
 80042c0:	4699      	mov	r9, r3
 80042c2:	4623      	mov	r3, r4
 80042c4:	eb18 0303 	adds.w	r3, r8, r3
 80042c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80042cc:	462b      	mov	r3, r5
 80042ce:	eb49 0303 	adc.w	r3, r9, r3
 80042d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80042d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80042e2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80042e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80042ea:	460b      	mov	r3, r1
 80042ec:	18db      	adds	r3, r3, r3
 80042ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80042f0:	4613      	mov	r3, r2
 80042f2:	eb42 0303 	adc.w	r3, r2, r3
 80042f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80042f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80042fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004300:	f7fb ffc6 	bl	8000290 <__aeabi_uldivmod>
 8004304:	4602      	mov	r2, r0
 8004306:	460b      	mov	r3, r1
 8004308:	4b61      	ldr	r3, [pc, #388]	@ (8004490 <UART_SetConfig+0x2d4>)
 800430a:	fba3 2302 	umull	r2, r3, r3, r2
 800430e:	095b      	lsrs	r3, r3, #5
 8004310:	011c      	lsls	r4, r3, #4
 8004312:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004316:	2200      	movs	r2, #0
 8004318:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800431c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004320:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004324:	4642      	mov	r2, r8
 8004326:	464b      	mov	r3, r9
 8004328:	1891      	adds	r1, r2, r2
 800432a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800432c:	415b      	adcs	r3, r3
 800432e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004330:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004334:	4641      	mov	r1, r8
 8004336:	eb12 0a01 	adds.w	sl, r2, r1
 800433a:	4649      	mov	r1, r9
 800433c:	eb43 0b01 	adc.w	fp, r3, r1
 8004340:	f04f 0200 	mov.w	r2, #0
 8004344:	f04f 0300 	mov.w	r3, #0
 8004348:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800434c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004350:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004354:	4692      	mov	sl, r2
 8004356:	469b      	mov	fp, r3
 8004358:	4643      	mov	r3, r8
 800435a:	eb1a 0303 	adds.w	r3, sl, r3
 800435e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004362:	464b      	mov	r3, r9
 8004364:	eb4b 0303 	adc.w	r3, fp, r3
 8004368:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800436c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004378:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800437c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004380:	460b      	mov	r3, r1
 8004382:	18db      	adds	r3, r3, r3
 8004384:	643b      	str	r3, [r7, #64]	@ 0x40
 8004386:	4613      	mov	r3, r2
 8004388:	eb42 0303 	adc.w	r3, r2, r3
 800438c:	647b      	str	r3, [r7, #68]	@ 0x44
 800438e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004392:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004396:	f7fb ff7b 	bl	8000290 <__aeabi_uldivmod>
 800439a:	4602      	mov	r2, r0
 800439c:	460b      	mov	r3, r1
 800439e:	4611      	mov	r1, r2
 80043a0:	4b3b      	ldr	r3, [pc, #236]	@ (8004490 <UART_SetConfig+0x2d4>)
 80043a2:	fba3 2301 	umull	r2, r3, r3, r1
 80043a6:	095b      	lsrs	r3, r3, #5
 80043a8:	2264      	movs	r2, #100	@ 0x64
 80043aa:	fb02 f303 	mul.w	r3, r2, r3
 80043ae:	1acb      	subs	r3, r1, r3
 80043b0:	00db      	lsls	r3, r3, #3
 80043b2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80043b6:	4b36      	ldr	r3, [pc, #216]	@ (8004490 <UART_SetConfig+0x2d4>)
 80043b8:	fba3 2302 	umull	r2, r3, r3, r2
 80043bc:	095b      	lsrs	r3, r3, #5
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80043c4:	441c      	add	r4, r3
 80043c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043ca:	2200      	movs	r2, #0
 80043cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80043d0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80043d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80043d8:	4642      	mov	r2, r8
 80043da:	464b      	mov	r3, r9
 80043dc:	1891      	adds	r1, r2, r2
 80043de:	63b9      	str	r1, [r7, #56]	@ 0x38
 80043e0:	415b      	adcs	r3, r3
 80043e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80043e8:	4641      	mov	r1, r8
 80043ea:	1851      	adds	r1, r2, r1
 80043ec:	6339      	str	r1, [r7, #48]	@ 0x30
 80043ee:	4649      	mov	r1, r9
 80043f0:	414b      	adcs	r3, r1
 80043f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80043f4:	f04f 0200 	mov.w	r2, #0
 80043f8:	f04f 0300 	mov.w	r3, #0
 80043fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004400:	4659      	mov	r1, fp
 8004402:	00cb      	lsls	r3, r1, #3
 8004404:	4651      	mov	r1, sl
 8004406:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800440a:	4651      	mov	r1, sl
 800440c:	00ca      	lsls	r2, r1, #3
 800440e:	4610      	mov	r0, r2
 8004410:	4619      	mov	r1, r3
 8004412:	4603      	mov	r3, r0
 8004414:	4642      	mov	r2, r8
 8004416:	189b      	adds	r3, r3, r2
 8004418:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800441c:	464b      	mov	r3, r9
 800441e:	460a      	mov	r2, r1
 8004420:	eb42 0303 	adc.w	r3, r2, r3
 8004424:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004434:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004438:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800443c:	460b      	mov	r3, r1
 800443e:	18db      	adds	r3, r3, r3
 8004440:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004442:	4613      	mov	r3, r2
 8004444:	eb42 0303 	adc.w	r3, r2, r3
 8004448:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800444a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800444e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004452:	f7fb ff1d 	bl	8000290 <__aeabi_uldivmod>
 8004456:	4602      	mov	r2, r0
 8004458:	460b      	mov	r3, r1
 800445a:	4b0d      	ldr	r3, [pc, #52]	@ (8004490 <UART_SetConfig+0x2d4>)
 800445c:	fba3 1302 	umull	r1, r3, r3, r2
 8004460:	095b      	lsrs	r3, r3, #5
 8004462:	2164      	movs	r1, #100	@ 0x64
 8004464:	fb01 f303 	mul.w	r3, r1, r3
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	00db      	lsls	r3, r3, #3
 800446c:	3332      	adds	r3, #50	@ 0x32
 800446e:	4a08      	ldr	r2, [pc, #32]	@ (8004490 <UART_SetConfig+0x2d4>)
 8004470:	fba2 2303 	umull	r2, r3, r2, r3
 8004474:	095b      	lsrs	r3, r3, #5
 8004476:	f003 0207 	and.w	r2, r3, #7
 800447a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4422      	add	r2, r4
 8004482:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004484:	e106      	b.n	8004694 <UART_SetConfig+0x4d8>
 8004486:	bf00      	nop
 8004488:	40011000 	.word	0x40011000
 800448c:	40011400 	.word	0x40011400
 8004490:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004494:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004498:	2200      	movs	r2, #0
 800449a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800449e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80044a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80044a6:	4642      	mov	r2, r8
 80044a8:	464b      	mov	r3, r9
 80044aa:	1891      	adds	r1, r2, r2
 80044ac:	6239      	str	r1, [r7, #32]
 80044ae:	415b      	adcs	r3, r3
 80044b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80044b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044b6:	4641      	mov	r1, r8
 80044b8:	1854      	adds	r4, r2, r1
 80044ba:	4649      	mov	r1, r9
 80044bc:	eb43 0501 	adc.w	r5, r3, r1
 80044c0:	f04f 0200 	mov.w	r2, #0
 80044c4:	f04f 0300 	mov.w	r3, #0
 80044c8:	00eb      	lsls	r3, r5, #3
 80044ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044ce:	00e2      	lsls	r2, r4, #3
 80044d0:	4614      	mov	r4, r2
 80044d2:	461d      	mov	r5, r3
 80044d4:	4643      	mov	r3, r8
 80044d6:	18e3      	adds	r3, r4, r3
 80044d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80044dc:	464b      	mov	r3, r9
 80044de:	eb45 0303 	adc.w	r3, r5, r3
 80044e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80044e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80044f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80044f6:	f04f 0200 	mov.w	r2, #0
 80044fa:	f04f 0300 	mov.w	r3, #0
 80044fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004502:	4629      	mov	r1, r5
 8004504:	008b      	lsls	r3, r1, #2
 8004506:	4621      	mov	r1, r4
 8004508:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800450c:	4621      	mov	r1, r4
 800450e:	008a      	lsls	r2, r1, #2
 8004510:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004514:	f7fb febc 	bl	8000290 <__aeabi_uldivmod>
 8004518:	4602      	mov	r2, r0
 800451a:	460b      	mov	r3, r1
 800451c:	4b60      	ldr	r3, [pc, #384]	@ (80046a0 <UART_SetConfig+0x4e4>)
 800451e:	fba3 2302 	umull	r2, r3, r3, r2
 8004522:	095b      	lsrs	r3, r3, #5
 8004524:	011c      	lsls	r4, r3, #4
 8004526:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800452a:	2200      	movs	r2, #0
 800452c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004530:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004534:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004538:	4642      	mov	r2, r8
 800453a:	464b      	mov	r3, r9
 800453c:	1891      	adds	r1, r2, r2
 800453e:	61b9      	str	r1, [r7, #24]
 8004540:	415b      	adcs	r3, r3
 8004542:	61fb      	str	r3, [r7, #28]
 8004544:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004548:	4641      	mov	r1, r8
 800454a:	1851      	adds	r1, r2, r1
 800454c:	6139      	str	r1, [r7, #16]
 800454e:	4649      	mov	r1, r9
 8004550:	414b      	adcs	r3, r1
 8004552:	617b      	str	r3, [r7, #20]
 8004554:	f04f 0200 	mov.w	r2, #0
 8004558:	f04f 0300 	mov.w	r3, #0
 800455c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004560:	4659      	mov	r1, fp
 8004562:	00cb      	lsls	r3, r1, #3
 8004564:	4651      	mov	r1, sl
 8004566:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800456a:	4651      	mov	r1, sl
 800456c:	00ca      	lsls	r2, r1, #3
 800456e:	4610      	mov	r0, r2
 8004570:	4619      	mov	r1, r3
 8004572:	4603      	mov	r3, r0
 8004574:	4642      	mov	r2, r8
 8004576:	189b      	adds	r3, r3, r2
 8004578:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800457c:	464b      	mov	r3, r9
 800457e:	460a      	mov	r2, r1
 8004580:	eb42 0303 	adc.w	r3, r2, r3
 8004584:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004592:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004594:	f04f 0200 	mov.w	r2, #0
 8004598:	f04f 0300 	mov.w	r3, #0
 800459c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80045a0:	4649      	mov	r1, r9
 80045a2:	008b      	lsls	r3, r1, #2
 80045a4:	4641      	mov	r1, r8
 80045a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045aa:	4641      	mov	r1, r8
 80045ac:	008a      	lsls	r2, r1, #2
 80045ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80045b2:	f7fb fe6d 	bl	8000290 <__aeabi_uldivmod>
 80045b6:	4602      	mov	r2, r0
 80045b8:	460b      	mov	r3, r1
 80045ba:	4611      	mov	r1, r2
 80045bc:	4b38      	ldr	r3, [pc, #224]	@ (80046a0 <UART_SetConfig+0x4e4>)
 80045be:	fba3 2301 	umull	r2, r3, r3, r1
 80045c2:	095b      	lsrs	r3, r3, #5
 80045c4:	2264      	movs	r2, #100	@ 0x64
 80045c6:	fb02 f303 	mul.w	r3, r2, r3
 80045ca:	1acb      	subs	r3, r1, r3
 80045cc:	011b      	lsls	r3, r3, #4
 80045ce:	3332      	adds	r3, #50	@ 0x32
 80045d0:	4a33      	ldr	r2, [pc, #204]	@ (80046a0 <UART_SetConfig+0x4e4>)
 80045d2:	fba2 2303 	umull	r2, r3, r2, r3
 80045d6:	095b      	lsrs	r3, r3, #5
 80045d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80045dc:	441c      	add	r4, r3
 80045de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045e2:	2200      	movs	r2, #0
 80045e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80045e6:	677a      	str	r2, [r7, #116]	@ 0x74
 80045e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80045ec:	4642      	mov	r2, r8
 80045ee:	464b      	mov	r3, r9
 80045f0:	1891      	adds	r1, r2, r2
 80045f2:	60b9      	str	r1, [r7, #8]
 80045f4:	415b      	adcs	r3, r3
 80045f6:	60fb      	str	r3, [r7, #12]
 80045f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045fc:	4641      	mov	r1, r8
 80045fe:	1851      	adds	r1, r2, r1
 8004600:	6039      	str	r1, [r7, #0]
 8004602:	4649      	mov	r1, r9
 8004604:	414b      	adcs	r3, r1
 8004606:	607b      	str	r3, [r7, #4]
 8004608:	f04f 0200 	mov.w	r2, #0
 800460c:	f04f 0300 	mov.w	r3, #0
 8004610:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004614:	4659      	mov	r1, fp
 8004616:	00cb      	lsls	r3, r1, #3
 8004618:	4651      	mov	r1, sl
 800461a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800461e:	4651      	mov	r1, sl
 8004620:	00ca      	lsls	r2, r1, #3
 8004622:	4610      	mov	r0, r2
 8004624:	4619      	mov	r1, r3
 8004626:	4603      	mov	r3, r0
 8004628:	4642      	mov	r2, r8
 800462a:	189b      	adds	r3, r3, r2
 800462c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800462e:	464b      	mov	r3, r9
 8004630:	460a      	mov	r2, r1
 8004632:	eb42 0303 	adc.w	r3, r2, r3
 8004636:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	663b      	str	r3, [r7, #96]	@ 0x60
 8004642:	667a      	str	r2, [r7, #100]	@ 0x64
 8004644:	f04f 0200 	mov.w	r2, #0
 8004648:	f04f 0300 	mov.w	r3, #0
 800464c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004650:	4649      	mov	r1, r9
 8004652:	008b      	lsls	r3, r1, #2
 8004654:	4641      	mov	r1, r8
 8004656:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800465a:	4641      	mov	r1, r8
 800465c:	008a      	lsls	r2, r1, #2
 800465e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004662:	f7fb fe15 	bl	8000290 <__aeabi_uldivmod>
 8004666:	4602      	mov	r2, r0
 8004668:	460b      	mov	r3, r1
 800466a:	4b0d      	ldr	r3, [pc, #52]	@ (80046a0 <UART_SetConfig+0x4e4>)
 800466c:	fba3 1302 	umull	r1, r3, r3, r2
 8004670:	095b      	lsrs	r3, r3, #5
 8004672:	2164      	movs	r1, #100	@ 0x64
 8004674:	fb01 f303 	mul.w	r3, r1, r3
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	011b      	lsls	r3, r3, #4
 800467c:	3332      	adds	r3, #50	@ 0x32
 800467e:	4a08      	ldr	r2, [pc, #32]	@ (80046a0 <UART_SetConfig+0x4e4>)
 8004680:	fba2 2303 	umull	r2, r3, r2, r3
 8004684:	095b      	lsrs	r3, r3, #5
 8004686:	f003 020f 	and.w	r2, r3, #15
 800468a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4422      	add	r2, r4
 8004692:	609a      	str	r2, [r3, #8]
}
 8004694:	bf00      	nop
 8004696:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800469a:	46bd      	mov	sp, r7
 800469c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046a0:	51eb851f 	.word	0x51eb851f

080046a4 <_Znaj>:
 80046a4:	f000 b8c4 	b.w	8004830 <_Znwj>

080046a8 <_ZNSaIcEC1Ev>:
 80046a8:	4770      	bx	lr

080046aa <_ZNSaIcED1Ev>:
 80046aa:	4770      	bx	lr

080046ac <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 80046ac:	b10a      	cbz	r2, 80046b2 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 80046ae:	f000 ba69 	b.w	8004b84 <memcpy>
 80046b2:	4770      	bx	lr

080046b4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 80046b4:	f850 3b08 	ldr.w	r3, [r0], #8
 80046b8:	1a1b      	subs	r3, r3, r0
 80046ba:	4258      	negs	r0, r3
 80046bc:	4158      	adcs	r0, r3
 80046be:	4770      	bx	lr

080046c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 80046c0:	b508      	push	{r3, lr}
 80046c2:	680b      	ldr	r3, [r1, #0]
 80046c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046c8:	d302      	bcc.n	80046d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 80046ca:	480d      	ldr	r0, [pc, #52]	@ (8004700 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 80046cc:	f000 f8c7 	bl	800485e <_ZSt20__throw_length_errorPKc>
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d90b      	bls.n	80046ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80046d4:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80046d8:	ea4f 0042 	mov.w	r0, r2, lsl #1
 80046dc:	d206      	bcs.n	80046ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80046de:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80046e2:	bf2a      	itet	cs
 80046e4:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 80046e8:	6008      	strcc	r0, [r1, #0]
 80046ea:	600b      	strcs	r3, [r1, #0]
 80046ec:	6808      	ldr	r0, [r1, #0]
 80046ee:	3001      	adds	r0, #1
 80046f0:	d501      	bpl.n	80046f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 80046f2:	f000 f8ae 	bl	8004852 <_ZSt17__throw_bad_allocv>
 80046f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80046fa:	f000 b899 	b.w	8004830 <_Znwj>
 80046fe:	bf00      	nop
 8004700:	08005354 	.word	0x08005354

08004704 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8004704:	b510      	push	{r4, lr}
 8004706:	4604      	mov	r4, r0
 8004708:	f7ff ffd4 	bl	80046b4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 800470c:	b920      	cbnz	r0, 8004718 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 800470e:	6820      	ldr	r0, [r4, #0]
 8004710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004714:	f000 b88a 	b.w	800482c <_ZdlPv>
 8004718:	bd10      	pop	{r4, pc}

0800471a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800471a:	2a01      	cmp	r2, #1
 800471c:	b410      	push	{r4}
 800471e:	d104      	bne.n	800472a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 8004720:	780a      	ldrb	r2, [r1, #0]
 8004722:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004726:	7002      	strb	r2, [r0, #0]
 8004728:	4770      	bx	lr
 800472a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800472e:	f7ff bfbd 	b.w	80046ac <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08004732 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8004732:	b508      	push	{r3, lr}
 8004734:	1a52      	subs	r2, r2, r1
 8004736:	f7ff fff0 	bl	800471a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800473a:	bd08      	pop	{r3, pc}

0800473c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 800473c:	f100 0208 	add.w	r2, r0, #8
 8004740:	6002      	str	r2, [r0, #0]
 8004742:	2200      	movs	r2, #0
 8004744:	6042      	str	r2, [r0, #4]
 8004746:	7202      	strb	r2, [r0, #8]
 8004748:	4770      	bx	lr

0800474a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800474a:	b510      	push	{r4, lr}
 800474c:	4604      	mov	r4, r0
 800474e:	f7ff ffd9 	bl	8004704 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8004752:	4620      	mov	r0, r4
 8004754:	bd10      	pop	{r4, pc}

08004756 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 8004756:	6840      	ldr	r0, [r0, #4]
 8004758:	4770      	bx	lr

0800475a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 800475a:	b510      	push	{r4, lr}
 800475c:	4604      	mov	r4, r0
 800475e:	f7ff ffa9 	bl	80046b4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8004762:	b908      	cbnz	r0, 8004768 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xe>
 8004764:	68a0      	ldr	r0, [r4, #8]
 8004766:	bd10      	pop	{r4, pc}
 8004768:	200f      	movs	r0, #15
 800476a:	e7fc      	b.n	8004766 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xc>

0800476c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 800476c:	4288      	cmp	r0, r1
 800476e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004770:	4604      	mov	r4, r0
 8004772:	460e      	mov	r6, r1
 8004774:	d01d      	beq.n	80047b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x46>
 8004776:	684d      	ldr	r5, [r1, #4]
 8004778:	f7ff ffef 	bl	800475a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 800477c:	42a8      	cmp	r0, r5
 800477e:	4602      	mov	r2, r0
 8004780:	d211      	bcs.n	80047a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x3a>
 8004782:	a901      	add	r1, sp, #4
 8004784:	4620      	mov	r0, r4
 8004786:	9501      	str	r5, [sp, #4]
 8004788:	f7ff ff9a 	bl	80046c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800478c:	4607      	mov	r7, r0
 800478e:	4620      	mov	r0, r4
 8004790:	f7ff ffb8 	bl	8004704 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8004794:	9b01      	ldr	r3, [sp, #4]
 8004796:	6027      	str	r7, [r4, #0]
 8004798:	60a3      	str	r3, [r4, #8]
 800479a:	6831      	ldr	r1, [r6, #0]
 800479c:	6820      	ldr	r0, [r4, #0]
 800479e:	462a      	mov	r2, r5
 80047a0:	f7ff ffbb 	bl	800471a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80047a4:	e001      	b.n	80047aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x3e>
 80047a6:	2d00      	cmp	r5, #0
 80047a8:	d1f7      	bne.n	800479a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x2e>
 80047aa:	6823      	ldr	r3, [r4, #0]
 80047ac:	6065      	str	r5, [r4, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	555a      	strb	r2, [r3, r5]
 80047b2:	b003      	add	sp, #12
 80047b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080047b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 80047b6:	b510      	push	{r4, lr}
 80047b8:	4604      	mov	r4, r0
 80047ba:	f7ff ffd7 	bl	800476c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 80047be:	4620      	mov	r0, r4
 80047c0:	bd10      	pop	{r4, pc}

080047c2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 80047c2:	6800      	ldr	r0, [r0, #0]
 80047c4:	4770      	bx	lr

080047c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 80047c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80047c8:	1a53      	subs	r3, r2, r1
 80047ca:	2b0f      	cmp	r3, #15
 80047cc:	4604      	mov	r4, r0
 80047ce:	460d      	mov	r5, r1
 80047d0:	4616      	mov	r6, r2
 80047d2:	9301      	str	r3, [sp, #4]
 80047d4:	d906      	bls.n	80047e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x1e>
 80047d6:	2200      	movs	r2, #0
 80047d8:	a901      	add	r1, sp, #4
 80047da:	f7ff ff71 	bl	80046c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80047de:	9b01      	ldr	r3, [sp, #4]
 80047e0:	6020      	str	r0, [r4, #0]
 80047e2:	60a3      	str	r3, [r4, #8]
 80047e4:	4632      	mov	r2, r6
 80047e6:	4629      	mov	r1, r5
 80047e8:	6820      	ldr	r0, [r4, #0]
 80047ea:	f7ff ffa2 	bl	8004732 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 80047ee:	9b01      	ldr	r3, [sp, #4]
 80047f0:	6822      	ldr	r2, [r4, #0]
 80047f2:	6063      	str	r3, [r4, #4]
 80047f4:	2100      	movs	r1, #0
 80047f6:	54d1      	strb	r1, [r2, r3]
 80047f8:	b002      	add	sp, #8
 80047fa:	bd70      	pop	{r4, r5, r6, pc}

080047fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 80047fc:	b538      	push	{r3, r4, r5, lr}
 80047fe:	f100 0308 	add.w	r3, r0, #8
 8004802:	4604      	mov	r4, r0
 8004804:	6003      	str	r3, [r0, #0]
 8004806:	460d      	mov	r5, r1
 8004808:	b911      	cbnz	r1, 8004810 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x14>
 800480a:	4807      	ldr	r0, [pc, #28]	@ (8004828 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x2c>)
 800480c:	f000 f824 	bl	8004858 <_ZSt19__throw_logic_errorPKc>
 8004810:	4608      	mov	r0, r1
 8004812:	f7fb fd35 	bl	8000280 <strlen>
 8004816:	f04f 0300 	mov.w	r3, #0
 800481a:	182a      	adds	r2, r5, r0
 800481c:	4629      	mov	r1, r5
 800481e:	4620      	mov	r0, r4
 8004820:	f7ff ffd1 	bl	80047c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8004824:	4620      	mov	r0, r4
 8004826:	bd38      	pop	{r3, r4, r5, pc}
 8004828:	0800536c 	.word	0x0800536c

0800482c <_ZdlPv>:
 800482c:	f000 b832 	b.w	8004894 <free>

08004830 <_Znwj>:
 8004830:	2801      	cmp	r0, #1
 8004832:	bf38      	it	cc
 8004834:	2001      	movcc	r0, #1
 8004836:	b510      	push	{r4, lr}
 8004838:	4604      	mov	r4, r0
 800483a:	4620      	mov	r0, r4
 800483c:	f000 f822 	bl	8004884 <malloc>
 8004840:	b100      	cbz	r0, 8004844 <_Znwj+0x14>
 8004842:	bd10      	pop	{r4, pc}
 8004844:	f000 f80e 	bl	8004864 <_ZSt15get_new_handlerv>
 8004848:	b908      	cbnz	r0, 800484e <_Znwj+0x1e>
 800484a:	f000 f813 	bl	8004874 <abort>
 800484e:	4780      	blx	r0
 8004850:	e7f3      	b.n	800483a <_Znwj+0xa>

08004852 <_ZSt17__throw_bad_allocv>:
 8004852:	b508      	push	{r3, lr}
 8004854:	f000 f80e 	bl	8004874 <abort>

08004858 <_ZSt19__throw_logic_errorPKc>:
 8004858:	b508      	push	{r3, lr}
 800485a:	f000 f80b 	bl	8004874 <abort>

0800485e <_ZSt20__throw_length_errorPKc>:
 800485e:	b508      	push	{r3, lr}
 8004860:	f000 f808 	bl	8004874 <abort>

08004864 <_ZSt15get_new_handlerv>:
 8004864:	4b02      	ldr	r3, [pc, #8]	@ (8004870 <_ZSt15get_new_handlerv+0xc>)
 8004866:	6818      	ldr	r0, [r3, #0]
 8004868:	f3bf 8f5b 	dmb	ish
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	200007f0 	.word	0x200007f0

08004874 <abort>:
 8004874:	b508      	push	{r3, lr}
 8004876:	2006      	movs	r0, #6
 8004878:	f000 f92c 	bl	8004ad4 <raise>
 800487c:	2001      	movs	r0, #1
 800487e:	f7fd fbe7 	bl	8002050 <_exit>
	...

08004884 <malloc>:
 8004884:	4b02      	ldr	r3, [pc, #8]	@ (8004890 <malloc+0xc>)
 8004886:	4601      	mov	r1, r0
 8004888:	6818      	ldr	r0, [r3, #0]
 800488a:	f000 b82d 	b.w	80048e8 <_malloc_r>
 800488e:	bf00      	nop
 8004890:	2000001c 	.word	0x2000001c

08004894 <free>:
 8004894:	4b02      	ldr	r3, [pc, #8]	@ (80048a0 <free+0xc>)
 8004896:	4601      	mov	r1, r0
 8004898:	6818      	ldr	r0, [r3, #0]
 800489a:	f000 b989 	b.w	8004bb0 <_free_r>
 800489e:	bf00      	nop
 80048a0:	2000001c 	.word	0x2000001c

080048a4 <sbrk_aligned>:
 80048a4:	b570      	push	{r4, r5, r6, lr}
 80048a6:	4e0f      	ldr	r6, [pc, #60]	@ (80048e4 <sbrk_aligned+0x40>)
 80048a8:	460c      	mov	r4, r1
 80048aa:	6831      	ldr	r1, [r6, #0]
 80048ac:	4605      	mov	r5, r0
 80048ae:	b911      	cbnz	r1, 80048b6 <sbrk_aligned+0x12>
 80048b0:	f000 f92c 	bl	8004b0c <_sbrk_r>
 80048b4:	6030      	str	r0, [r6, #0]
 80048b6:	4621      	mov	r1, r4
 80048b8:	4628      	mov	r0, r5
 80048ba:	f000 f927 	bl	8004b0c <_sbrk_r>
 80048be:	1c43      	adds	r3, r0, #1
 80048c0:	d103      	bne.n	80048ca <sbrk_aligned+0x26>
 80048c2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80048c6:	4620      	mov	r0, r4
 80048c8:	bd70      	pop	{r4, r5, r6, pc}
 80048ca:	1cc4      	adds	r4, r0, #3
 80048cc:	f024 0403 	bic.w	r4, r4, #3
 80048d0:	42a0      	cmp	r0, r4
 80048d2:	d0f8      	beq.n	80048c6 <sbrk_aligned+0x22>
 80048d4:	1a21      	subs	r1, r4, r0
 80048d6:	4628      	mov	r0, r5
 80048d8:	f000 f918 	bl	8004b0c <_sbrk_r>
 80048dc:	3001      	adds	r0, #1
 80048de:	d1f2      	bne.n	80048c6 <sbrk_aligned+0x22>
 80048e0:	e7ef      	b.n	80048c2 <sbrk_aligned+0x1e>
 80048e2:	bf00      	nop
 80048e4:	200007f4 	.word	0x200007f4

080048e8 <_malloc_r>:
 80048e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048ec:	1ccd      	adds	r5, r1, #3
 80048ee:	f025 0503 	bic.w	r5, r5, #3
 80048f2:	3508      	adds	r5, #8
 80048f4:	2d0c      	cmp	r5, #12
 80048f6:	bf38      	it	cc
 80048f8:	250c      	movcc	r5, #12
 80048fa:	2d00      	cmp	r5, #0
 80048fc:	4606      	mov	r6, r0
 80048fe:	db01      	blt.n	8004904 <_malloc_r+0x1c>
 8004900:	42a9      	cmp	r1, r5
 8004902:	d904      	bls.n	800490e <_malloc_r+0x26>
 8004904:	230c      	movs	r3, #12
 8004906:	6033      	str	r3, [r6, #0]
 8004908:	2000      	movs	r0, #0
 800490a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800490e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80049e4 <_malloc_r+0xfc>
 8004912:	f000 f869 	bl	80049e8 <__malloc_lock>
 8004916:	f8d8 3000 	ldr.w	r3, [r8]
 800491a:	461c      	mov	r4, r3
 800491c:	bb44      	cbnz	r4, 8004970 <_malloc_r+0x88>
 800491e:	4629      	mov	r1, r5
 8004920:	4630      	mov	r0, r6
 8004922:	f7ff ffbf 	bl	80048a4 <sbrk_aligned>
 8004926:	1c43      	adds	r3, r0, #1
 8004928:	4604      	mov	r4, r0
 800492a:	d158      	bne.n	80049de <_malloc_r+0xf6>
 800492c:	f8d8 4000 	ldr.w	r4, [r8]
 8004930:	4627      	mov	r7, r4
 8004932:	2f00      	cmp	r7, #0
 8004934:	d143      	bne.n	80049be <_malloc_r+0xd6>
 8004936:	2c00      	cmp	r4, #0
 8004938:	d04b      	beq.n	80049d2 <_malloc_r+0xea>
 800493a:	6823      	ldr	r3, [r4, #0]
 800493c:	4639      	mov	r1, r7
 800493e:	4630      	mov	r0, r6
 8004940:	eb04 0903 	add.w	r9, r4, r3
 8004944:	f000 f8e2 	bl	8004b0c <_sbrk_r>
 8004948:	4581      	cmp	r9, r0
 800494a:	d142      	bne.n	80049d2 <_malloc_r+0xea>
 800494c:	6821      	ldr	r1, [r4, #0]
 800494e:	1a6d      	subs	r5, r5, r1
 8004950:	4629      	mov	r1, r5
 8004952:	4630      	mov	r0, r6
 8004954:	f7ff ffa6 	bl	80048a4 <sbrk_aligned>
 8004958:	3001      	adds	r0, #1
 800495a:	d03a      	beq.n	80049d2 <_malloc_r+0xea>
 800495c:	6823      	ldr	r3, [r4, #0]
 800495e:	442b      	add	r3, r5
 8004960:	6023      	str	r3, [r4, #0]
 8004962:	f8d8 3000 	ldr.w	r3, [r8]
 8004966:	685a      	ldr	r2, [r3, #4]
 8004968:	bb62      	cbnz	r2, 80049c4 <_malloc_r+0xdc>
 800496a:	f8c8 7000 	str.w	r7, [r8]
 800496e:	e00f      	b.n	8004990 <_malloc_r+0xa8>
 8004970:	6822      	ldr	r2, [r4, #0]
 8004972:	1b52      	subs	r2, r2, r5
 8004974:	d420      	bmi.n	80049b8 <_malloc_r+0xd0>
 8004976:	2a0b      	cmp	r2, #11
 8004978:	d917      	bls.n	80049aa <_malloc_r+0xc2>
 800497a:	1961      	adds	r1, r4, r5
 800497c:	42a3      	cmp	r3, r4
 800497e:	6025      	str	r5, [r4, #0]
 8004980:	bf18      	it	ne
 8004982:	6059      	strne	r1, [r3, #4]
 8004984:	6863      	ldr	r3, [r4, #4]
 8004986:	bf08      	it	eq
 8004988:	f8c8 1000 	streq.w	r1, [r8]
 800498c:	5162      	str	r2, [r4, r5]
 800498e:	604b      	str	r3, [r1, #4]
 8004990:	4630      	mov	r0, r6
 8004992:	f000 f82f 	bl	80049f4 <__malloc_unlock>
 8004996:	f104 000b 	add.w	r0, r4, #11
 800499a:	1d23      	adds	r3, r4, #4
 800499c:	f020 0007 	bic.w	r0, r0, #7
 80049a0:	1ac2      	subs	r2, r0, r3
 80049a2:	bf1c      	itt	ne
 80049a4:	1a1b      	subne	r3, r3, r0
 80049a6:	50a3      	strne	r3, [r4, r2]
 80049a8:	e7af      	b.n	800490a <_malloc_r+0x22>
 80049aa:	6862      	ldr	r2, [r4, #4]
 80049ac:	42a3      	cmp	r3, r4
 80049ae:	bf0c      	ite	eq
 80049b0:	f8c8 2000 	streq.w	r2, [r8]
 80049b4:	605a      	strne	r2, [r3, #4]
 80049b6:	e7eb      	b.n	8004990 <_malloc_r+0xa8>
 80049b8:	4623      	mov	r3, r4
 80049ba:	6864      	ldr	r4, [r4, #4]
 80049bc:	e7ae      	b.n	800491c <_malloc_r+0x34>
 80049be:	463c      	mov	r4, r7
 80049c0:	687f      	ldr	r7, [r7, #4]
 80049c2:	e7b6      	b.n	8004932 <_malloc_r+0x4a>
 80049c4:	461a      	mov	r2, r3
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	42a3      	cmp	r3, r4
 80049ca:	d1fb      	bne.n	80049c4 <_malloc_r+0xdc>
 80049cc:	2300      	movs	r3, #0
 80049ce:	6053      	str	r3, [r2, #4]
 80049d0:	e7de      	b.n	8004990 <_malloc_r+0xa8>
 80049d2:	230c      	movs	r3, #12
 80049d4:	6033      	str	r3, [r6, #0]
 80049d6:	4630      	mov	r0, r6
 80049d8:	f000 f80c 	bl	80049f4 <__malloc_unlock>
 80049dc:	e794      	b.n	8004908 <_malloc_r+0x20>
 80049de:	6005      	str	r5, [r0, #0]
 80049e0:	e7d6      	b.n	8004990 <_malloc_r+0xa8>
 80049e2:	bf00      	nop
 80049e4:	200007f8 	.word	0x200007f8

080049e8 <__malloc_lock>:
 80049e8:	4801      	ldr	r0, [pc, #4]	@ (80049f0 <__malloc_lock+0x8>)
 80049ea:	f000 b8c9 	b.w	8004b80 <__retarget_lock_acquire_recursive>
 80049ee:	bf00      	nop
 80049f0:	20000934 	.word	0x20000934

080049f4 <__malloc_unlock>:
 80049f4:	4801      	ldr	r0, [pc, #4]	@ (80049fc <__malloc_unlock+0x8>)
 80049f6:	f000 b8c4 	b.w	8004b82 <__retarget_lock_release_recursive>
 80049fa:	bf00      	nop
 80049fc:	20000934 	.word	0x20000934

08004a00 <siprintf>:
 8004a00:	b40e      	push	{r1, r2, r3}
 8004a02:	b500      	push	{lr}
 8004a04:	b09c      	sub	sp, #112	@ 0x70
 8004a06:	ab1d      	add	r3, sp, #116	@ 0x74
 8004a08:	9002      	str	r0, [sp, #8]
 8004a0a:	9006      	str	r0, [sp, #24]
 8004a0c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004a10:	4809      	ldr	r0, [pc, #36]	@ (8004a38 <siprintf+0x38>)
 8004a12:	9107      	str	r1, [sp, #28]
 8004a14:	9104      	str	r1, [sp, #16]
 8004a16:	4909      	ldr	r1, [pc, #36]	@ (8004a3c <siprintf+0x3c>)
 8004a18:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a1c:	9105      	str	r1, [sp, #20]
 8004a1e:	6800      	ldr	r0, [r0, #0]
 8004a20:	9301      	str	r3, [sp, #4]
 8004a22:	a902      	add	r1, sp, #8
 8004a24:	f000 f96a 	bl	8004cfc <_svfiprintf_r>
 8004a28:	9b02      	ldr	r3, [sp, #8]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	701a      	strb	r2, [r3, #0]
 8004a2e:	b01c      	add	sp, #112	@ 0x70
 8004a30:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a34:	b003      	add	sp, #12
 8004a36:	4770      	bx	lr
 8004a38:	2000001c 	.word	0x2000001c
 8004a3c:	ffff0208 	.word	0xffff0208

08004a40 <memmove>:
 8004a40:	4288      	cmp	r0, r1
 8004a42:	b510      	push	{r4, lr}
 8004a44:	eb01 0402 	add.w	r4, r1, r2
 8004a48:	d902      	bls.n	8004a50 <memmove+0x10>
 8004a4a:	4284      	cmp	r4, r0
 8004a4c:	4623      	mov	r3, r4
 8004a4e:	d807      	bhi.n	8004a60 <memmove+0x20>
 8004a50:	1e43      	subs	r3, r0, #1
 8004a52:	42a1      	cmp	r1, r4
 8004a54:	d008      	beq.n	8004a68 <memmove+0x28>
 8004a56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a5e:	e7f8      	b.n	8004a52 <memmove+0x12>
 8004a60:	4402      	add	r2, r0
 8004a62:	4601      	mov	r1, r0
 8004a64:	428a      	cmp	r2, r1
 8004a66:	d100      	bne.n	8004a6a <memmove+0x2a>
 8004a68:	bd10      	pop	{r4, pc}
 8004a6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004a72:	e7f7      	b.n	8004a64 <memmove+0x24>

08004a74 <memset>:
 8004a74:	4402      	add	r2, r0
 8004a76:	4603      	mov	r3, r0
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d100      	bne.n	8004a7e <memset+0xa>
 8004a7c:	4770      	bx	lr
 8004a7e:	f803 1b01 	strb.w	r1, [r3], #1
 8004a82:	e7f9      	b.n	8004a78 <memset+0x4>

08004a84 <_raise_r>:
 8004a84:	291f      	cmp	r1, #31
 8004a86:	b538      	push	{r3, r4, r5, lr}
 8004a88:	4605      	mov	r5, r0
 8004a8a:	460c      	mov	r4, r1
 8004a8c:	d904      	bls.n	8004a98 <_raise_r+0x14>
 8004a8e:	2316      	movs	r3, #22
 8004a90:	6003      	str	r3, [r0, #0]
 8004a92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004a96:	bd38      	pop	{r3, r4, r5, pc}
 8004a98:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004a9a:	b112      	cbz	r2, 8004aa2 <_raise_r+0x1e>
 8004a9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004aa0:	b94b      	cbnz	r3, 8004ab6 <_raise_r+0x32>
 8004aa2:	4628      	mov	r0, r5
 8004aa4:	f000 f830 	bl	8004b08 <_getpid_r>
 8004aa8:	4622      	mov	r2, r4
 8004aaa:	4601      	mov	r1, r0
 8004aac:	4628      	mov	r0, r5
 8004aae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ab2:	f000 b817 	b.w	8004ae4 <_kill_r>
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d00a      	beq.n	8004ad0 <_raise_r+0x4c>
 8004aba:	1c59      	adds	r1, r3, #1
 8004abc:	d103      	bne.n	8004ac6 <_raise_r+0x42>
 8004abe:	2316      	movs	r3, #22
 8004ac0:	6003      	str	r3, [r0, #0]
 8004ac2:	2001      	movs	r0, #1
 8004ac4:	e7e7      	b.n	8004a96 <_raise_r+0x12>
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004acc:	4620      	mov	r0, r4
 8004ace:	4798      	blx	r3
 8004ad0:	2000      	movs	r0, #0
 8004ad2:	e7e0      	b.n	8004a96 <_raise_r+0x12>

08004ad4 <raise>:
 8004ad4:	4b02      	ldr	r3, [pc, #8]	@ (8004ae0 <raise+0xc>)
 8004ad6:	4601      	mov	r1, r0
 8004ad8:	6818      	ldr	r0, [r3, #0]
 8004ada:	f7ff bfd3 	b.w	8004a84 <_raise_r>
 8004ade:	bf00      	nop
 8004ae0:	2000001c 	.word	0x2000001c

08004ae4 <_kill_r>:
 8004ae4:	b538      	push	{r3, r4, r5, lr}
 8004ae6:	4d07      	ldr	r5, [pc, #28]	@ (8004b04 <_kill_r+0x20>)
 8004ae8:	2300      	movs	r3, #0
 8004aea:	4604      	mov	r4, r0
 8004aec:	4608      	mov	r0, r1
 8004aee:	4611      	mov	r1, r2
 8004af0:	602b      	str	r3, [r5, #0]
 8004af2:	f7fd fa9d 	bl	8002030 <_kill>
 8004af6:	1c43      	adds	r3, r0, #1
 8004af8:	d102      	bne.n	8004b00 <_kill_r+0x1c>
 8004afa:	682b      	ldr	r3, [r5, #0]
 8004afc:	b103      	cbz	r3, 8004b00 <_kill_r+0x1c>
 8004afe:	6023      	str	r3, [r4, #0]
 8004b00:	bd38      	pop	{r3, r4, r5, pc}
 8004b02:	bf00      	nop
 8004b04:	20000938 	.word	0x20000938

08004b08 <_getpid_r>:
 8004b08:	f7fd ba8a 	b.w	8002020 <_getpid>

08004b0c <_sbrk_r>:
 8004b0c:	b538      	push	{r3, r4, r5, lr}
 8004b0e:	4d06      	ldr	r5, [pc, #24]	@ (8004b28 <_sbrk_r+0x1c>)
 8004b10:	2300      	movs	r3, #0
 8004b12:	4604      	mov	r4, r0
 8004b14:	4608      	mov	r0, r1
 8004b16:	602b      	str	r3, [r5, #0]
 8004b18:	f7fd faa6 	bl	8002068 <_sbrk>
 8004b1c:	1c43      	adds	r3, r0, #1
 8004b1e:	d102      	bne.n	8004b26 <_sbrk_r+0x1a>
 8004b20:	682b      	ldr	r3, [r5, #0]
 8004b22:	b103      	cbz	r3, 8004b26 <_sbrk_r+0x1a>
 8004b24:	6023      	str	r3, [r4, #0]
 8004b26:	bd38      	pop	{r3, r4, r5, pc}
 8004b28:	20000938 	.word	0x20000938

08004b2c <__errno>:
 8004b2c:	4b01      	ldr	r3, [pc, #4]	@ (8004b34 <__errno+0x8>)
 8004b2e:	6818      	ldr	r0, [r3, #0]
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	2000001c 	.word	0x2000001c

08004b38 <__libc_init_array>:
 8004b38:	b570      	push	{r4, r5, r6, lr}
 8004b3a:	4d0d      	ldr	r5, [pc, #52]	@ (8004b70 <__libc_init_array+0x38>)
 8004b3c:	4c0d      	ldr	r4, [pc, #52]	@ (8004b74 <__libc_init_array+0x3c>)
 8004b3e:	1b64      	subs	r4, r4, r5
 8004b40:	10a4      	asrs	r4, r4, #2
 8004b42:	2600      	movs	r6, #0
 8004b44:	42a6      	cmp	r6, r4
 8004b46:	d109      	bne.n	8004b5c <__libc_init_array+0x24>
 8004b48:	4d0b      	ldr	r5, [pc, #44]	@ (8004b78 <__libc_init_array+0x40>)
 8004b4a:	4c0c      	ldr	r4, [pc, #48]	@ (8004b7c <__libc_init_array+0x44>)
 8004b4c:	f000 fb96 	bl	800527c <_init>
 8004b50:	1b64      	subs	r4, r4, r5
 8004b52:	10a4      	asrs	r4, r4, #2
 8004b54:	2600      	movs	r6, #0
 8004b56:	42a6      	cmp	r6, r4
 8004b58:	d105      	bne.n	8004b66 <__libc_init_array+0x2e>
 8004b5a:	bd70      	pop	{r4, r5, r6, pc}
 8004b5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b60:	4798      	blx	r3
 8004b62:	3601      	adds	r6, #1
 8004b64:	e7ee      	b.n	8004b44 <__libc_init_array+0xc>
 8004b66:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b6a:	4798      	blx	r3
 8004b6c:	3601      	adds	r6, #1
 8004b6e:	e7f2      	b.n	8004b56 <__libc_init_array+0x1e>
 8004b70:	080053dc 	.word	0x080053dc
 8004b74:	080053dc 	.word	0x080053dc
 8004b78:	080053dc 	.word	0x080053dc
 8004b7c:	080053e4 	.word	0x080053e4

08004b80 <__retarget_lock_acquire_recursive>:
 8004b80:	4770      	bx	lr

08004b82 <__retarget_lock_release_recursive>:
 8004b82:	4770      	bx	lr

08004b84 <memcpy>:
 8004b84:	440a      	add	r2, r1
 8004b86:	4291      	cmp	r1, r2
 8004b88:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004b8c:	d100      	bne.n	8004b90 <memcpy+0xc>
 8004b8e:	4770      	bx	lr
 8004b90:	b510      	push	{r4, lr}
 8004b92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b9a:	4291      	cmp	r1, r2
 8004b9c:	d1f9      	bne.n	8004b92 <memcpy+0xe>
 8004b9e:	bd10      	pop	{r4, pc}

08004ba0 <strcpy>:
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ba6:	f803 2b01 	strb.w	r2, [r3], #1
 8004baa:	2a00      	cmp	r2, #0
 8004bac:	d1f9      	bne.n	8004ba2 <strcpy+0x2>
 8004bae:	4770      	bx	lr

08004bb0 <_free_r>:
 8004bb0:	b538      	push	{r3, r4, r5, lr}
 8004bb2:	4605      	mov	r5, r0
 8004bb4:	2900      	cmp	r1, #0
 8004bb6:	d041      	beq.n	8004c3c <_free_r+0x8c>
 8004bb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bbc:	1f0c      	subs	r4, r1, #4
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	bfb8      	it	lt
 8004bc2:	18e4      	addlt	r4, r4, r3
 8004bc4:	f7ff ff10 	bl	80049e8 <__malloc_lock>
 8004bc8:	4a1d      	ldr	r2, [pc, #116]	@ (8004c40 <_free_r+0x90>)
 8004bca:	6813      	ldr	r3, [r2, #0]
 8004bcc:	b933      	cbnz	r3, 8004bdc <_free_r+0x2c>
 8004bce:	6063      	str	r3, [r4, #4]
 8004bd0:	6014      	str	r4, [r2, #0]
 8004bd2:	4628      	mov	r0, r5
 8004bd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004bd8:	f7ff bf0c 	b.w	80049f4 <__malloc_unlock>
 8004bdc:	42a3      	cmp	r3, r4
 8004bde:	d908      	bls.n	8004bf2 <_free_r+0x42>
 8004be0:	6820      	ldr	r0, [r4, #0]
 8004be2:	1821      	adds	r1, r4, r0
 8004be4:	428b      	cmp	r3, r1
 8004be6:	bf01      	itttt	eq
 8004be8:	6819      	ldreq	r1, [r3, #0]
 8004bea:	685b      	ldreq	r3, [r3, #4]
 8004bec:	1809      	addeq	r1, r1, r0
 8004bee:	6021      	streq	r1, [r4, #0]
 8004bf0:	e7ed      	b.n	8004bce <_free_r+0x1e>
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	b10b      	cbz	r3, 8004bfc <_free_r+0x4c>
 8004bf8:	42a3      	cmp	r3, r4
 8004bfa:	d9fa      	bls.n	8004bf2 <_free_r+0x42>
 8004bfc:	6811      	ldr	r1, [r2, #0]
 8004bfe:	1850      	adds	r0, r2, r1
 8004c00:	42a0      	cmp	r0, r4
 8004c02:	d10b      	bne.n	8004c1c <_free_r+0x6c>
 8004c04:	6820      	ldr	r0, [r4, #0]
 8004c06:	4401      	add	r1, r0
 8004c08:	1850      	adds	r0, r2, r1
 8004c0a:	4283      	cmp	r3, r0
 8004c0c:	6011      	str	r1, [r2, #0]
 8004c0e:	d1e0      	bne.n	8004bd2 <_free_r+0x22>
 8004c10:	6818      	ldr	r0, [r3, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	6053      	str	r3, [r2, #4]
 8004c16:	4408      	add	r0, r1
 8004c18:	6010      	str	r0, [r2, #0]
 8004c1a:	e7da      	b.n	8004bd2 <_free_r+0x22>
 8004c1c:	d902      	bls.n	8004c24 <_free_r+0x74>
 8004c1e:	230c      	movs	r3, #12
 8004c20:	602b      	str	r3, [r5, #0]
 8004c22:	e7d6      	b.n	8004bd2 <_free_r+0x22>
 8004c24:	6820      	ldr	r0, [r4, #0]
 8004c26:	1821      	adds	r1, r4, r0
 8004c28:	428b      	cmp	r3, r1
 8004c2a:	bf04      	itt	eq
 8004c2c:	6819      	ldreq	r1, [r3, #0]
 8004c2e:	685b      	ldreq	r3, [r3, #4]
 8004c30:	6063      	str	r3, [r4, #4]
 8004c32:	bf04      	itt	eq
 8004c34:	1809      	addeq	r1, r1, r0
 8004c36:	6021      	streq	r1, [r4, #0]
 8004c38:	6054      	str	r4, [r2, #4]
 8004c3a:	e7ca      	b.n	8004bd2 <_free_r+0x22>
 8004c3c:	bd38      	pop	{r3, r4, r5, pc}
 8004c3e:	bf00      	nop
 8004c40:	200007f8 	.word	0x200007f8

08004c44 <__ssputs_r>:
 8004c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c48:	688e      	ldr	r6, [r1, #8]
 8004c4a:	461f      	mov	r7, r3
 8004c4c:	42be      	cmp	r6, r7
 8004c4e:	680b      	ldr	r3, [r1, #0]
 8004c50:	4682      	mov	sl, r0
 8004c52:	460c      	mov	r4, r1
 8004c54:	4690      	mov	r8, r2
 8004c56:	d82d      	bhi.n	8004cb4 <__ssputs_r+0x70>
 8004c58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004c5c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004c60:	d026      	beq.n	8004cb0 <__ssputs_r+0x6c>
 8004c62:	6965      	ldr	r5, [r4, #20]
 8004c64:	6909      	ldr	r1, [r1, #16]
 8004c66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c6a:	eba3 0901 	sub.w	r9, r3, r1
 8004c6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c72:	1c7b      	adds	r3, r7, #1
 8004c74:	444b      	add	r3, r9
 8004c76:	106d      	asrs	r5, r5, #1
 8004c78:	429d      	cmp	r5, r3
 8004c7a:	bf38      	it	cc
 8004c7c:	461d      	movcc	r5, r3
 8004c7e:	0553      	lsls	r3, r2, #21
 8004c80:	d527      	bpl.n	8004cd2 <__ssputs_r+0x8e>
 8004c82:	4629      	mov	r1, r5
 8004c84:	f7ff fe30 	bl	80048e8 <_malloc_r>
 8004c88:	4606      	mov	r6, r0
 8004c8a:	b360      	cbz	r0, 8004ce6 <__ssputs_r+0xa2>
 8004c8c:	6921      	ldr	r1, [r4, #16]
 8004c8e:	464a      	mov	r2, r9
 8004c90:	f7ff ff78 	bl	8004b84 <memcpy>
 8004c94:	89a3      	ldrh	r3, [r4, #12]
 8004c96:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004c9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c9e:	81a3      	strh	r3, [r4, #12]
 8004ca0:	6126      	str	r6, [r4, #16]
 8004ca2:	6165      	str	r5, [r4, #20]
 8004ca4:	444e      	add	r6, r9
 8004ca6:	eba5 0509 	sub.w	r5, r5, r9
 8004caa:	6026      	str	r6, [r4, #0]
 8004cac:	60a5      	str	r5, [r4, #8]
 8004cae:	463e      	mov	r6, r7
 8004cb0:	42be      	cmp	r6, r7
 8004cb2:	d900      	bls.n	8004cb6 <__ssputs_r+0x72>
 8004cb4:	463e      	mov	r6, r7
 8004cb6:	6820      	ldr	r0, [r4, #0]
 8004cb8:	4632      	mov	r2, r6
 8004cba:	4641      	mov	r1, r8
 8004cbc:	f7ff fec0 	bl	8004a40 <memmove>
 8004cc0:	68a3      	ldr	r3, [r4, #8]
 8004cc2:	1b9b      	subs	r3, r3, r6
 8004cc4:	60a3      	str	r3, [r4, #8]
 8004cc6:	6823      	ldr	r3, [r4, #0]
 8004cc8:	4433      	add	r3, r6
 8004cca:	6023      	str	r3, [r4, #0]
 8004ccc:	2000      	movs	r0, #0
 8004cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cd2:	462a      	mov	r2, r5
 8004cd4:	f000 fa9c 	bl	8005210 <_realloc_r>
 8004cd8:	4606      	mov	r6, r0
 8004cda:	2800      	cmp	r0, #0
 8004cdc:	d1e0      	bne.n	8004ca0 <__ssputs_r+0x5c>
 8004cde:	6921      	ldr	r1, [r4, #16]
 8004ce0:	4650      	mov	r0, sl
 8004ce2:	f7ff ff65 	bl	8004bb0 <_free_r>
 8004ce6:	230c      	movs	r3, #12
 8004ce8:	f8ca 3000 	str.w	r3, [sl]
 8004cec:	89a3      	ldrh	r3, [r4, #12]
 8004cee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cf2:	81a3      	strh	r3, [r4, #12]
 8004cf4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004cf8:	e7e9      	b.n	8004cce <__ssputs_r+0x8a>
	...

08004cfc <_svfiprintf_r>:
 8004cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d00:	4698      	mov	r8, r3
 8004d02:	898b      	ldrh	r3, [r1, #12]
 8004d04:	061b      	lsls	r3, r3, #24
 8004d06:	b09d      	sub	sp, #116	@ 0x74
 8004d08:	4607      	mov	r7, r0
 8004d0a:	460d      	mov	r5, r1
 8004d0c:	4614      	mov	r4, r2
 8004d0e:	d510      	bpl.n	8004d32 <_svfiprintf_r+0x36>
 8004d10:	690b      	ldr	r3, [r1, #16]
 8004d12:	b973      	cbnz	r3, 8004d32 <_svfiprintf_r+0x36>
 8004d14:	2140      	movs	r1, #64	@ 0x40
 8004d16:	f7ff fde7 	bl	80048e8 <_malloc_r>
 8004d1a:	6028      	str	r0, [r5, #0]
 8004d1c:	6128      	str	r0, [r5, #16]
 8004d1e:	b930      	cbnz	r0, 8004d2e <_svfiprintf_r+0x32>
 8004d20:	230c      	movs	r3, #12
 8004d22:	603b      	str	r3, [r7, #0]
 8004d24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004d28:	b01d      	add	sp, #116	@ 0x74
 8004d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d2e:	2340      	movs	r3, #64	@ 0x40
 8004d30:	616b      	str	r3, [r5, #20]
 8004d32:	2300      	movs	r3, #0
 8004d34:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d36:	2320      	movs	r3, #32
 8004d38:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004d3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d40:	2330      	movs	r3, #48	@ 0x30
 8004d42:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004ee0 <_svfiprintf_r+0x1e4>
 8004d46:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004d4a:	f04f 0901 	mov.w	r9, #1
 8004d4e:	4623      	mov	r3, r4
 8004d50:	469a      	mov	sl, r3
 8004d52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d56:	b10a      	cbz	r2, 8004d5c <_svfiprintf_r+0x60>
 8004d58:	2a25      	cmp	r2, #37	@ 0x25
 8004d5a:	d1f9      	bne.n	8004d50 <_svfiprintf_r+0x54>
 8004d5c:	ebba 0b04 	subs.w	fp, sl, r4
 8004d60:	d00b      	beq.n	8004d7a <_svfiprintf_r+0x7e>
 8004d62:	465b      	mov	r3, fp
 8004d64:	4622      	mov	r2, r4
 8004d66:	4629      	mov	r1, r5
 8004d68:	4638      	mov	r0, r7
 8004d6a:	f7ff ff6b 	bl	8004c44 <__ssputs_r>
 8004d6e:	3001      	adds	r0, #1
 8004d70:	f000 80a7 	beq.w	8004ec2 <_svfiprintf_r+0x1c6>
 8004d74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d76:	445a      	add	r2, fp
 8004d78:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d7a:	f89a 3000 	ldrb.w	r3, [sl]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	f000 809f 	beq.w	8004ec2 <_svfiprintf_r+0x1c6>
 8004d84:	2300      	movs	r3, #0
 8004d86:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004d8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d8e:	f10a 0a01 	add.w	sl, sl, #1
 8004d92:	9304      	str	r3, [sp, #16]
 8004d94:	9307      	str	r3, [sp, #28]
 8004d96:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004d9a:	931a      	str	r3, [sp, #104]	@ 0x68
 8004d9c:	4654      	mov	r4, sl
 8004d9e:	2205      	movs	r2, #5
 8004da0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004da4:	484e      	ldr	r0, [pc, #312]	@ (8004ee0 <_svfiprintf_r+0x1e4>)
 8004da6:	f7fb fa1b 	bl	80001e0 <memchr>
 8004daa:	9a04      	ldr	r2, [sp, #16]
 8004dac:	b9d8      	cbnz	r0, 8004de6 <_svfiprintf_r+0xea>
 8004dae:	06d0      	lsls	r0, r2, #27
 8004db0:	bf44      	itt	mi
 8004db2:	2320      	movmi	r3, #32
 8004db4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004db8:	0711      	lsls	r1, r2, #28
 8004dba:	bf44      	itt	mi
 8004dbc:	232b      	movmi	r3, #43	@ 0x2b
 8004dbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004dc2:	f89a 3000 	ldrb.w	r3, [sl]
 8004dc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8004dc8:	d015      	beq.n	8004df6 <_svfiprintf_r+0xfa>
 8004dca:	9a07      	ldr	r2, [sp, #28]
 8004dcc:	4654      	mov	r4, sl
 8004dce:	2000      	movs	r0, #0
 8004dd0:	f04f 0c0a 	mov.w	ip, #10
 8004dd4:	4621      	mov	r1, r4
 8004dd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004dda:	3b30      	subs	r3, #48	@ 0x30
 8004ddc:	2b09      	cmp	r3, #9
 8004dde:	d94b      	bls.n	8004e78 <_svfiprintf_r+0x17c>
 8004de0:	b1b0      	cbz	r0, 8004e10 <_svfiprintf_r+0x114>
 8004de2:	9207      	str	r2, [sp, #28]
 8004de4:	e014      	b.n	8004e10 <_svfiprintf_r+0x114>
 8004de6:	eba0 0308 	sub.w	r3, r0, r8
 8004dea:	fa09 f303 	lsl.w	r3, r9, r3
 8004dee:	4313      	orrs	r3, r2
 8004df0:	9304      	str	r3, [sp, #16]
 8004df2:	46a2      	mov	sl, r4
 8004df4:	e7d2      	b.n	8004d9c <_svfiprintf_r+0xa0>
 8004df6:	9b03      	ldr	r3, [sp, #12]
 8004df8:	1d19      	adds	r1, r3, #4
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	9103      	str	r1, [sp, #12]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	bfbb      	ittet	lt
 8004e02:	425b      	neglt	r3, r3
 8004e04:	f042 0202 	orrlt.w	r2, r2, #2
 8004e08:	9307      	strge	r3, [sp, #28]
 8004e0a:	9307      	strlt	r3, [sp, #28]
 8004e0c:	bfb8      	it	lt
 8004e0e:	9204      	strlt	r2, [sp, #16]
 8004e10:	7823      	ldrb	r3, [r4, #0]
 8004e12:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e14:	d10a      	bne.n	8004e2c <_svfiprintf_r+0x130>
 8004e16:	7863      	ldrb	r3, [r4, #1]
 8004e18:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e1a:	d132      	bne.n	8004e82 <_svfiprintf_r+0x186>
 8004e1c:	9b03      	ldr	r3, [sp, #12]
 8004e1e:	1d1a      	adds	r2, r3, #4
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	9203      	str	r2, [sp, #12]
 8004e24:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004e28:	3402      	adds	r4, #2
 8004e2a:	9305      	str	r3, [sp, #20]
 8004e2c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004ef0 <_svfiprintf_r+0x1f4>
 8004e30:	7821      	ldrb	r1, [r4, #0]
 8004e32:	2203      	movs	r2, #3
 8004e34:	4650      	mov	r0, sl
 8004e36:	f7fb f9d3 	bl	80001e0 <memchr>
 8004e3a:	b138      	cbz	r0, 8004e4c <_svfiprintf_r+0x150>
 8004e3c:	9b04      	ldr	r3, [sp, #16]
 8004e3e:	eba0 000a 	sub.w	r0, r0, sl
 8004e42:	2240      	movs	r2, #64	@ 0x40
 8004e44:	4082      	lsls	r2, r0
 8004e46:	4313      	orrs	r3, r2
 8004e48:	3401      	adds	r4, #1
 8004e4a:	9304      	str	r3, [sp, #16]
 8004e4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e50:	4824      	ldr	r0, [pc, #144]	@ (8004ee4 <_svfiprintf_r+0x1e8>)
 8004e52:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004e56:	2206      	movs	r2, #6
 8004e58:	f7fb f9c2 	bl	80001e0 <memchr>
 8004e5c:	2800      	cmp	r0, #0
 8004e5e:	d036      	beq.n	8004ece <_svfiprintf_r+0x1d2>
 8004e60:	4b21      	ldr	r3, [pc, #132]	@ (8004ee8 <_svfiprintf_r+0x1ec>)
 8004e62:	bb1b      	cbnz	r3, 8004eac <_svfiprintf_r+0x1b0>
 8004e64:	9b03      	ldr	r3, [sp, #12]
 8004e66:	3307      	adds	r3, #7
 8004e68:	f023 0307 	bic.w	r3, r3, #7
 8004e6c:	3308      	adds	r3, #8
 8004e6e:	9303      	str	r3, [sp, #12]
 8004e70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e72:	4433      	add	r3, r6
 8004e74:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e76:	e76a      	b.n	8004d4e <_svfiprintf_r+0x52>
 8004e78:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e7c:	460c      	mov	r4, r1
 8004e7e:	2001      	movs	r0, #1
 8004e80:	e7a8      	b.n	8004dd4 <_svfiprintf_r+0xd8>
 8004e82:	2300      	movs	r3, #0
 8004e84:	3401      	adds	r4, #1
 8004e86:	9305      	str	r3, [sp, #20]
 8004e88:	4619      	mov	r1, r3
 8004e8a:	f04f 0c0a 	mov.w	ip, #10
 8004e8e:	4620      	mov	r0, r4
 8004e90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e94:	3a30      	subs	r2, #48	@ 0x30
 8004e96:	2a09      	cmp	r2, #9
 8004e98:	d903      	bls.n	8004ea2 <_svfiprintf_r+0x1a6>
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d0c6      	beq.n	8004e2c <_svfiprintf_r+0x130>
 8004e9e:	9105      	str	r1, [sp, #20]
 8004ea0:	e7c4      	b.n	8004e2c <_svfiprintf_r+0x130>
 8004ea2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ea6:	4604      	mov	r4, r0
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e7f0      	b.n	8004e8e <_svfiprintf_r+0x192>
 8004eac:	ab03      	add	r3, sp, #12
 8004eae:	9300      	str	r3, [sp, #0]
 8004eb0:	462a      	mov	r2, r5
 8004eb2:	4b0e      	ldr	r3, [pc, #56]	@ (8004eec <_svfiprintf_r+0x1f0>)
 8004eb4:	a904      	add	r1, sp, #16
 8004eb6:	4638      	mov	r0, r7
 8004eb8:	f3af 8000 	nop.w
 8004ebc:	1c42      	adds	r2, r0, #1
 8004ebe:	4606      	mov	r6, r0
 8004ec0:	d1d6      	bne.n	8004e70 <_svfiprintf_r+0x174>
 8004ec2:	89ab      	ldrh	r3, [r5, #12]
 8004ec4:	065b      	lsls	r3, r3, #25
 8004ec6:	f53f af2d 	bmi.w	8004d24 <_svfiprintf_r+0x28>
 8004eca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ecc:	e72c      	b.n	8004d28 <_svfiprintf_r+0x2c>
 8004ece:	ab03      	add	r3, sp, #12
 8004ed0:	9300      	str	r3, [sp, #0]
 8004ed2:	462a      	mov	r2, r5
 8004ed4:	4b05      	ldr	r3, [pc, #20]	@ (8004eec <_svfiprintf_r+0x1f0>)
 8004ed6:	a904      	add	r1, sp, #16
 8004ed8:	4638      	mov	r0, r7
 8004eda:	f000 f879 	bl	8004fd0 <_printf_i>
 8004ede:	e7ed      	b.n	8004ebc <_svfiprintf_r+0x1c0>
 8004ee0:	0800539e 	.word	0x0800539e
 8004ee4:	080053a8 	.word	0x080053a8
 8004ee8:	00000000 	.word	0x00000000
 8004eec:	08004c45 	.word	0x08004c45
 8004ef0:	080053a4 	.word	0x080053a4

08004ef4 <_printf_common>:
 8004ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ef8:	4616      	mov	r6, r2
 8004efa:	4698      	mov	r8, r3
 8004efc:	688a      	ldr	r2, [r1, #8]
 8004efe:	690b      	ldr	r3, [r1, #16]
 8004f00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004f04:	4293      	cmp	r3, r2
 8004f06:	bfb8      	it	lt
 8004f08:	4613      	movlt	r3, r2
 8004f0a:	6033      	str	r3, [r6, #0]
 8004f0c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004f10:	4607      	mov	r7, r0
 8004f12:	460c      	mov	r4, r1
 8004f14:	b10a      	cbz	r2, 8004f1a <_printf_common+0x26>
 8004f16:	3301      	adds	r3, #1
 8004f18:	6033      	str	r3, [r6, #0]
 8004f1a:	6823      	ldr	r3, [r4, #0]
 8004f1c:	0699      	lsls	r1, r3, #26
 8004f1e:	bf42      	ittt	mi
 8004f20:	6833      	ldrmi	r3, [r6, #0]
 8004f22:	3302      	addmi	r3, #2
 8004f24:	6033      	strmi	r3, [r6, #0]
 8004f26:	6825      	ldr	r5, [r4, #0]
 8004f28:	f015 0506 	ands.w	r5, r5, #6
 8004f2c:	d106      	bne.n	8004f3c <_printf_common+0x48>
 8004f2e:	f104 0a19 	add.w	sl, r4, #25
 8004f32:	68e3      	ldr	r3, [r4, #12]
 8004f34:	6832      	ldr	r2, [r6, #0]
 8004f36:	1a9b      	subs	r3, r3, r2
 8004f38:	42ab      	cmp	r3, r5
 8004f3a:	dc26      	bgt.n	8004f8a <_printf_common+0x96>
 8004f3c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004f40:	6822      	ldr	r2, [r4, #0]
 8004f42:	3b00      	subs	r3, #0
 8004f44:	bf18      	it	ne
 8004f46:	2301      	movne	r3, #1
 8004f48:	0692      	lsls	r2, r2, #26
 8004f4a:	d42b      	bmi.n	8004fa4 <_printf_common+0xb0>
 8004f4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004f50:	4641      	mov	r1, r8
 8004f52:	4638      	mov	r0, r7
 8004f54:	47c8      	blx	r9
 8004f56:	3001      	adds	r0, #1
 8004f58:	d01e      	beq.n	8004f98 <_printf_common+0xa4>
 8004f5a:	6823      	ldr	r3, [r4, #0]
 8004f5c:	6922      	ldr	r2, [r4, #16]
 8004f5e:	f003 0306 	and.w	r3, r3, #6
 8004f62:	2b04      	cmp	r3, #4
 8004f64:	bf02      	ittt	eq
 8004f66:	68e5      	ldreq	r5, [r4, #12]
 8004f68:	6833      	ldreq	r3, [r6, #0]
 8004f6a:	1aed      	subeq	r5, r5, r3
 8004f6c:	68a3      	ldr	r3, [r4, #8]
 8004f6e:	bf0c      	ite	eq
 8004f70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f74:	2500      	movne	r5, #0
 8004f76:	4293      	cmp	r3, r2
 8004f78:	bfc4      	itt	gt
 8004f7a:	1a9b      	subgt	r3, r3, r2
 8004f7c:	18ed      	addgt	r5, r5, r3
 8004f7e:	2600      	movs	r6, #0
 8004f80:	341a      	adds	r4, #26
 8004f82:	42b5      	cmp	r5, r6
 8004f84:	d11a      	bne.n	8004fbc <_printf_common+0xc8>
 8004f86:	2000      	movs	r0, #0
 8004f88:	e008      	b.n	8004f9c <_printf_common+0xa8>
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	4652      	mov	r2, sl
 8004f8e:	4641      	mov	r1, r8
 8004f90:	4638      	mov	r0, r7
 8004f92:	47c8      	blx	r9
 8004f94:	3001      	adds	r0, #1
 8004f96:	d103      	bne.n	8004fa0 <_printf_common+0xac>
 8004f98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fa0:	3501      	adds	r5, #1
 8004fa2:	e7c6      	b.n	8004f32 <_printf_common+0x3e>
 8004fa4:	18e1      	adds	r1, r4, r3
 8004fa6:	1c5a      	adds	r2, r3, #1
 8004fa8:	2030      	movs	r0, #48	@ 0x30
 8004faa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004fae:	4422      	add	r2, r4
 8004fb0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004fb4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004fb8:	3302      	adds	r3, #2
 8004fba:	e7c7      	b.n	8004f4c <_printf_common+0x58>
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	4622      	mov	r2, r4
 8004fc0:	4641      	mov	r1, r8
 8004fc2:	4638      	mov	r0, r7
 8004fc4:	47c8      	blx	r9
 8004fc6:	3001      	adds	r0, #1
 8004fc8:	d0e6      	beq.n	8004f98 <_printf_common+0xa4>
 8004fca:	3601      	adds	r6, #1
 8004fcc:	e7d9      	b.n	8004f82 <_printf_common+0x8e>
	...

08004fd0 <_printf_i>:
 8004fd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fd4:	7e0f      	ldrb	r7, [r1, #24]
 8004fd6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004fd8:	2f78      	cmp	r7, #120	@ 0x78
 8004fda:	4691      	mov	r9, r2
 8004fdc:	4680      	mov	r8, r0
 8004fde:	460c      	mov	r4, r1
 8004fe0:	469a      	mov	sl, r3
 8004fe2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004fe6:	d807      	bhi.n	8004ff8 <_printf_i+0x28>
 8004fe8:	2f62      	cmp	r7, #98	@ 0x62
 8004fea:	d80a      	bhi.n	8005002 <_printf_i+0x32>
 8004fec:	2f00      	cmp	r7, #0
 8004fee:	f000 80d2 	beq.w	8005196 <_printf_i+0x1c6>
 8004ff2:	2f58      	cmp	r7, #88	@ 0x58
 8004ff4:	f000 80b9 	beq.w	800516a <_printf_i+0x19a>
 8004ff8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ffc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005000:	e03a      	b.n	8005078 <_printf_i+0xa8>
 8005002:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005006:	2b15      	cmp	r3, #21
 8005008:	d8f6      	bhi.n	8004ff8 <_printf_i+0x28>
 800500a:	a101      	add	r1, pc, #4	@ (adr r1, 8005010 <_printf_i+0x40>)
 800500c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005010:	08005069 	.word	0x08005069
 8005014:	0800507d 	.word	0x0800507d
 8005018:	08004ff9 	.word	0x08004ff9
 800501c:	08004ff9 	.word	0x08004ff9
 8005020:	08004ff9 	.word	0x08004ff9
 8005024:	08004ff9 	.word	0x08004ff9
 8005028:	0800507d 	.word	0x0800507d
 800502c:	08004ff9 	.word	0x08004ff9
 8005030:	08004ff9 	.word	0x08004ff9
 8005034:	08004ff9 	.word	0x08004ff9
 8005038:	08004ff9 	.word	0x08004ff9
 800503c:	0800517d 	.word	0x0800517d
 8005040:	080050a7 	.word	0x080050a7
 8005044:	08005137 	.word	0x08005137
 8005048:	08004ff9 	.word	0x08004ff9
 800504c:	08004ff9 	.word	0x08004ff9
 8005050:	0800519f 	.word	0x0800519f
 8005054:	08004ff9 	.word	0x08004ff9
 8005058:	080050a7 	.word	0x080050a7
 800505c:	08004ff9 	.word	0x08004ff9
 8005060:	08004ff9 	.word	0x08004ff9
 8005064:	0800513f 	.word	0x0800513f
 8005068:	6833      	ldr	r3, [r6, #0]
 800506a:	1d1a      	adds	r2, r3, #4
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	6032      	str	r2, [r6, #0]
 8005070:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005074:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005078:	2301      	movs	r3, #1
 800507a:	e09d      	b.n	80051b8 <_printf_i+0x1e8>
 800507c:	6833      	ldr	r3, [r6, #0]
 800507e:	6820      	ldr	r0, [r4, #0]
 8005080:	1d19      	adds	r1, r3, #4
 8005082:	6031      	str	r1, [r6, #0]
 8005084:	0606      	lsls	r6, r0, #24
 8005086:	d501      	bpl.n	800508c <_printf_i+0xbc>
 8005088:	681d      	ldr	r5, [r3, #0]
 800508a:	e003      	b.n	8005094 <_printf_i+0xc4>
 800508c:	0645      	lsls	r5, r0, #25
 800508e:	d5fb      	bpl.n	8005088 <_printf_i+0xb8>
 8005090:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005094:	2d00      	cmp	r5, #0
 8005096:	da03      	bge.n	80050a0 <_printf_i+0xd0>
 8005098:	232d      	movs	r3, #45	@ 0x2d
 800509a:	426d      	negs	r5, r5
 800509c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050a0:	4859      	ldr	r0, [pc, #356]	@ (8005208 <_printf_i+0x238>)
 80050a2:	230a      	movs	r3, #10
 80050a4:	e011      	b.n	80050ca <_printf_i+0xfa>
 80050a6:	6821      	ldr	r1, [r4, #0]
 80050a8:	6833      	ldr	r3, [r6, #0]
 80050aa:	0608      	lsls	r0, r1, #24
 80050ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80050b0:	d402      	bmi.n	80050b8 <_printf_i+0xe8>
 80050b2:	0649      	lsls	r1, r1, #25
 80050b4:	bf48      	it	mi
 80050b6:	b2ad      	uxthmi	r5, r5
 80050b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80050ba:	4853      	ldr	r0, [pc, #332]	@ (8005208 <_printf_i+0x238>)
 80050bc:	6033      	str	r3, [r6, #0]
 80050be:	bf14      	ite	ne
 80050c0:	230a      	movne	r3, #10
 80050c2:	2308      	moveq	r3, #8
 80050c4:	2100      	movs	r1, #0
 80050c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80050ca:	6866      	ldr	r6, [r4, #4]
 80050cc:	60a6      	str	r6, [r4, #8]
 80050ce:	2e00      	cmp	r6, #0
 80050d0:	bfa2      	ittt	ge
 80050d2:	6821      	ldrge	r1, [r4, #0]
 80050d4:	f021 0104 	bicge.w	r1, r1, #4
 80050d8:	6021      	strge	r1, [r4, #0]
 80050da:	b90d      	cbnz	r5, 80050e0 <_printf_i+0x110>
 80050dc:	2e00      	cmp	r6, #0
 80050de:	d04b      	beq.n	8005178 <_printf_i+0x1a8>
 80050e0:	4616      	mov	r6, r2
 80050e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80050e6:	fb03 5711 	mls	r7, r3, r1, r5
 80050ea:	5dc7      	ldrb	r7, [r0, r7]
 80050ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80050f0:	462f      	mov	r7, r5
 80050f2:	42bb      	cmp	r3, r7
 80050f4:	460d      	mov	r5, r1
 80050f6:	d9f4      	bls.n	80050e2 <_printf_i+0x112>
 80050f8:	2b08      	cmp	r3, #8
 80050fa:	d10b      	bne.n	8005114 <_printf_i+0x144>
 80050fc:	6823      	ldr	r3, [r4, #0]
 80050fe:	07df      	lsls	r7, r3, #31
 8005100:	d508      	bpl.n	8005114 <_printf_i+0x144>
 8005102:	6923      	ldr	r3, [r4, #16]
 8005104:	6861      	ldr	r1, [r4, #4]
 8005106:	4299      	cmp	r1, r3
 8005108:	bfde      	ittt	le
 800510a:	2330      	movle	r3, #48	@ 0x30
 800510c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005110:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005114:	1b92      	subs	r2, r2, r6
 8005116:	6122      	str	r2, [r4, #16]
 8005118:	f8cd a000 	str.w	sl, [sp]
 800511c:	464b      	mov	r3, r9
 800511e:	aa03      	add	r2, sp, #12
 8005120:	4621      	mov	r1, r4
 8005122:	4640      	mov	r0, r8
 8005124:	f7ff fee6 	bl	8004ef4 <_printf_common>
 8005128:	3001      	adds	r0, #1
 800512a:	d14a      	bne.n	80051c2 <_printf_i+0x1f2>
 800512c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005130:	b004      	add	sp, #16
 8005132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005136:	6823      	ldr	r3, [r4, #0]
 8005138:	f043 0320 	orr.w	r3, r3, #32
 800513c:	6023      	str	r3, [r4, #0]
 800513e:	4833      	ldr	r0, [pc, #204]	@ (800520c <_printf_i+0x23c>)
 8005140:	2778      	movs	r7, #120	@ 0x78
 8005142:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005146:	6823      	ldr	r3, [r4, #0]
 8005148:	6831      	ldr	r1, [r6, #0]
 800514a:	061f      	lsls	r7, r3, #24
 800514c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005150:	d402      	bmi.n	8005158 <_printf_i+0x188>
 8005152:	065f      	lsls	r7, r3, #25
 8005154:	bf48      	it	mi
 8005156:	b2ad      	uxthmi	r5, r5
 8005158:	6031      	str	r1, [r6, #0]
 800515a:	07d9      	lsls	r1, r3, #31
 800515c:	bf44      	itt	mi
 800515e:	f043 0320 	orrmi.w	r3, r3, #32
 8005162:	6023      	strmi	r3, [r4, #0]
 8005164:	b11d      	cbz	r5, 800516e <_printf_i+0x19e>
 8005166:	2310      	movs	r3, #16
 8005168:	e7ac      	b.n	80050c4 <_printf_i+0xf4>
 800516a:	4827      	ldr	r0, [pc, #156]	@ (8005208 <_printf_i+0x238>)
 800516c:	e7e9      	b.n	8005142 <_printf_i+0x172>
 800516e:	6823      	ldr	r3, [r4, #0]
 8005170:	f023 0320 	bic.w	r3, r3, #32
 8005174:	6023      	str	r3, [r4, #0]
 8005176:	e7f6      	b.n	8005166 <_printf_i+0x196>
 8005178:	4616      	mov	r6, r2
 800517a:	e7bd      	b.n	80050f8 <_printf_i+0x128>
 800517c:	6833      	ldr	r3, [r6, #0]
 800517e:	6825      	ldr	r5, [r4, #0]
 8005180:	6961      	ldr	r1, [r4, #20]
 8005182:	1d18      	adds	r0, r3, #4
 8005184:	6030      	str	r0, [r6, #0]
 8005186:	062e      	lsls	r6, r5, #24
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	d501      	bpl.n	8005190 <_printf_i+0x1c0>
 800518c:	6019      	str	r1, [r3, #0]
 800518e:	e002      	b.n	8005196 <_printf_i+0x1c6>
 8005190:	0668      	lsls	r0, r5, #25
 8005192:	d5fb      	bpl.n	800518c <_printf_i+0x1bc>
 8005194:	8019      	strh	r1, [r3, #0]
 8005196:	2300      	movs	r3, #0
 8005198:	6123      	str	r3, [r4, #16]
 800519a:	4616      	mov	r6, r2
 800519c:	e7bc      	b.n	8005118 <_printf_i+0x148>
 800519e:	6833      	ldr	r3, [r6, #0]
 80051a0:	1d1a      	adds	r2, r3, #4
 80051a2:	6032      	str	r2, [r6, #0]
 80051a4:	681e      	ldr	r6, [r3, #0]
 80051a6:	6862      	ldr	r2, [r4, #4]
 80051a8:	2100      	movs	r1, #0
 80051aa:	4630      	mov	r0, r6
 80051ac:	f7fb f818 	bl	80001e0 <memchr>
 80051b0:	b108      	cbz	r0, 80051b6 <_printf_i+0x1e6>
 80051b2:	1b80      	subs	r0, r0, r6
 80051b4:	6060      	str	r0, [r4, #4]
 80051b6:	6863      	ldr	r3, [r4, #4]
 80051b8:	6123      	str	r3, [r4, #16]
 80051ba:	2300      	movs	r3, #0
 80051bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051c0:	e7aa      	b.n	8005118 <_printf_i+0x148>
 80051c2:	6923      	ldr	r3, [r4, #16]
 80051c4:	4632      	mov	r2, r6
 80051c6:	4649      	mov	r1, r9
 80051c8:	4640      	mov	r0, r8
 80051ca:	47d0      	blx	sl
 80051cc:	3001      	adds	r0, #1
 80051ce:	d0ad      	beq.n	800512c <_printf_i+0x15c>
 80051d0:	6823      	ldr	r3, [r4, #0]
 80051d2:	079b      	lsls	r3, r3, #30
 80051d4:	d413      	bmi.n	80051fe <_printf_i+0x22e>
 80051d6:	68e0      	ldr	r0, [r4, #12]
 80051d8:	9b03      	ldr	r3, [sp, #12]
 80051da:	4298      	cmp	r0, r3
 80051dc:	bfb8      	it	lt
 80051de:	4618      	movlt	r0, r3
 80051e0:	e7a6      	b.n	8005130 <_printf_i+0x160>
 80051e2:	2301      	movs	r3, #1
 80051e4:	4632      	mov	r2, r6
 80051e6:	4649      	mov	r1, r9
 80051e8:	4640      	mov	r0, r8
 80051ea:	47d0      	blx	sl
 80051ec:	3001      	adds	r0, #1
 80051ee:	d09d      	beq.n	800512c <_printf_i+0x15c>
 80051f0:	3501      	adds	r5, #1
 80051f2:	68e3      	ldr	r3, [r4, #12]
 80051f4:	9903      	ldr	r1, [sp, #12]
 80051f6:	1a5b      	subs	r3, r3, r1
 80051f8:	42ab      	cmp	r3, r5
 80051fa:	dcf2      	bgt.n	80051e2 <_printf_i+0x212>
 80051fc:	e7eb      	b.n	80051d6 <_printf_i+0x206>
 80051fe:	2500      	movs	r5, #0
 8005200:	f104 0619 	add.w	r6, r4, #25
 8005204:	e7f5      	b.n	80051f2 <_printf_i+0x222>
 8005206:	bf00      	nop
 8005208:	080053af 	.word	0x080053af
 800520c:	080053c0 	.word	0x080053c0

08005210 <_realloc_r>:
 8005210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005214:	4680      	mov	r8, r0
 8005216:	4615      	mov	r5, r2
 8005218:	460c      	mov	r4, r1
 800521a:	b921      	cbnz	r1, 8005226 <_realloc_r+0x16>
 800521c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005220:	4611      	mov	r1, r2
 8005222:	f7ff bb61 	b.w	80048e8 <_malloc_r>
 8005226:	b92a      	cbnz	r2, 8005234 <_realloc_r+0x24>
 8005228:	f7ff fcc2 	bl	8004bb0 <_free_r>
 800522c:	2400      	movs	r4, #0
 800522e:	4620      	mov	r0, r4
 8005230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005234:	f000 f81a 	bl	800526c <_malloc_usable_size_r>
 8005238:	4285      	cmp	r5, r0
 800523a:	4606      	mov	r6, r0
 800523c:	d802      	bhi.n	8005244 <_realloc_r+0x34>
 800523e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005242:	d8f4      	bhi.n	800522e <_realloc_r+0x1e>
 8005244:	4629      	mov	r1, r5
 8005246:	4640      	mov	r0, r8
 8005248:	f7ff fb4e 	bl	80048e8 <_malloc_r>
 800524c:	4607      	mov	r7, r0
 800524e:	2800      	cmp	r0, #0
 8005250:	d0ec      	beq.n	800522c <_realloc_r+0x1c>
 8005252:	42b5      	cmp	r5, r6
 8005254:	462a      	mov	r2, r5
 8005256:	4621      	mov	r1, r4
 8005258:	bf28      	it	cs
 800525a:	4632      	movcs	r2, r6
 800525c:	f7ff fc92 	bl	8004b84 <memcpy>
 8005260:	4621      	mov	r1, r4
 8005262:	4640      	mov	r0, r8
 8005264:	f7ff fca4 	bl	8004bb0 <_free_r>
 8005268:	463c      	mov	r4, r7
 800526a:	e7e0      	b.n	800522e <_realloc_r+0x1e>

0800526c <_malloc_usable_size_r>:
 800526c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005270:	1f18      	subs	r0, r3, #4
 8005272:	2b00      	cmp	r3, #0
 8005274:	bfbc      	itt	lt
 8005276:	580b      	ldrlt	r3, [r1, r0]
 8005278:	18c0      	addlt	r0, r0, r3
 800527a:	4770      	bx	lr

0800527c <_init>:
 800527c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800527e:	bf00      	nop
 8005280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005282:	bc08      	pop	{r3}
 8005284:	469e      	mov	lr, r3
 8005286:	4770      	bx	lr

08005288 <_fini>:
 8005288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800528a:	bf00      	nop
 800528c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800528e:	bc08      	pop	{r3}
 8005290:	469e      	mov	lr, r3
 8005292:	4770      	bx	lr
